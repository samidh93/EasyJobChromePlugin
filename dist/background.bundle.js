var S=Object.defineProperty,D=Object.defineProperties;var v=Object.getOwnPropertyDescriptors;var U=Object.getOwnPropertySymbols;var k=Object.prototype.hasOwnProperty,_=Object.prototype.propertyIsEnumerable;var I=(r,o,e)=>o in r?S(r,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[o]=e,f=(r,o)=>{for(var e in o||(o={}))k.call(o,e)&&I(r,e,o[e]);if(U)for(var e of U(o))_.call(o,e)&&I(r,e,o[e]);return r},h=(r,o)=>D(r,v(o));var p=!0,m="http://localhost:3001/api";console.log("Background script loaded - Database operations enabled via API server");chrome.runtime.onInstalled.addListener(()=>{console.log("Job Tracker Extension Installed")});var g=!1,y=null,A=null,d=null;chrome.runtime.onMessage.addListener((r,o,e)=>{if(console.log("Background received message:",r),r.action==="startAutoApply")return $(r,e),!0;if(r.action==="stopAutoApply")return T(r,e),!0;if(r.action==="registerUser")return L(r,e),!0;if(r.action==="loginUser")return j(r,e),!0;if(r.action==="logoutUser")return x(r,e),!0;if(r.action==="getUserProfile")return C(r,e),!0;if(r.action==="updateUserProfile")return N(r,e),!0;if(r.action==="getCurrentUser")return J(r,e),!0;if(r.action==="apiRequest")return M(r,e),!0;if(r.action==="uploadResume")return F(r,e),!0;if(r.action==="downloadResume")return B(r,e),!0;if(r.action==="testOllamaConnection")return b().then(a=>{e(a)}).catch(a=>{e({success:!1,error:a.message})}),!0;if(r.action==="callOllama"){let a=r.endpoint||"generate",s=r.data||{};return E(a,s).then(n=>{e(n)}).catch(n=>{e({success:!1,error:n.message})}),!0}else{if(r.action==="testOllama")return b().then(a=>{e(a)}).catch(a=>{e({success:!1,error:a.message})}),!0;if(r.action==="getAutoApplyState")return e({success:!0,isRunning:g}),!0}e({success:!1,error:"Unknown action"})});async function $(r,o){try{if(console.log("Starting auto apply with data:",r),!r.loginData||!r.loginData.username)throw new Error("Login data required");if(!r.aiSettings||!r.aiSettings.provider||!r.aiSettings.model)throw new Error("AI settings required");y=r.loginData,A=r.aiSettings,g=!0,await P(r.aiSettings);let e=await chrome.tabs.query({active:!0,currentWindow:!0});if(e.length>0){let a=e[0].id;if(!e[0].url.includes("linkedin.com"))throw new Error("Please navigate to LinkedIn jobs page first");chrome.tabs.sendMessage(a,{action:"startAutoApply",userData:y,aiSettings:A},s=>{chrome.runtime.lastError?(console.error("Error sending message to content script:",chrome.runtime.lastError),o({success:!1,error:"Failed to communicate with LinkedIn page. Please refresh the page and try again."})):(console.log("Content script response:",s),o({success:!0,message:"Auto apply started successfully"}))})}else throw new Error("No active tab found")}catch(e){console.error("Error starting auto apply:",e),g=!1,o({success:!1,error:e.message})}}async function T(r,o){try{console.log("Stopping auto apply");let e=await chrome.tabs.query({active:!0,currentWindow:!0});if(e.length>0){let a=e[0].id;chrome.tabs.sendMessage(a,{action:"stopAutoApply"},s=>{chrome.runtime.lastError?(console.error("Error sending stop message to content script:",chrome.runtime.lastError),g=!1,o({success:!0,message:"Auto apply stopped (content script communication error)"})):s&&s.success?(console.log("Auto apply stopped successfully"),g=!1,o({success:!0,message:"Auto apply stopped"})):(console.error("Content script failed to stop auto apply:",s==null?void 0:s.error),g=!1,o({success:!0,message:"Auto apply stopped (with content script error)"}))})}else g=!1,o({success:!0,message:"Auto apply stopped (no active tab)"})}catch(e){console.error("Error stopping auto apply:",e),g=!1,o({success:!1,error:e.message})}}async function P(r){if(console.log("Testing AI connection:",r),r.provider==="ollama"){let o=await b();if(!o.success)throw new Error("Ollama connection failed: ".concat(o.error));console.log("Ollama connection successful")}else{if(!r.apiKey)throw new Error("API key required for ".concat(r.provider));console.log("AI settings validated for ".concat(r.provider))}}async function b(){try{console.log("Testing Ollama connection...");let o=await E("chat",{model:"qwen2.5:3b",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],stream:!1});if(o.success)return console.log("Ollama chat test successful:",o.data),{success:!0,data:{version:o.data.model,response:o.data.message.content,port:11434}};throw new Error(o.error||"Unknown error from Ollama")}catch(r){return console.error("Ollama connection failed:",r),{success:!1,error:r.message,details:r.stack,troubleshooting:"Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal."}}}async function E(r,o){var e,a;try{console.log("Making Ollama API call to ".concat(r,":"),o);let s=11434;console.log("Using Ollama port: ".concat(s));let n=h(f({},o),{stream:!1}),l=await fetch("http://localhost:".concat(s,"/api/").concat(r),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(n)});if(!l.ok){let i=await l.text();throw console.error("Ollama API error response:",{status:l.status,statusText:l.statusText,body:i}),new Error("HTTP error! status: ".concat(l.status,", details: ").concat(i))}let c=await l.text(),t;try{t=JSON.parse(c)}catch(i){console.warn("JSON parse error:",i.message),console.log("Response text:",c.substring(0,200)+"...");try{let u=c.match(/\{[\s\S]*\}/);if(u)t=JSON.parse(u[0]),console.log("Successfully extracted JSON from response");else throw new Error("Couldn't find valid JSON object in response")}catch(u){throw console.error("Failed to extract JSON:",u),new Error("Invalid JSON response from Ollama: ".concat(i.message))}}if(console.log("Ollama API call successful:",t),r==="chat"){if(!t||!t.message||!t.message.content)if(console.error("Unexpected chat response structure from Ollama:",t),t&&typeof t=="object")t={message:{content:((e=t.message)==null?void 0:e.content)||t.content||t.text||t.response||""||"No content found in response"},model:t.model||"unknown"},console.log("Constructed fallback response:",t);else throw new Error("Invalid chat response format from Ollama")}else if(r==="generate"){if(!t||typeof t.response!="string")if(console.error("Unexpected generate response structure from Ollama:",t),t&&typeof t=="object")t={response:t.response||t.content||t.text||((a=t.message)==null?void 0:a.content)||""||"No response found in result",model:t.model||"unknown"},console.log("Constructed fallback generate response:",t);else throw new Error("Invalid generate response format from Ollama")}else if(r==="embeddings"){if(!t||!t.embedding||!Array.isArray(t.embedding))throw console.error("Unexpected embeddings response structure from Ollama:",t),new Error("Invalid embeddings response format from Ollama")}else if(!t)throw console.error("Empty response from Ollama for endpoint ".concat(r,":"),t),new Error("Invalid response format from Ollama for ".concat(r));return{success:!0,data:t}}catch(s){console.error("Ollama API call failed (".concat(r,"):"),s);let n="Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal.";return s.name==="AbortError"?n+=" The request timed out - your model might be too large or your computer too slow.":s.message.includes("Failed to fetch")?n+=" Your computer cannot connect to Ollama. Make sure it's running and not blocked by a firewall.":(s.message.includes("Invalid response format")||s.message.includes("JSON"))&&(n+=" Ollama returned an unexpected response format. You might need to update Ollama to a newer version."),{success:!1,error:s.message,details:s.stack,troubleshooting:n}}}async function L(r,o){try{if(!p){console.log("Database not available, using local storage fallback");let s=r.userData;if(!s||!s.username||!s.email||!s.password)throw new Error("Missing required user data (username, email, password)");let n=await chrome.storage.local.get(["users"])||{users:{}};if(n.users&&n.users[s.email])throw new Error("User with this email already exists");let l={id:"local_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),username:s.username,email:s.email,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),last_login:null,is_active:!0},c=n.users||{};c[s.email]=h(f({},l),{password_hash:"local_"+s.password}),await chrome.storage.local.set({users:c}),d=l,await chrome.storage.local.set({currentUser:l,isLoggedIn:!0,userId:l.id}),console.log("User registered successfully (local):",l.id),o({success:!0,user:l});return}let e=await fetch("".concat(m,"/users/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r.userData)}),a=await e.json();if(!e.ok)throw new Error(a.error||"Registration failed");d=a.user,await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User registered successfully (database):",a.user.id),o({success:!0,user:a.user})}catch(e){console.error("Error registering user:",e),o({success:!1,error:e.message})}}async function j(r,o){try{if(!p){console.log("Database not available, using local storage fallback");let{email:s,password:n}=r;if(!s||!n)throw new Error("Email and password are required");let c=(await chrome.storage.local.get(["users"])).users||{},t=c[s];if(!t)throw new Error("Invalid email or password");if(t.password_hash!=="local_"+n)throw new Error("Invalid email or password");let i={id:t.id,username:t.username,email:t.email,created_at:t.created_at,updated_at:new Date().toISOString(),last_login:new Date().toISOString(),is_active:t.is_active};c[s]=h(f({},t),{last_login:i.last_login}),await chrome.storage.local.set({users:c}),d=i,await chrome.storage.local.set({currentUser:i,isLoggedIn:!0,userId:i.id}),console.log("User logged in successfully (local):",i.id),o({success:!0,user:i});return}let e=await fetch("".concat(m,"/users/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:r.email,password:r.password})}),a=await e.json();if(!e.ok)throw new Error(a.error||"Login failed");d=a.user,await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User logged in successfully (database):",a.user.id),o({success:!0,user:a.user})}catch(e){console.error("Error logging in user:",e),o({success:!1,error:e.message})}}async function x(r,o){try{console.log("User logout"),d=null,y=null,await chrome.storage.local.remove(["currentUser","isLoggedIn","userId"]),console.log("User logged out successfully"),o({success:!0})}catch(e){console.error("Error logging out user:",e),o({success:!1,error:e.message})}}async function C(r,o){try{if(!p){let{userId:n}=r;if(!n)throw new Error("User ID is required");let l=await chrome.storage.local.get(["currentUser"]);if(!l.currentUser||l.currentUser.id!==n)throw new Error("User not found");let c={profile:l.currentUser,stats:{total_applications:"0",pending_applications:"0",interviews:"0",offers:"0",companies_applied_to:"0",questions_answered:"0"},resumes:[],aiSettings:[]};o({success:!0,profile:c});return}let{userId:e}=r;if(!e)throw new Error("User ID is required");let a=await fetch("".concat(m,"/users/").concat(e,"/profile"),{method:"GET",headers:{"Content-Type":"application/json"}}),s=await a.json();if(!a.ok)throw new Error(s.error||"Failed to get user profile");o({success:!0,profile:s.profile})}catch(e){console.error("Error getting user profile:",e),o({success:!1,error:e.message})}}async function N(r,o){try{if(!p){let{userId:l,updateData:c}=r;if(!l||!c)throw new Error("User ID and update data are required");let t=await chrome.storage.local.get(["currentUser"]);if(!t.currentUser||t.currentUser.id!==l)throw new Error("User not found");let i=h(f(f({},t.currentUser),c),{updated_at:new Date().toISOString()});d=i,await chrome.storage.local.set({currentUser:i}),o({success:!0,user:i});return}let{userId:e,updateData:a}=r;if(!e||!a)throw new Error("User ID and update data are required");let s=await fetch("".concat(m,"/users/").concat(e),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),n=await s.json();if(!s.ok)throw new Error(n.error||"Failed to update user profile");d&&d.id===e&&(d=n.user,await chrome.storage.local.set({currentUser:n.user})),o({success:!0,user:n.user})}catch(e){console.error("Error updating user profile:",e),o({success:!1,error:e.message})}}async function J(r,o){try{if(d){o({success:!0,user:d,isLoggedIn:!0});return}let e=await chrome.storage.local.get(["currentUser","isLoggedIn"]);e.currentUser&&e.isLoggedIn?(d=e.currentUser,o({success:!0,user:e.currentUser,isLoggedIn:!0})):o({success:!0,user:null,isLoggedIn:!1})}catch(e){console.error("Error getting current user:",e),o({success:!1,error:e.message})}}async function M(r,o){try{let{method:e,url:a,data:s}=r;if(!p){o({success:!1,error:"Database not available"});return}let n="".concat(m).concat(a),l={method:e,headers:{"Content-Type":"application/json"}};s&&(e==="POST"||e==="PUT")&&(l.body=JSON.stringify(s));let c=await fetch(n,l),t=await c.json();if(!c.ok){o({success:!1,error:t.error||"API request failed"});return}o(f({success:!0},t))}catch(e){console.error("API request error:",e),o({success:!1,error:e.message})}}async function F(r,o){try{let{userId:e,fileData:a,formData:s}=r;if(!p){o({success:!1,error:"Database not available"});return}if(!a||!a.buffer){o({success:!1,error:"No file data provided"});return}console.log("Upload debug - fileData.buffer type:",typeof a.buffer),console.log("Upload debug - fileData.buffer length:",a.buffer.length),console.log("Upload debug - first 10 bytes:",a.buffer.slice(0,10));let n=new FormData,l=new Uint8Array(a.buffer);console.log("Upload debug - uint8Array:",l.slice(0,10));let c=new Blob([l],{type:a.type});console.log("Upload debug - blob size:",c.size),console.log("Upload debug - blob type:",c.type);let t=new File([c],a.name,{type:a.type,lastModified:a.lastModified});console.log("Upload debug - file size:",t.size),console.log("Upload debug - file type:",t.type),n.append("resume",t),n.append("name",s.name||""),n.append("short_description",s.short_description||""),n.append("is_default",s.is_default||!1);let i=await fetch("".concat(m,"/users/").concat(e,"/resumes/upload"),{method:"POST",body:n}),u=await i.json();if(!i.ok){o({success:!1,error:u.error||"Upload failed"});return}o(f({success:!0},u))}catch(e){console.error("Resume upload error:",e),o({success:!1,error:e.message})}}async function B(r,o){try{let{resumeId:e,fileName:a}=r;if(!p){o({success:!1,error:"Database not available"});return}let s=await fetch("".concat(m,"/resumes/").concat(e));if(!s.ok){let w=await s.json();o({success:!1,error:w.error||"Resume not found"});return}let l=(await s.json()).resume,c="".concat(l.name,".").concat(l.extension),t=await fetch("".concat(m,"/resumes/").concat(e,"/download"));if(!t.ok){let w=await t.json();o({success:!1,error:w.error||"Download failed"});return}let i=await t.blob(),u=new FileReader;u.onloadend=()=>{let w=u.result;chrome.downloads.download({url:w,filename:c},O=>{chrome.runtime.lastError?o({success:!1,error:chrome.runtime.lastError.message}):o({success:!0,downloadId:O})})},u.onerror=()=>{o({success:!1,error:"Failed to read file data"})},u.readAsDataURL(i)}catch(e){console.error("Resume download error:",e),o({success:!1,error:e.message})}}
