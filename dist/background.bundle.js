var x=Object.defineProperty,T=Object.defineProperties;var B=Object.getOwnPropertyDescriptors;var _=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,$=Object.prototype.propertyIsEnumerable;var D=(g,e,r)=>e in g?x(g,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):g[e]=r,d=(g,e)=>{for(var r in e||(e={}))v.call(e,r)&&D(g,r,e[r]);if(_)for(var r of _(e))$.call(e,r)&&D(g,r,e[r]);return g},p=(g,e)=>T(g,B(e));var f=class{constructor(e){this.backgroundManager=e}async handleMessage(e,r){let{action:t}=e;switch(t){case"startAutoApply":await this.handleStartAutoApply(e,r);break;case"stopAutoApply":await this.handleStopAutoApply(e,r);break;case"getAutoApplyState":await this.handleGetAutoApplyState(e,r);break;default:r({success:!1,error:"Unknown auto-apply action"})}}async handleStartAutoApply(e,r){try{if(console.log("Starting auto apply with data:",e),!e.loginData||!e.loginData.username)throw new Error("Login data required");if(!e.aiSettings||!e.aiSettings.provider||!e.aiSettings.model)throw new Error("AI settings required");this.backgroundManager.setAutoApplyState({isRunning:!0,userData:e.loginData,aiSettings:e.aiSettings}),await this.backgroundManager.getManager("ai").testAiConnection(e.aiSettings);let a=await chrome.tabs.query({active:!0,currentWindow:!0});if(a.length>0){let o=a[0].id;if(!a[0].url.includes("linkedin.com"))throw new Error("Please navigate to LinkedIn jobs page first");chrome.tabs.sendMessage(o,{action:"startAutoApply",userData:e.loginData,aiSettings:e.aiSettings},n=>{chrome.runtime.lastError?(console.error("Error sending message to content script:",chrome.runtime.lastError),r({success:!1,error:"Failed to communicate with LinkedIn page. Please refresh the page and try again."})):(console.log("Content script response:",n),r({success:!0,message:"Auto apply started successfully"}))})}else throw new Error("No active tab found")}catch(t){console.error("Error starting auto apply:",t),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!1,error:t.message})}}async handleStopAutoApply(e,r){try{console.log("Stopping auto apply");let t=await chrome.tabs.query({active:!0,currentWindow:!0});if(t.length>0){let a=t[0].id;chrome.tabs.sendMessage(a,{action:"stopAutoApply"},o=>{chrome.runtime.lastError?(console.error("Error sending stop message to content script:",chrome.runtime.lastError),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (content script communication error)"})):o&&o.success?(console.log("Auto apply stopped successfully"),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped"})):(console.error("Content script failed to stop auto apply:",o==null?void 0:o.error),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (with content script error)"}))})}else this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (no active tab)"})}catch(t){console.error("Error stopping auto apply:",t),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!1,error:t.message})}}async handleGetAutoApplyState(e,r){let t=this.backgroundManager.getAutoApplyState();r({success:!0,isRunning:t.isRunning})}},A=f;var w=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"registerUser":await this.handleUserRegistration(e,r);break;case"loginUser":await this.handleUserLogin(e,r);break;case"logoutUser":await this.handleUserLogout(e,r);break;case"getUserProfile":await this.handleGetUserProfile(e,r);break;case"updateUserProfile":await this.handleUpdateUserProfile(e,r);break;case"getCurrentUser":await this.handleGetCurrentUser(e,r);break;default:r({success:!1,error:"Unknown user action"})}}async handleUserRegistration(e,r){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let o=e.userData;if(!o||!o.username||!o.email||!o.password)throw new Error("Missing required user data (username, email, password)");let n=await chrome.storage.local.get(["users"])||{users:{}};if(n.users&&n.users[o.email])throw new Error("User with this email already exists");let l={id:"local_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),username:o.username,email:o.email,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),last_login:null,is_active:!0},i=n.users||{};i[o.email]=p(d({},l),{password_hash:"local_"+o.password}),await chrome.storage.local.set({users:i}),this.backgroundManager.setAutoApplyState({user:l}),await chrome.storage.local.set({currentUser:l,isLoggedIn:!0,userId:l.id}),console.log("User registered successfully (local):",l.id),r({success:!0,user:l});return}let t=await fetch("".concat(this.API_BASE_URL,"/users/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.userData)}),a=await t.json();if(!t.ok)throw new Error(a.error||"Registration failed");this.backgroundManager.setAutoApplyState({user:a.user}),await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User registered successfully (database):",a.user.id),r({success:!0,user:a.user})}catch(t){console.error("Error registering user:",t),r({success:!1,error:t.message})}}async handleUserLogin(e,r){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let{email:o,password:n}=e;if(!o||!n)throw new Error("Email and password are required");let i=(await chrome.storage.local.get(["users"])).users||{},s=i[o];if(!s)throw new Error("Invalid email or password");if(s.password_hash!=="local_"+n)throw new Error("Invalid email or password");let c={id:s.id,username:s.username,email:s.email,created_at:s.created_at,updated_at:new Date().toISOString(),last_login:new Date().toISOString(),is_active:s.is_active};i[o]=p(d({},s),{last_login:c.last_login}),await chrome.storage.local.set({users:i}),this.backgroundManager.setAutoApplyState({user:c}),await chrome.storage.local.set({currentUser:c,isLoggedIn:!0,userId:c.id}),console.log("User logged in successfully (local):",c.id),r({success:!0,user:c});return}let t=await fetch("".concat(this.API_BASE_URL,"/users/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}),a=await t.json();if(!t.ok)throw new Error(a.error||"Login failed");this.backgroundManager.setAutoApplyState({user:a.user}),await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User logged in successfully (database):",a.user.id),r({success:!0,user:a.user})}catch(t){console.error("Error logging in user:",t),r({success:!1,error:t.message})}}async handleUserLogout(e,r){try{console.log("User logout"),this.backgroundManager.setAutoApplyState({user:null}),await chrome.storage.local.remove(["currentUser","isLoggedIn","userId"]),console.log("User logged out successfully"),r({success:!0})}catch(t){console.error("Error logging out user:",t),r({success:!1,error:t.message})}}async handleGetUserProfile(e,r){try{if(!this.DATABASE_AVAILABLE){let{userId:n}=e;if(!n)throw new Error("User ID is required");let l=await chrome.storage.local.get(["currentUser"]);if(!l.currentUser||l.currentUser.id!==n)throw new Error("User not found");let i={profile:l.currentUser,stats:{total_applications:"0",pending_applications:"0",interviews:"0",offers:"0",companies_applied_to:"0",questions_answered:"0"},resumes:[],aiSettings:[]};r({success:!0,profile:i});return}let{userId:t}=e;if(!t)throw new Error("User ID is required");let a=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t,"/profile"),{method:"GET",headers:{"Content-Type":"application/json"}}),o=await a.json();if(!a.ok)throw new Error(o.error||"Failed to get user profile");r({success:!0,profile:o.profile})}catch(t){console.error("Error getting user profile:",t),r({success:!1,error:t.message})}}async handleUpdateUserProfile(e,r){try{if(!this.DATABASE_AVAILABLE){let{userId:i,updateData:s}=e;if(!i||!s)throw new Error("User ID and update data are required");let c=await chrome.storage.local.get(["currentUser"]);if(!c.currentUser||c.currentUser.id!==i)throw new Error("User not found");let u=p(d(d({},c.currentUser),s),{updated_at:new Date().toISOString()});this.backgroundManager.setAutoApplyState({user:u}),await chrome.storage.local.set({currentUser:u}),r({success:!0,user:u});return}let{userId:t,updateData:a}=e;if(!t||!a)throw new Error("User ID and update data are required");let o=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),n=await o.json();if(!o.ok)throw new Error(n.error||"Failed to update user profile");let l=this.backgroundManager.getAutoApplyState();l.user&&l.user.id===t&&(this.backgroundManager.setAutoApplyState({user:n.user}),await chrome.storage.local.set({currentUser:n.user})),r({success:!0,user:n.user})}catch(t){console.error("Error updating user profile:",t),r({success:!1,error:t.message})}}async handleGetCurrentUser(e,r){try{let t=this.backgroundManager.getAutoApplyState();if(t.user){r({success:!0,user:t.user,isLoggedIn:!0});return}let a=await chrome.storage.local.get(["currentUser","isLoggedIn"]);a.currentUser&&a.isLoggedIn?(this.backgroundManager.setAutoApplyState({user:a.currentUser}),r({success:!0,user:a.currentUser,isLoggedIn:!0})):r({success:!0,user:null,isLoggedIn:!1})}catch(t){console.error("Error getting current user:",t),r({success:!1,error:t.message})}}},y=w;var b=class{constructor(e){this.backgroundManager=e}async handleMessage(e,r){let{action:t}=e;switch(t){case"callOllama":await this.handleCallOllama(e,r);break;case"testOllama":case"testOllamaConnection":await this.handleTestOllama(e,r);break;default:r({success:!1,error:"Unknown AI action"})}}async handleCallOllama(e,r){try{let t=e.endpoint||"generate",a=e.data||{},o=await this.callOllamaAPI(t,a);r(o)}catch(t){r({success:!1,error:t.message})}}async handleTestOllama(e,r){try{let t=await this.testOllamaConnection();r(t)}catch(t){r({success:!1,error:t.message})}}async testAiConnection(e){if(console.log("Testing AI connection:",e),e.provider==="ollama"){let r=await this.testOllamaConnection();if(!r.success)throw new Error("Ollama connection failed: ".concat(r.error));console.log("Ollama connection successful")}else{if(!e.apiKey)throw new Error("API key required for ".concat(e.provider));console.log("AI settings validated for ".concat(e.provider))}}async testOllamaConnection(){try{console.log("Testing Ollama connection...");let e={model:"qwen2.5:3b",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],stream:!1},r=await this.callOllamaAPI("chat",e);if(r.success)return console.log("Ollama chat test successful:",r.data),{success:!0,data:{version:r.data.model,response:r.data.message.content,port:11434}};throw new Error(r.error||"Unknown error from Ollama")}catch(e){return console.error("Ollama connection failed:",e),{success:!1,error:e.message,details:e.stack,troubleshooting:"Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal."}}}async callOllamaAPI(e,r){var t,a;try{console.log("Making Ollama API call to ".concat(e,":"),r);let o=11434;console.log("Using Ollama port: ".concat(o));let n=p(d({},r),{stream:!1}),l=await fetch("http://localhost:".concat(o,"/api/").concat(e),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(n)});if(!l.ok){let c=await l.text();throw console.error("Ollama API error response:",{status:l.status,statusText:l.statusText,body:c}),new Error("HTTP error! status: ".concat(l.status,", details: ").concat(c))}let i=await l.text(),s;try{s=JSON.parse(i)}catch(c){console.warn("JSON parse error:",c.message),console.log("Response text:",i.substring(0,200)+"...");try{let u=i.match(/\{[\s\S]*\}/);if(u)s=JSON.parse(u[0]),console.log("Successfully extracted JSON from response");else throw new Error("Couldn't find valid JSON object in response")}catch(u){throw console.error("Failed to extract JSON:",u),new Error("Invalid JSON response from Ollama: ".concat(c.message))}}if(console.log("Ollama API call successful:",s),e==="chat"){if(!s||!s.message||!s.message.content)if(console.error("Unexpected chat response structure from Ollama:",s),s&&typeof s=="object")s={message:{content:((t=s.message)==null?void 0:t.content)||s.content||s.text||s.response||""||"No content found in response"},model:s.model||"unknown"},console.log("Constructed fallback response:",s);else throw new Error("Invalid chat response format from Ollama")}else if(e==="generate"){if(!s||typeof s.response!="string")if(console.error("Unexpected generate response structure from Ollama:",s),s&&typeof s=="object")s={response:s.response||s.content||s.text||((a=s.message)==null?void 0:a.content)||""||"No response found in result",model:s.model||"unknown"},console.log("Constructed fallback generate response:",s);else throw new Error("Invalid generate response format from Ollama")}else if(e==="embeddings"){if(!s||!s.embedding||!Array.isArray(s.embedding))throw console.error("Unexpected embeddings response structure from Ollama:",s),new Error("Invalid embeddings response format from Ollama")}else if(!s)throw console.error("Empty response from Ollama for endpoint ".concat(e,":"),s),new Error("Invalid response format from Ollama for ".concat(e));return{success:!0,data:s}}catch(o){console.error("Ollama API call failed (".concat(e,"):"),o);let n="Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal.";return o.name==="AbortError"?n+=" The request timed out - your model might be too large or your computer too slow.":o.message.includes("Failed to fetch")?n+=" Your computer cannot connect to Ollama. Make sure it's running and not blocked by a firewall.":(o.message.includes("Invalid response format")||o.message.includes("JSON"))&&(n+=" Ollama returned an unexpected response format. You might need to update Ollama to a newer version."),{success:!1,error:o.message,details:o.stack,troubleshooting:n}}}},U=b;var S=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"uploadResume":await this.handleResumeUpload(e,r);break;case"downloadResume":await this.handleResumeDownload(e,r);break;default:r({success:!1,error:"Unknown resume action"})}}async handleResumeUpload(e,r){try{let{userId:t,fileData:a,formData:o}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}if(!a||!a.buffer){r({success:!1,error:"No file data provided"});return}console.log("Upload debug - fileData.buffer type:",typeof a.buffer),console.log("Upload debug - fileData.buffer length:",a.buffer.length),console.log("Upload debug - first 10 bytes:",a.buffer.slice(0,10));let n=new FormData,l=new Uint8Array(a.buffer);console.log("Upload debug - uint8Array:",l.slice(0,10));let i=new Blob([l],{type:a.type});console.log("Upload debug - blob size:",i.size),console.log("Upload debug - blob type:",i.type);let s=new File([i],a.name,{type:a.type,lastModified:a.lastModified});console.log("Upload debug - file size:",s.size),console.log("Upload debug - file type:",s.type),n.append("resume",s),n.append("name",o.name||""),n.append("short_description",o.short_description||""),n.append("is_default",o.is_default||!1);let c=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t,"/resumes/upload"),{method:"POST",body:n}),u=await c.json();if(!c.ok){r({success:!1,error:u.error||"Upload failed"});return}r(d({success:!0},u))}catch(t){console.error("Resume upload error:",t),r({success:!1,error:t.message})}}async handleResumeDownload(e,r){try{let{resumeId:t,fileName:a}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}let o=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(t));if(!o.ok){let m=await o.json();r({success:!1,error:m.error||"Resume not found"});return}let l=(await o.json()).resume,i="".concat(l.name,".").concat(l.extension),s=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(t,"/download"));if(!s.ok){let m=await s.json();r({success:!1,error:m.error||"Download failed"});return}let c=await s.blob(),u=new FileReader;u.onloadend=()=>{let m=u.result;chrome.downloads.download({url:m,filename:i},P=>{chrome.runtime.lastError?r({success:!1,error:chrome.runtime.lastError.message}):r({success:!0,downloadId:P})})},u.onerror=()=>{r({success:!1,error:"Failed to read file data"})},u.readAsDataURL(c)}catch(t){console.error("Resume download error:",t),r({success:!1,error:t.message})}}},E=S;var I=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"apiRequest":await this.handleApiRequest(e,r);break;default:r({success:!1,error:"Unknown API action"})}}async handleApiRequest(e,r){try{let{method:t,url:a,data:o}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}let n="".concat(this.API_BASE_URL).concat(a),l={method:t,headers:{"Content-Type":"application/json"}};o&&(t==="POST"||t==="PUT")&&(l.body=JSON.stringify(o));let i=await fetch(n,l),s=await i.json();if(!i.ok){r({success:!1,error:s.error||"API request failed"});return}r(d({success:!0},s))}catch(t){console.error("API request error:",t),r({success:!1,error:t.message})}}},k=I;var M=class{constructor(){this.isAutoApplyRunning=!1,this.currentUserData=null,this.currentAiSettings=null,this.currentUser=null,this.managers=new Map,this.initializeManagers(),this.setupMessageListener()}initializeManagers(){this.managers.set("autoApply",new A(this)),this.managers.set("user",new y(this)),this.managers.set("ai",new U(this)),this.managers.set("resume",new E(this)),this.managers.set("api",new k(this))}setupMessageListener(){chrome.runtime.onMessage.addListener((e,r,t)=>(console.log("Background received message:",e),this.handleMessage(e,r,t),!0))}async handleMessage(e,r,t){try{let{action:a}=e;a.startsWith("startAutoApply")||a.startsWith("stopAutoApply")||a==="getAutoApplyState"?await this.managers.get("autoApply").handleMessage(e,t):a.startsWith("registerUser")||a.startsWith("loginUser")||a.startsWith("logoutUser")||a.startsWith("getUserProfile")||a.startsWith("updateUserProfile")||a==="getCurrentUser"?await this.managers.get("user").handleMessage(e,t):a.startsWith("callOllama")||a.startsWith("testOllama")?await this.managers.get("ai").handleMessage(e,t):a.startsWith("uploadResume")||a.startsWith("downloadResume")?await this.managers.get("resume").handleMessage(e,t):a==="apiRequest"?await this.managers.get("api").handleMessage(e,t):t({success:!1,error:"Unknown action"})}catch(a){console.error("Error handling message:",a),t({success:!1,error:a.message})}}getManager(e){return this.managers.get(e)}getAutoApplyState(){return{isRunning:this.isAutoApplyRunning,userData:this.currentUserData,aiSettings:this.currentAiSettings,user:this.currentUser}}setAutoApplyState(e){this.isAutoApplyRunning=e.isRunning||!1,this.currentUserData=e.userData||null,this.currentAiSettings=e.aiSettings||null,this.currentUser=e.user||null}},O=M;var h=new O,ee=h.getManager("autoApply"),re=h.getManager("user"),te=h.getManager("ai"),ae=h.getManager("resume"),se=h.getManager("api"),L=h;console.log("Background script loaded - Using manager system");chrome.runtime.onInstalled.addListener(()=>{console.log("Job Tracker Extension Installed"),console.log("Background managers initialized:",Object.keys(L.managers))});
