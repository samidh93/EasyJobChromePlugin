var C=Object.defineProperty,N=Object.defineProperties;var J=Object.getOwnPropertyDescriptors;var x=Object.getOwnPropertySymbols;var z=Object.prototype.hasOwnProperty,W=Object.prototype.propertyIsEnumerable;var j=(p,e,t)=>e in p?C(p,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[e]=t,A=(p,e)=>{for(var t in e||(e={}))z.call(e,t)&&j(p,t,e[t]);if(x)for(var t of x(e))W.call(e,t)&&j(p,t,e[t]);return p},b=(p,e)=>N(p,J(e));var k=class{constructor(e){this.backgroundManager=e}async handleMessage(e,t){let{action:r}=e;switch(r){case"startAutoApply":await this.handleStartAutoApply(e,t);break;case"stopAutoApply":await this.handleStopAutoApply(e,t);break;case"getAutoApplyState":await this.handleGetAutoApplyState(e,t);break;default:t({success:!1,error:"Unknown auto-apply action"})}}async handleStartAutoApply(e,t){try{if(console.log("Starting auto apply with data:",e),!e.loginData||!e.loginData.username)throw new Error("Login data required");if(!e.aiSettings||!e.aiSettings.provider||!e.aiSettings.model)throw new Error("AI settings are required for auto-apply. Please configure AI settings first.");this.backgroundManager.setAutoApplyState({isRunning:!0,userData:e.loginData,aiSettings:e.aiSettings}),await this.backgroundManager.getManager("ai").testAiConnection(e.aiSettings),console.log("AI connection verified - auto-apply ready");let s=await chrome.tabs.query({active:!0,currentWindow:!0});if(s.length===0)throw new Error("No active tab found");let o=s[0],n=o.id,i=u=>{let h=u.toLowerCase();return/linkedin\.com/i.test(h)||/linkedin\.[a-z]{2,3}/i.test(h)?"linkedin":/indeed\.com/i.test(h)||/indeed\.[a-z]{2,3}/i.test(h)||/indeed\.[a-z]{2,3}\.[a-z]{2,3}/i.test(h)?"indeed":/stepstone\.de/i.test(h)||/stepstone\.com/i.test(h)||/stepstone\.[a-z]{2,3}/i.test(h)?"stepstone":"unknown"},l=(u,h)=>{let f=u.toLowerCase();switch(h){case"linkedin":return f.includes("/jobs/")||f.includes("/job/");case"indeed":return f.includes("/jobs")||f.includes("/viewjob")||f.includes("q=")||f.includes("/job/");case"stepstone":return f.includes("/jobs")||f.includes("/job/")||f.includes("/stellenangebote")||f.includes("/stellenanzeige");default:return!1}},a=i(o.url),d=["linkedin","indeed","stepstone"].includes(a),m=l(o.url,a);if(!d)throw new Error("Please navigate to a supported job platform (LinkedIn, Indeed, or StepStone)");if(!m){let u={linkedin:"LinkedIn",indeed:"Indeed",stepstone:"StepStone"};throw new Error("Please navigate to a ".concat(u[a]," job search page to start auto-apply"))}let w={linkedin:"LinkedIn",indeed:"Indeed",stepstone:"StepStone"};console.log("Target tab:",{id:n,url:o.url,platform:w[a]||a,isJobSearchPage:m}),console.log("Using auto-injected content script from manifest"),await new Promise(u=>setTimeout(u,500));let y=null,g=null;for(let u=1;u<=3;u++)try{console.log("Attempt ".concat(u," to send message to content script...")),y=await new Promise((h,f)=>{chrome.tabs.sendMessage(n,{action:"startAutoApply",userData:e.loginData,aiSettings:e.aiSettings},$=>{chrome.runtime.lastError?f(new Error(chrome.runtime.lastError.message)):h($)})}),console.log("Message sent successfully on attempt ".concat(u));break}catch(h){g=h,console.warn("Attempt ".concat(u," failed:"),h.message),u<3&&await new Promise(f=>setTimeout(f,1e3*u))}if(!y)throw new Error("Failed to communicate with content script after 3 attempts. Last error: ".concat((g==null?void 0:g.message)||"Unknown error",". Please refresh the page and try again."));console.log("Content script response:",y),t({success:!0,message:"Auto apply started successfully"})}catch(r){console.error("Error starting auto apply:",r),this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!1,error:r.message})}}async handleStopAutoApply(e,t){try{console.log("Stopping auto apply");let r=await chrome.tabs.query({active:!0,currentWindow:!0});if(r.length>0){let s=r[0].id;chrome.tabs.sendMessage(s,{action:"stopAutoApply"},o=>{chrome.runtime.lastError?(console.error("Error sending stop message to content script:",chrome.runtime.lastError),this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!0,message:"Auto apply stopped (content script communication error)"})):o&&o.success?(console.log("Auto apply stopped successfully"),this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!0,message:"Auto apply stopped"})):(console.error("Content script failed to stop auto apply:",o==null?void 0:o.error),this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!0,message:"Auto apply stopped (with content script error)"}))})}else this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!0,message:"Auto apply stopped (no active tab)"})}catch(r){console.error("Error stopping auto apply:",r),this.backgroundManager.setAutoApplyState({isRunning:!1}),t({success:!1,error:r.message})}}async handleGetAutoApplyState(e,t){let r=this.backgroundManager.getAutoApplyState();t({success:!0,isRunning:r.isRunning})}},S=k;var U=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,t){let{action:r}=e;switch(r){case"registerUser":await this.handleUserRegistration(e,t);break;case"loginUser":await this.handleUserLogin(e,t);break;case"logoutUser":await this.handleUserLogout(e,t);break;case"getUserProfile":await this.handleGetUserProfile(e,t);break;case"updateUserProfile":await this.handleUpdateUserProfile(e,t);break;case"getCurrentUser":await this.handleGetCurrentUser(e,t);break;default:t({success:!1,error:"Unknown user action"})}}async handleUserRegistration(e,t){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let o=e.userData;if(!o||!o.username||!o.email||!o.password)throw new Error("Missing required user data (username, email, password)");let n=await chrome.storage.local.get(["users"])||{users:{}};if(n.users&&n.users[o.email])throw new Error("User with this email already exists");let i={id:"local_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),username:o.username,email:o.email,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),last_login:null,is_active:!0},l=n.users||{};l[o.email]=b(A({},i),{password_hash:"local_"+o.password}),await chrome.storage.local.set({users:l}),this.backgroundManager.setAutoApplyState({user:i}),await chrome.storage.local.set({currentUser:i,isLoggedIn:!0,userId:i.id}),console.log("User registered successfully (local):",i.id),t({success:!0,user:i});return}let r=await fetch("".concat(this.API_BASE_URL,"/users/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.userData)}),s=await r.json();if(!r.ok)throw new Error(s.error||"Registration failed");this.backgroundManager.setAutoApplyState({user:s.user}),await chrome.storage.local.set({currentUser:s.user,isLoggedIn:!0,userId:s.user.id}),console.log("User registered successfully (database):",s.user.id),t({success:!0,user:s.user})}catch(r){console.error("Error registering user:",r),t({success:!1,error:r.message})}}async handleUserLogin(e,t){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let{email:o,password:n}=e;if(!o||!n)throw new Error("Email and password are required");let l=(await chrome.storage.local.get(["users"])).users||{},a=l[o];if(!a)throw new Error("Invalid email or password");if(a.password_hash!=="local_"+n)throw new Error("Invalid email or password");let c={id:a.id,username:a.username,email:a.email,created_at:a.created_at,updated_at:new Date().toISOString(),last_login:new Date().toISOString(),is_active:a.is_active};l[o]=b(A({},a),{last_login:c.last_login}),await chrome.storage.local.set({users:l}),this.backgroundManager.setAutoApplyState({user:c}),await chrome.storage.local.set({currentUser:c,isLoggedIn:!0,userId:c.id}),console.log("User logged in successfully (local):",c.id),t({success:!0,user:c});return}let r=await fetch("".concat(this.API_BASE_URL,"/users/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}),s=await r.json();if(!r.ok)throw new Error(s.error||"Login failed");this.backgroundManager.setAutoApplyState({user:s.user}),await chrome.storage.local.set({currentUser:s.user,isLoggedIn:!0,userId:s.user.id}),console.log("User logged in successfully (database):",s.user.id),t({success:!0,user:s.user})}catch(r){console.error("Error logging in user:",r),t({success:!1,error:r.message})}}async handleUserLogout(e,t){try{console.log("User logout"),this.backgroundManager.setAutoApplyState({user:null}),await chrome.storage.local.remove(["currentUser","isLoggedIn","userId"]),console.log("User logged out successfully"),t({success:!0})}catch(r){console.error("Error logging out user:",r),t({success:!1,error:r.message})}}async handleGetUserProfile(e,t){try{if(!this.DATABASE_AVAILABLE){let{userId:n}=e;if(!n)throw new Error("User ID is required");let i=await chrome.storage.local.get(["currentUser"]);if(!i.currentUser||i.currentUser.id!==n)throw new Error("User not found");let l={profile:i.currentUser,stats:{total_applications:"0",pending_applications:"0",interviews:"0",offers:"0",companies_applied_to:"0",questions_answered:"0"},resumes:[],aiSettings:[]};t({success:!0,profile:l});return}let{userId:r}=e;if(!r)throw new Error("User ID is required");let s=await fetch("".concat(this.API_BASE_URL,"/users/").concat(r,"/profile"),{method:"GET",headers:{"Content-Type":"application/json"}}),o=await s.json();if(!s.ok)throw new Error(o.error||"Failed to get user profile");t({success:!0,profile:o.profile})}catch(r){console.error("Error getting user profile:",r),t({success:!1,error:r.message})}}async handleUpdateUserProfile(e,t){try{if(!this.DATABASE_AVAILABLE){let{userId:l,updateData:a}=e;if(!l||!a)throw new Error("User ID and update data are required");let c=await chrome.storage.local.get(["currentUser"]);if(!c.currentUser||c.currentUser.id!==l)throw new Error("User not found");let d=b(A(A({},c.currentUser),a),{updated_at:new Date().toISOString()});this.backgroundManager.setAutoApplyState({user:d}),await chrome.storage.local.set({currentUser:d}),t({success:!0,user:d});return}let{userId:r,updateData:s}=e;if(!r||!s)throw new Error("User ID and update data are required");let o=await fetch("".concat(this.API_BASE_URL,"/users/").concat(r),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),n=await o.json();if(!o.ok)throw new Error(n.error||"Failed to update user profile");let i=this.backgroundManager.getAutoApplyState();i.user&&i.user.id===r&&(this.backgroundManager.setAutoApplyState({user:n.user}),await chrome.storage.local.set({currentUser:n.user})),t({success:!0,user:n.user})}catch(r){console.error("Error updating user profile:",r),t({success:!1,error:r.message})}}async handleGetCurrentUser(e,t){try{let r=this.backgroundManager.getAutoApplyState();if(r.user){t({success:!0,user:r.user,isLoggedIn:!0});return}let s=await chrome.storage.local.get(["currentUser","isLoggedIn"]);s.currentUser&&s.isLoggedIn?(this.backgroundManager.setAutoApplyState({user:s.currentUser}),t({success:!0,user:s.currentUser,isLoggedIn:!0})):t({success:!0,user:null,isLoggedIn:!1})}catch(r){console.error("Error getting current user:",r),t({success:!1,error:r.message})}}},O=U;var E=class{constructor(e){this.backgroundManager=e,this.OLLAMA_BASE_URL="http://localhost:11434"}async handleMessage(e,t){let{action:r}=e;switch(r){case"callOllama":await this.handleCallOllama(e,t);break;case"testOllama":case"testOllamaConnection":await this.handleTestOllama(e,t);break;case"ollamaRequest":await this.handleOllamaRequest(e,t);break;case"callOpenAI":await this.handleCallOpenAI(e,t);break;case"testOpenAI":await this.handleTestOpenAI(e,t);break;default:t({success:!1,error:"Unknown AI action"})}}async handleOllamaRequest(e,t){try{let{method:r,url:s,data:o}=e,n="".concat(this.OLLAMA_BASE_URL).concat(s),i={method:r||"GET",headers:{"Content-Type":"application/json"}};o&&(r==="POST"||r==="PUT")&&(i.body=JSON.stringify(o));let l=await fetch(n,i);if(!l.ok){t({success:!1,error:"Ollama request failed: ".concat(l.status," ").concat(l.statusText)});return}let a=await l.json();t(A({success:!0},a))}catch(r){console.error("Ollama request error:",r),t({success:!1,error:"Error connecting to Ollama. Make sure it's running on localhost:11434."})}}async handleCallOllama(e,t){try{let r=e.endpoint||"generate",s=e.data||{},o=await this.callOllamaAPI(r,s);t(o)}catch(r){t({success:!1,error:r.message})}}async handleTestOllama(e,t){try{let r=await this.testOllamaConnection();t(r)}catch(r){t({success:!1,error:r.message})}}async testAiConnection(e){if(console.log("Testing AI connection:",e),!e)throw new Error("No AI settings provided");if(e.provider==="ollama"){let t=await this.testOllamaConnection();if(!t.success)throw new Error("Ollama connection failed: ".concat(t.error));console.log("Ollama connection successful")}else if(e.provider==="openai"){let t=await this.testOpenAIConnection(e.apiKey);if(!t.success)throw new Error("OpenAI connection failed: ".concat(t.error));console.log("OpenAI connection successful")}else{if(!e.apiKey)throw new Error("API key required for ".concat(e.provider));console.log("AI settings validated for ".concat(e.provider))}}async testOllamaConnection(){try{console.log("Testing Ollama connection...");let e={model:"qwen2.5:3b",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],stream:!1},t=await this.callOllamaAPI("chat",e);if(t.success)return console.log("Ollama chat test successful:",t.data),{success:!0,data:{provider:"ollama",version:t.data.model,response:t.data.message.content,port:11434}};throw new Error(t.error||"Unknown error from Ollama")}catch(e){return console.error("Ollama connection failed:",e),{success:!1,error:e.message,details:e.stack,troubleshooting:"Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal."}}}async callOllamaAPI(e,t){var r,s;try{let n=b(A({},t),{stream:!1}),i=await fetch("http://localhost:11434/api/".concat(e),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(n)});if(!i.ok){let c=await i.text();throw console.error("Ollama API error response:",{status:i.status,statusText:i.statusText,body:c}),new Error("HTTP error! status: ".concat(i.status,", details: ").concat(c))}let l=await i.text(),a;try{a=JSON.parse(l)}catch(c){console.warn("JSON parse error:",c.message),console.log("Response text:",l.substring(0,200)+"...");try{let d=l.match(/\{[\s\S]*\}/);if(d)a=JSON.parse(d[0]),console.log("Successfully extracted JSON from response");else throw new Error("Couldn't find valid JSON object in response")}catch(d){throw console.error("Failed to extract JSON:",d),new Error("Invalid JSON response from Ollama: ".concat(c.message))}}if(e==="chat"){if(!a||!a.message||!a.message.content)if(console.error("Unexpected chat response structure from Ollama:",a),a&&typeof a=="object")a={message:{content:((r=a.message)==null?void 0:r.content)||a.content||a.text||a.response||""||"No content found in response"},model:a.model||"unknown"},console.log("Constructed fallback response:",a);else throw new Error("Invalid chat response format from Ollama")}else if(e==="generate"){if(!a||typeof a.response!="string")if(console.error("Unexpected generate response structure from Ollama:",a),a&&typeof a=="object")a={response:a.response||a.content||a.text||((s=a.message)==null?void 0:s.content)||""||"No response found in result",model:a.model||"unknown"},console.log("Constructed fallback generate response:",a);else throw new Error("Invalid generate response format from Ollama")}else if(e==="embeddings"){if(!a||!a.embedding||!Array.isArray(a.embedding))throw console.error("Unexpected embeddings response structure from Ollama:",a),new Error("Invalid embeddings response format from Ollama")}else if(!a)throw console.error("Empty response from Ollama for endpoint ".concat(e,":"),a),new Error("Invalid response format from Ollama for ".concat(e));return{success:!0,data:a}}catch(o){console.error("Ollama API call failed (".concat(e,"):"),o);let n="Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal.";return o.name==="AbortError"?n+=" The request timed out - your model might be too large or your computer too slow.":o.message.includes("Failed to fetch")?n+=" Your computer cannot connect to Ollama. Make sure it's running and not blocked by a firewall.":(o.message.includes("Invalid response format")||o.message.includes("JSON"))&&(n+=" Ollama returned an unexpected response format. You might need to update Ollama to a newer version."),{success:!1,error:o.message,details:o.stack,troubleshooting:n}}}async handleCallOpenAI(e,t){try{let r=e.data||{},s=await this.callOpenAIAPI(r);t(s)}catch(r){t({success:!1,error:r.message})}}async handleTestOpenAI(e,t){try{let r=this.backgroundManager.getAutoApplyState().aiSettings,s=(r==null?void 0:r.apiKey)||e.apiKey;if(!s){t({success:!1,error:"OpenAI API key is required"});return}let o=await this.testOpenAIConnection(s);t(o)}catch(r){t({success:!1,error:r.message})}}async testOpenAIConnection(e){try{console.log("Testing OpenAI connection...");let t={model:"gpt-4o-mini",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],max_tokens:50},r=await this.callOpenAIAPI(b(A({},t),{apiKey:e}));if(r.success)return console.log("OpenAI connection test successful:",r.data),{success:!0,data:{version:r.data.model,response:r.data.choices[0].message.content,provider:"openai"}};throw new Error(r.error||"Unknown error from OpenAI")}catch(t){return console.error("OpenAI connection failed:",t),{success:!1,error:t.message,details:t.stack,troubleshooting:"Please check your OpenAI API key and make sure it's valid."}}}async callOpenAIAPI(e){var t;try{let{apiKey:r,model:s,prompt:o,messages:n,max_tokens:i=1e3,temperature:l=.7}=e;if(!r)throw new Error("OpenAI API key is required");let a={model:s||"gpt-4o-mini",max_tokens:i,temperature:l};if(n)a.messages=n;else if(o)a.messages=[{role:"user",content:o}];else throw new Error("Either prompt or messages must be provided");let c=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(r)},body:JSON.stringify(a)});if(!c.ok){let m=await c.json().catch(()=>({}));console.error("OpenAI API error response:",{status:c.status,statusText:c.statusText,error:m});let w="HTTP error! status: ".concat(c.status);throw(t=m.error)!=null&&t.message?w=m.error.message:m.error&&(w=m.error),new Error(w)}return{success:!0,data:await c.json()}}catch(r){console.error("OpenAI API call failed:",r);let s="Please check your OpenAI API key and make sure it's valid.";return r.message.includes("401")?s="Your OpenAI API key is invalid. Please check your API key.":r.message.includes("429")?s="Rate limit exceeded. Please wait a moment and try again.":r.message.includes("quota")?s="You've exceeded your OpenAI API quota. Please check your billing.":r.message.includes("Failed to fetch")&&(s="Network error. Please check your internet connection."),{success:!1,error:r.message,troubleshooting:s}}}},P=E;var M=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,t){let{action:r}=e;switch(r){case"uploadResume":await this.handleResumeUpload(e,t);break;case"downloadResume":await this.handleResumeDownload(e,t);break;default:t({success:!1,error:"Unknown resume action"})}}async handleResumeUpload(e,t){try{let{userId:r,fileData:s,formData:o}=e;if(!this.DATABASE_AVAILABLE){t({success:!1,error:"Database not available"});return}if(!s||!s.buffer){t({success:!1,error:"No file data provided"});return}let n=new FormData,i=new Uint8Array(s.buffer),l=new Blob([i],{type:s.type}),a=new File([l],s.name,{type:s.type,lastModified:s.lastModified});n.append("resume",a),n.append("name",o.name||""),n.append("short_description",o.short_description||""),n.append("is_default",o.is_default||!1),o.structured_data&&n.append("structured_data",o.structured_data),o.formatted_text&&n.append("formatted_text",o.formatted_text),o.file_type&&n.append("file_type",o.file_type);let c=await fetch("".concat(this.API_BASE_URL,"/users/").concat(r,"/resumes/upload"),{method:"POST",body:n}),d=await c.json();if(!c.ok){t({success:!1,error:d.error||"Upload failed"});return}t(A({success:!0},d))}catch(r){console.error("Resume upload error:",r),t({success:!1,error:r.message})}}async handleResumeDownload(e,t){try{let{resumeId:r,fileName:s}=e;if(!this.DATABASE_AVAILABLE){t({success:!1,error:"Database not available"});return}let o=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(r));if(!o.ok){let m=await o.json();t({success:!1,error:m.error||"Resume not found"});return}let i=(await o.json()).resume,l="".concat(i.name,".").concat(i.extension),a=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(r,"/download"));if(!a.ok){let m=await a.json();t({success:!1,error:m.error||"Download failed"});return}let c=await a.blob(),d=new FileReader;d.onloadend=()=>{let m=d.result;chrome.downloads.download({url:m,filename:l},w=>{chrome.runtime.lastError?t({success:!1,error:chrome.runtime.lastError.message}):t({success:!0,downloadId:w})})},d.onerror=()=>{t({success:!1,error:"Failed to read file data"})},d.readAsDataURL(c)}catch(r){console.error("Resume download error:",r),t({success:!1,error:r.message})}}},_=M;var L=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,t){let{action:r}=e;switch(r){case"apiRequest":await this.handleApiRequest(e,t);break;default:t({success:!1,error:"Unknown API action"})}}async handleApiRequest(e,t){try{let{method:r,url:s,data:o}=e;if(console.log("APIManager received request:",{method:r,url:s,data:o}),!this.DATABASE_AVAILABLE){t({success:!1,error:"Database not available"});return}let n="".concat(this.API_BASE_URL).concat(s);console.log("Making request to:",n);let i={method:r,headers:{"Content-Type":"application/json"}};o&&(r==="POST"||r==="PUT")&&(i.body=JSON.stringify(o)),console.log("Request options:",i);let l=await fetch(n,i),a=await l.json();if(console.log("API response:",{status:l.status,result:a}),!l.ok){t({success:!1,error:a.error||"API request failed"});return}t(A({success:!0},a))}catch(r){console.error("API request error:",r),t({success:!1,error:r.message})}}},v=L;var T=class{constructor(){this.isAutoApplyRunning=!1,this.currentUserData=null,this.currentAiSettings=null,this.currentUser=null,this.managers=new Map,this.initializeManagers(),this.setupMessageListener()}initializeManagers(){this.managers.set("autoApply",new S(this)),this.managers.set("user",new O(this)),this.managers.set("ai",new P(this)),this.managers.set("resume",new _(this)),this.managers.set("api",new v(this))}setupMessageListener(){chrome.runtime.onMessage.addListener((e,t,r)=>(console.log("Background received message:",e),console.log("Message sender:",t),!e||typeof e!="object"?(console.error("Invalid message received - not an object:",e),r({success:!1,error:"Invalid message: not an object"}),!0):(this.handleMessage(e,t,r),!0)))}async handleMessage(e,t,r){try{let{action:s}=e;if(!s||typeof s!="string"){console.error("Invalid message received - missing or invalid action:",e),r({success:!1,error:"Invalid message: missing or invalid action"});return}s.startsWith("startAutoApply")||s.startsWith("stopAutoApply")||s==="getAutoApplyState"?await this.managers.get("autoApply").handleMessage(e,r):s.startsWith("registerUser")||s.startsWith("loginUser")||s.startsWith("logoutUser")||s.startsWith("getUserProfile")||s.startsWith("updateUserProfile")||s==="getCurrentUser"?await this.managers.get("user").handleMessage(e,r):s.startsWith("callOllama")||s.startsWith("testOllama")||s==="ollamaRequest"||s.startsWith("callOpenAI")||s.startsWith("testOpenAI")?await this.managers.get("ai").handleMessage(e,r):s.startsWith("uploadResume")||s.startsWith("downloadResume")?await this.managers.get("resume").handleMessage(e,r):s==="apiRequest"?await this.managers.get("api").handleMessage(e,r):s==="getPlatformInfo"?await this.handleGetPlatformInfo(e,r):s==="STATUS_UPDATE"||s==="PROCESS_COMPLETE"?(console.log("Received status update:",e),r({success:!0,message:"Status update received"})):(console.warn("Unknown action received:",s),r({success:!1,error:"Unknown action: ".concat(s)}))}catch(s){console.error("Error handling message:",s),r({success:!1,error:s.message})}}getManager(e){return this.managers.get(e)}getAutoApplyState(){return{isRunning:this.isAutoApplyRunning,userData:this.currentUserData,aiSettings:this.currentAiSettings,user:this.currentUser}}setAutoApplyState(e){e.hasOwnProperty("isRunning")&&(this.isAutoApplyRunning=e.isRunning),e.hasOwnProperty("userData")&&(this.currentUserData=e.userData),e.hasOwnProperty("aiSettings")&&(this.currentAiSettings=e.aiSettings),e.hasOwnProperty("user")&&(this.currentUser=e.user)}async handleGetPlatformInfo(e,t){try{let r=await chrome.tabs.query({active:!0,currentWindow:!0});if(r.length===0){t({success:!1,error:"No active tab found"});return}let s=r[0],o=s.url,n=s.title,i=y=>{let g=y.toLowerCase();return/linkedin\.com/i.test(g)||/linkedin\.[a-z]{2,3}/i.test(g)?"linkedin":/indeed\.com/i.test(g)||/indeed\.[a-z]{2,3}/i.test(g)||/indeed\.[a-z]{2,3}\.[a-z]{2,3}/i.test(g)?"indeed":/stepstone\.de/i.test(g)||/stepstone\.com/i.test(g)||/stepstone\.[a-z]{2,3}/i.test(g)?"stepstone":"unknown"},l=(y,g)=>{let u=y.toLowerCase();switch(g){case"linkedin":return u.includes("/jobs/")||u.includes("/job/");case"indeed":return u.includes("/jobs")||u.includes("/viewjob")||u.includes("q=")||u.includes("/job/");case"stepstone":return u.includes("/jobs")||u.includes("/job/")||u.includes("/stellenangebote")||u.includes("/stellenanzeige");default:return!1}},a=i(o),c=l(o,a),d=["linkedin","indeed","stepstone"].includes(a),w={platform:a,displayName:(y=>({linkedin:"LinkedIn",indeed:"Indeed",stepstone:"StepStone"})[y]||"Unknown Platform")(a),isSupported:d,isJobSearchPage:c,url:o,title:n,tabId:s.id};console.log("Platform info:",w),t({success:!0,platformInfo:w})}catch(r){console.error("Error getting platform info:",r),t({success:!1,error:r.message})}}},D=T;var I=new D,ne=I.getManager("autoApply"),ie=I.getManager("user"),le=I.getManager("ai"),ce=I.getManager("resume"),ue=I.getManager("api"),B=I;console.log("Background script loaded - Using manager system");chrome.runtime.onInstalled.addListener(()=>{console.log("Job Tracker Extension Installed"),console.log("Background managers initialized:",Object.keys(B.managers))});
