var O=Object.defineProperty,A=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var U=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var I=(e,t,r)=>t in e?O(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))v.call(t,r)&&I(e,r,t[r]);if(U)for(var r of U(t))k.call(t,r)&&I(e,r,t[r]);return e},m=(e,t)=>A(e,S(t));var p=!0,h="http://localhost:3001/api";console.log("Background script loaded - Database operations enabled via API server");chrome.runtime.onInstalled.addListener(()=>{console.log("Job Tracker Extension Installed")});var g=!1,w=null,E=null,u=null;chrome.runtime.onMessage.addListener((e,t,r)=>{if(console.log("Background received message:",e),e.action==="startAutoApply")return _(e,r),!0;if(e.action==="stopAutoApply")return D(e,r),!0;if(e.action==="registerUser")return L(e,r),!0;if(e.action==="loginUser")return P(e,r),!0;if(e.action==="logoutUser")return x(e,r),!0;if(e.action==="getUserProfile")return $(e,r),!0;if(e.action==="updateUserProfile")return C(e,r),!0;if(e.action==="getCurrentUser")return j(e,r),!0;if(e.action==="testOllamaConnection")return y().then(a=>{r(a)}).catch(a=>{r({success:!1,error:a.message})}),!0;if(e.action==="callOllama"){let a=e.endpoint||"generate",o=e.data||{};return b(a,o).then(n=>{r(n)}).catch(n=>{r({success:!1,error:n.message})}),!0}else{if(e.action==="testOllama")return y().then(a=>{r(a)}).catch(a=>{r({success:!1,error:a.message})}),!0;if(e.action==="getAutoApplyState")return r({success:!0,isRunning:g}),!0}r({success:!1,error:"Unknown action"})});async function _(e,t){try{if(console.log("Starting auto apply with data:",e),!e.loginData||!e.loginData.username)throw new Error("Login data required");if(!e.aiSettings||!e.aiSettings.provider||!e.aiSettings.model)throw new Error("AI settings required");w=e.loginData,E=e.aiSettings,g=!0,await T(e.aiSettings);let r=await chrome.tabs.query({active:!0,currentWindow:!0});if(r.length>0){let a=r[0].id;if(!r[0].url.includes("linkedin.com"))throw new Error("Please navigate to LinkedIn jobs page first");chrome.tabs.sendMessage(a,{action:"startAutoApply",userData:w,aiSettings:E},o=>{chrome.runtime.lastError?(console.error("Error sending message to content script:",chrome.runtime.lastError),t({success:!1,error:"Failed to communicate with LinkedIn page. Please refresh the page and try again."})):(console.log("Content script response:",o),t({success:!0,message:"Auto apply started successfully"}))})}else throw new Error("No active tab found")}catch(r){console.error("Error starting auto apply:",r),g=!1,t({success:!1,error:r.message})}}async function D(e,t){try{console.log("Stopping auto apply");let r=await chrome.tabs.query({active:!0,currentWindow:!0});if(r.length>0){let a=r[0].id;chrome.tabs.sendMessage(a,{action:"stopAutoApply"},o=>{chrome.runtime.lastError?(console.error("Error sending stop message to content script:",chrome.runtime.lastError),g=!1,t({success:!0,message:"Auto apply stopped (content script communication error)"})):o&&o.success?(console.log("Auto apply stopped successfully"),g=!1,t({success:!0,message:"Auto apply stopped"})):(console.error("Content script failed to stop auto apply:",o==null?void 0:o.error),g=!1,t({success:!0,message:"Auto apply stopped (with content script error)"}))})}else g=!1,t({success:!0,message:"Auto apply stopped (no active tab)"})}catch(r){console.error("Error stopping auto apply:",r),g=!1,t({success:!1,error:r.message})}}async function T(e){if(console.log("Testing AI connection:",e),e.provider==="ollama"){let t=await y();if(!t.success)throw new Error("Ollama connection failed: ".concat(t.error));console.log("Ollama connection successful")}else{if(!e.apiKey)throw new Error("API key required for ".concat(e.provider));console.log("AI settings validated for ".concat(e.provider))}}async function y(){try{console.log("Testing Ollama connection...");let t=await b("chat",{model:"qwen2.5:3b",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],stream:!1});if(t.success)return console.log("Ollama chat test successful:",t.data),{success:!0,data:{version:t.data.model,response:t.data.message.content,port:11434}};throw new Error(t.error||"Unknown error from Ollama")}catch(e){return console.error("Ollama connection failed:",e),{success:!1,error:e.message,details:e.stack,troubleshooting:"Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal."}}}async function b(e,t){var r,a;try{console.log("Making Ollama API call to ".concat(e,":"),t);let o=11434;console.log("Using Ollama port: ".concat(o));let n=m(d({},t),{stream:!1}),l=await fetch("http://localhost:".concat(o,"/api/").concat(e),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(n)});if(!l.ok){let c=await l.text();throw console.error("Ollama API error response:",{status:l.status,statusText:l.statusText,body:c}),new Error("HTTP error! status: ".concat(l.status,", details: ").concat(c))}let i=await l.text(),s;try{s=JSON.parse(i)}catch(c){console.warn("JSON parse error:",c.message),console.log("Response text:",i.substring(0,200)+"...");try{let f=i.match(/\{[\s\S]*\}/);if(f)s=JSON.parse(f[0]),console.log("Successfully extracted JSON from response");else throw new Error("Couldn't find valid JSON object in response")}catch(f){throw console.error("Failed to extract JSON:",f),new Error("Invalid JSON response from Ollama: ".concat(c.message))}}if(console.log("Ollama API call successful:",s),e==="chat"){if(!s||!s.message||!s.message.content)if(console.error("Unexpected chat response structure from Ollama:",s),s&&typeof s=="object")s={message:{content:((r=s.message)==null?void 0:r.content)||s.content||s.text||s.response||""||"No content found in response"},model:s.model||"unknown"},console.log("Constructed fallback response:",s);else throw new Error("Invalid chat response format from Ollama")}else if(e==="generate"){if(!s||typeof s.response!="string")if(console.error("Unexpected generate response structure from Ollama:",s),s&&typeof s=="object")s={response:s.response||s.content||s.text||((a=s.message)==null?void 0:a.content)||""||"No response found in result",model:s.model||"unknown"},console.log("Constructed fallback generate response:",s);else throw new Error("Invalid generate response format from Ollama")}else if(e==="embeddings"){if(!s||!s.embedding||!Array.isArray(s.embedding))throw console.error("Unexpected embeddings response structure from Ollama:",s),new Error("Invalid embeddings response format from Ollama")}else if(!s)throw console.error("Empty response from Ollama for endpoint ".concat(e,":"),s),new Error("Invalid response format from Ollama for ".concat(e));return{success:!0,data:s}}catch(o){console.error("Ollama API call failed (".concat(e,"):"),o);let n="Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal.";return o.name==="AbortError"?n+=" The request timed out - your model might be too large or your computer too slow.":o.message.includes("Failed to fetch")?n+=" Your computer cannot connect to Ollama. Make sure it's running and not blocked by a firewall.":(o.message.includes("Invalid response format")||o.message.includes("JSON"))&&(n+=" Ollama returned an unexpected response format. You might need to update Ollama to a newer version."),{success:!1,error:o.message,details:o.stack,troubleshooting:n}}}async function L(e,t){try{if(!p){console.log("Database not available, using local storage fallback");let o=e.userData;if(!o||!o.username||!o.email||!o.password)throw new Error("Missing required user data (username, email, password)");let n=await chrome.storage.local.get(["users"])||{users:{}};if(n.users&&n.users[o.email])throw new Error("User with this email already exists");let l={id:"local_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),username:o.username,email:o.email,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),last_login:null,is_active:!0},i=n.users||{};i[o.email]=m(d({},l),{password_hash:"local_"+o.password}),await chrome.storage.local.set({users:i}),u=l,await chrome.storage.local.set({currentUser:l,isLoggedIn:!0,userId:l.id}),console.log("User registered successfully (local):",l.id),t({success:!0,user:l});return}let r=await fetch("".concat(h,"/users/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.userData)}),a=await r.json();if(!r.ok)throw new Error(a.error||"Registration failed");u=a.user,await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User registered successfully (database):",a.user.id),t({success:!0,user:a.user})}catch(r){console.error("Error registering user:",r),t({success:!1,error:r.message})}}async function P(e,t){try{if(!p){console.log("Database not available, using local storage fallback");let{email:o,password:n}=e;if(!o||!n)throw new Error("Email and password are required");let i=(await chrome.storage.local.get(["users"])).users||{},s=i[o];if(!s)throw new Error("Invalid email or password");if(s.password_hash!=="local_"+n)throw new Error("Invalid email or password");let c={id:s.id,username:s.username,email:s.email,created_at:s.created_at,updated_at:new Date().toISOString(),last_login:new Date().toISOString(),is_active:s.is_active};i[o]=m(d({},s),{last_login:c.last_login}),await chrome.storage.local.set({users:i}),u=c,await chrome.storage.local.set({currentUser:c,isLoggedIn:!0,userId:c.id}),console.log("User logged in successfully (local):",c.id),t({success:!0,user:c});return}let r=await fetch("".concat(h,"/users/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}),a=await r.json();if(!r.ok)throw new Error(a.error||"Login failed");u=a.user,await chrome.storage.local.set({currentUser:a.user,isLoggedIn:!0,userId:a.user.id}),console.log("User logged in successfully (database):",a.user.id),t({success:!0,user:a.user})}catch(r){console.error("Error logging in user:",r),t({success:!1,error:r.message})}}async function x(e,t){try{console.log("User logout"),u=null,w=null,await chrome.storage.local.remove(["currentUser","isLoggedIn","userId"]),console.log("User logged out successfully"),t({success:!0})}catch(r){console.error("Error logging out user:",r),t({success:!1,error:r.message})}}async function $(e,t){try{if(!p){let{userId:n}=e;if(!n)throw new Error("User ID is required");let l=await chrome.storage.local.get(["currentUser"]);if(!l.currentUser||l.currentUser.id!==n)throw new Error("User not found");let i={profile:l.currentUser,stats:{total_applications:"0",pending_applications:"0",interviews:"0",offers:"0",companies_applied_to:"0",questions_answered:"0"},resumes:[],aiSettings:[]};t({success:!0,profile:i});return}let{userId:r}=e;if(!r)throw new Error("User ID is required");let a=await fetch("".concat(h,"/users/").concat(r,"/profile"),{method:"GET",headers:{"Content-Type":"application/json"}}),o=await a.json();if(!a.ok)throw new Error(o.error||"Failed to get user profile");t({success:!0,profile:o.profile})}catch(r){console.error("Error getting user profile:",r),t({success:!1,error:r.message})}}async function C(e,t){try{if(!p){let{userId:l,updateData:i}=e;if(!l||!i)throw new Error("User ID and update data are required");let s=await chrome.storage.local.get(["currentUser"]);if(!s.currentUser||s.currentUser.id!==l)throw new Error("User not found");let c=m(d(d({},s.currentUser),i),{updated_at:new Date().toISOString()});u=c,await chrome.storage.local.set({currentUser:c}),t({success:!0,user:c});return}let{userId:r,updateData:a}=e;if(!r||!a)throw new Error("User ID and update data are required");let o=await fetch("".concat(h,"/users/").concat(r),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),n=await o.json();if(!o.ok)throw new Error(n.error||"Failed to update user profile");u&&u.id===r&&(u=n.user,await chrome.storage.local.set({currentUser:n.user})),t({success:!0,user:n.user})}catch(r){console.error("Error updating user profile:",r),t({success:!1,error:r.message})}}async function j(e,t){try{if(u){t({success:!0,user:u,isLoggedIn:!0});return}let r=await chrome.storage.local.get(["currentUser","isLoggedIn"]);r.currentUser&&r.isLoggedIn?(u=r.currentUser,t({success:!0,user:r.currentUser,isLoggedIn:!0})):t({success:!0,user:null,isLoggedIn:!1})}catch(r){console.error("Error getting current user:",r),t({success:!1,error:r.message})}}
