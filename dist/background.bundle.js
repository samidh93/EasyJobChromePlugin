var T=Object.defineProperty,D=Object.defineProperties;var x=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var B=Object.prototype.hasOwnProperty,C=Object.prototype.propertyIsEnumerable;var L=(g,e,r)=>e in g?T(g,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):g[e]=r,d=(g,e)=>{for(var r in e||(e={}))B.call(e,r)&&L(g,r,e[r]);if(P)for(var r of P(e))C.call(e,r)&&L(g,r,e[r]);return g},h=(g,e)=>D(g,x(e));var A=class{constructor(e){this.backgroundManager=e}async handleMessage(e,r){let{action:t}=e;switch(t){case"startAutoApply":await this.handleStartAutoApply(e,r);break;case"stopAutoApply":await this.handleStopAutoApply(e,r);break;case"getAutoApplyState":await this.handleGetAutoApplyState(e,r);break;default:r({success:!1,error:"Unknown auto-apply action"})}}async handleStartAutoApply(e,r){try{if(console.log("Starting auto apply with data:",e),!e.loginData||!e.loginData.username)throw new Error("Login data required");if(!e.aiSettings||!e.aiSettings.provider||!e.aiSettings.model)throw new Error("AI settings are required for auto-apply. Please configure AI settings first.");this.backgroundManager.setAutoApplyState({isRunning:!0,userData:e.loginData,aiSettings:e.aiSettings}),await this.backgroundManager.getManager("ai").testAiConnection(e.aiSettings),console.log("AI connection verified - auto-apply ready");let s=await chrome.tabs.query({active:!0,currentWindow:!0});if(s.length===0)throw new Error("No active tab found");let a=s[0],n=a.id;if(!a.url.includes("linkedin.com"))throw new Error("Please navigate to LinkedIn jobs page first");console.log("Target tab:",{id:n,url:a.url}),console.log("Using auto-injected content script from manifest"),await new Promise(l=>setTimeout(l,500));let i=await new Promise((l,o)=>{chrome.tabs.sendMessage(n,{action:"startAutoApply",userData:e.loginData,aiSettings:e.aiSettings},c=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):l(c)})});console.log("Content script response:",i),r({success:!0,message:"Auto apply started successfully"})}catch(t){console.error("Error starting auto apply:",t),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!1,error:t.message})}}async handleStopAutoApply(e,r){try{console.log("Stopping auto apply");let t=await chrome.tabs.query({active:!0,currentWindow:!0});if(t.length>0){let s=t[0].id;chrome.tabs.sendMessage(s,{action:"stopAutoApply"},a=>{chrome.runtime.lastError?(console.error("Error sending stop message to content script:",chrome.runtime.lastError),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (content script communication error)"})):a&&a.success?(console.log("Auto apply stopped successfully"),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped"})):(console.error("Content script failed to stop auto apply:",a==null?void 0:a.error),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (with content script error)"}))})}else this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!0,message:"Auto apply stopped (no active tab)"})}catch(t){console.error("Error stopping auto apply:",t),this.backgroundManager.setAutoApplyState({isRunning:!1}),r({success:!1,error:t.message})}}async handleGetAutoApplyState(e,r){let t=this.backgroundManager.getAutoApplyState();r({success:!0,isRunning:t.isRunning})}},w=A;var y=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"registerUser":await this.handleUserRegistration(e,r);break;case"loginUser":await this.handleUserLogin(e,r);break;case"logoutUser":await this.handleUserLogout(e,r);break;case"getUserProfile":await this.handleGetUserProfile(e,r);break;case"updateUserProfile":await this.handleUpdateUserProfile(e,r);break;case"getCurrentUser":await this.handleGetCurrentUser(e,r);break;default:r({success:!1,error:"Unknown user action"})}}async handleUserRegistration(e,r){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let a=e.userData;if(!a||!a.username||!a.email||!a.password)throw new Error("Missing required user data (username, email, password)");let n=await chrome.storage.local.get(["users"])||{users:{}};if(n.users&&n.users[a.email])throw new Error("User with this email already exists");let i={id:"local_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),username:a.username,email:a.email,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),last_login:null,is_active:!0},l=n.users||{};l[a.email]=h(d({},i),{password_hash:"local_"+a.password}),await chrome.storage.local.set({users:l}),this.backgroundManager.setAutoApplyState({user:i}),await chrome.storage.local.set({currentUser:i,isLoggedIn:!0,userId:i.id}),console.log("User registered successfully (local):",i.id),r({success:!0,user:i});return}let t=await fetch("".concat(this.API_BASE_URL,"/users/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e.userData)}),s=await t.json();if(!t.ok)throw new Error(s.error||"Registration failed");this.backgroundManager.setAutoApplyState({user:s.user}),await chrome.storage.local.set({currentUser:s.user,isLoggedIn:!0,userId:s.user.id}),console.log("User registered successfully (database):",s.user.id),r({success:!0,user:s.user})}catch(t){console.error("Error registering user:",t),r({success:!1,error:t.message})}}async handleUserLogin(e,r){try{if(!this.DATABASE_AVAILABLE){console.log("Database not available, using local storage fallback");let{email:a,password:n}=e;if(!a||!n)throw new Error("Email and password are required");let l=(await chrome.storage.local.get(["users"])).users||{},o=l[a];if(!o)throw new Error("Invalid email or password");if(o.password_hash!=="local_"+n)throw new Error("Invalid email or password");let c={id:o.id,username:o.username,email:o.email,created_at:o.created_at,updated_at:new Date().toISOString(),last_login:new Date().toISOString(),is_active:o.is_active};l[a]=h(d({},o),{last_login:c.last_login}),await chrome.storage.local.set({users:l}),this.backgroundManager.setAutoApplyState({user:c}),await chrome.storage.local.set({currentUser:c,isLoggedIn:!0,userId:c.id}),console.log("User logged in successfully (local):",c.id),r({success:!0,user:c});return}let t=await fetch("".concat(this.API_BASE_URL,"/users/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e.email,password:e.password})}),s=await t.json();if(!t.ok)throw new Error(s.error||"Login failed");this.backgroundManager.setAutoApplyState({user:s.user}),await chrome.storage.local.set({currentUser:s.user,isLoggedIn:!0,userId:s.user.id}),console.log("User logged in successfully (database):",s.user.id),r({success:!0,user:s.user})}catch(t){console.error("Error logging in user:",t),r({success:!1,error:t.message})}}async handleUserLogout(e,r){try{console.log("User logout"),this.backgroundManager.setAutoApplyState({user:null}),await chrome.storage.local.remove(["currentUser","isLoggedIn","userId"]),console.log("User logged out successfully"),r({success:!0})}catch(t){console.error("Error logging out user:",t),r({success:!1,error:t.message})}}async handleGetUserProfile(e,r){try{if(!this.DATABASE_AVAILABLE){let{userId:n}=e;if(!n)throw new Error("User ID is required");let i=await chrome.storage.local.get(["currentUser"]);if(!i.currentUser||i.currentUser.id!==n)throw new Error("User not found");let l={profile:i.currentUser,stats:{total_applications:"0",pending_applications:"0",interviews:"0",offers:"0",companies_applied_to:"0",questions_answered:"0"},resumes:[],aiSettings:[]};r({success:!0,profile:l});return}let{userId:t}=e;if(!t)throw new Error("User ID is required");let s=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t,"/profile"),{method:"GET",headers:{"Content-Type":"application/json"}}),a=await s.json();if(!s.ok)throw new Error(a.error||"Failed to get user profile");r({success:!0,profile:a.profile})}catch(t){console.error("Error getting user profile:",t),r({success:!1,error:t.message})}}async handleUpdateUserProfile(e,r){try{if(!this.DATABASE_AVAILABLE){let{userId:l,updateData:o}=e;if(!l||!o)throw new Error("User ID and update data are required");let c=await chrome.storage.local.get(["currentUser"]);if(!c.currentUser||c.currentUser.id!==l)throw new Error("User not found");let u=h(d(d({},c.currentUser),o),{updated_at:new Date().toISOString()});this.backgroundManager.setAutoApplyState({user:u}),await chrome.storage.local.set({currentUser:u}),r({success:!0,user:u});return}let{userId:t,updateData:s}=e;if(!t||!s)throw new Error("User ID and update data are required");let a=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),n=await a.json();if(!a.ok)throw new Error(n.error||"Failed to update user profile");let i=this.backgroundManager.getAutoApplyState();i.user&&i.user.id===t&&(this.backgroundManager.setAutoApplyState({user:n.user}),await chrome.storage.local.set({currentUser:n.user})),r({success:!0,user:n.user})}catch(t){console.error("Error updating user profile:",t),r({success:!1,error:t.message})}}async handleGetCurrentUser(e,r){try{let t=this.backgroundManager.getAutoApplyState();if(t.user){r({success:!0,user:t.user,isLoggedIn:!0});return}let s=await chrome.storage.local.get(["currentUser","isLoggedIn"]);s.currentUser&&s.isLoggedIn?(this.backgroundManager.setAutoApplyState({user:s.currentUser}),r({success:!0,user:s.currentUser,isLoggedIn:!0})):r({success:!0,user:null,isLoggedIn:!1})}catch(t){console.error("Error getting current user:",t),r({success:!1,error:t.message})}}},I=y;var b=class{constructor(e){this.backgroundManager=e,this.OLLAMA_BASE_URL="http://localhost:11434"}async handleMessage(e,r){let{action:t}=e;switch(t){case"callOllama":await this.handleCallOllama(e,r);break;case"testOllama":case"testOllamaConnection":await this.handleTestOllama(e,r);break;case"ollamaRequest":await this.handleOllamaRequest(e,r);break;case"callOpenAI":await this.handleCallOpenAI(e,r);break;case"testOpenAI":await this.handleTestOpenAI(e,r);break;default:r({success:!1,error:"Unknown AI action"})}}async handleOllamaRequest(e,r){try{let{method:t,url:s,data:a}=e,n="".concat(this.OLLAMA_BASE_URL).concat(s),i={method:t||"GET",headers:{"Content-Type":"application/json"}};a&&(t==="POST"||t==="PUT")&&(i.body=JSON.stringify(a));let l=await fetch(n,i);if(!l.ok){r({success:!1,error:"Ollama request failed: ".concat(l.status," ").concat(l.statusText)});return}let o=await l.json();r(d({success:!0},o))}catch(t){console.error("Ollama request error:",t),r({success:!1,error:"Error connecting to Ollama. Make sure it's running on localhost:11434."})}}async handleCallOllama(e,r){try{let t=e.endpoint||"generate",s=e.data||{},a=await this.callOllamaAPI(t,s);r(a)}catch(t){r({success:!1,error:t.message})}}async handleTestOllama(e,r){try{let t=await this.testOllamaConnection();r(t)}catch(t){r({success:!1,error:t.message})}}async testAiConnection(e){if(console.log("Testing AI connection:",e),!e)throw new Error("No AI settings provided");if(e.provider==="ollama"){let r=await this.testOllamaConnection();if(!r.success)throw new Error("Ollama connection failed: ".concat(r.error));console.log("Ollama connection successful")}else if(e.provider==="openai"){let r=await this.testOpenAIConnection(e.apiKey);if(!r.success)throw new Error("OpenAI connection failed: ".concat(r.error));console.log("OpenAI connection successful")}else{if(!e.apiKey)throw new Error("API key required for ".concat(e.provider));console.log("AI settings validated for ".concat(e.provider))}}async testOllamaConnection(){try{console.log("Testing Ollama connection...");let e={model:"qwen2.5:3b",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],stream:!1},r=await this.callOllamaAPI("chat",e);if(r.success)return console.log("Ollama chat test successful:",r.data),{success:!0,data:{provider:"ollama",version:r.data.model,response:r.data.message.content,port:11434}};throw new Error(r.error||"Unknown error from Ollama")}catch(e){return console.error("Ollama connection failed:",e),{success:!1,error:e.message,details:e.stack,troubleshooting:"Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal."}}}async callOllamaAPI(e,r){var t,s;try{let n=h(d({},r),{stream:!1}),i=await fetch("http://localhost:11434/api/".concat(e),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","Access-Control-Allow-Origin":"*"},body:JSON.stringify(n)});if(!i.ok){let c=await i.text();throw console.error("Ollama API error response:",{status:i.status,statusText:i.statusText,body:c}),new Error("HTTP error! status: ".concat(i.status,", details: ").concat(c))}let l=await i.text(),o;try{o=JSON.parse(l)}catch(c){console.warn("JSON parse error:",c.message),console.log("Response text:",l.substring(0,200)+"...");try{let u=l.match(/\{[\s\S]*\}/);if(u)o=JSON.parse(u[0]),console.log("Successfully extracted JSON from response");else throw new Error("Couldn't find valid JSON object in response")}catch(u){throw console.error("Failed to extract JSON:",u),new Error("Invalid JSON response from Ollama: ".concat(c.message))}}if(e==="chat"){if(!o||!o.message||!o.message.content)if(console.error("Unexpected chat response structure from Ollama:",o),o&&typeof o=="object")o={message:{content:((t=o.message)==null?void 0:t.content)||o.content||o.text||o.response||""||"No content found in response"},model:o.model||"unknown"},console.log("Constructed fallback response:",o);else throw new Error("Invalid chat response format from Ollama")}else if(e==="generate"){if(!o||typeof o.response!="string")if(console.error("Unexpected generate response structure from Ollama:",o),o&&typeof o=="object")o={response:o.response||o.content||o.text||((s=o.message)==null?void 0:s.content)||""||"No response found in result",model:o.model||"unknown"},console.log("Constructed fallback generate response:",o);else throw new Error("Invalid generate response format from Ollama")}else if(e==="embeddings"){if(!o||!o.embedding||!Array.isArray(o.embedding))throw console.error("Unexpected embeddings response structure from Ollama:",o),new Error("Invalid embeddings response format from Ollama")}else if(!o)throw console.error("Empty response from Ollama for endpoint ".concat(e,":"),o),new Error("Invalid response format from Ollama for ".concat(e));return{success:!0,data:o}}catch(a){console.error("Ollama API call failed (".concat(e,"):"),a);let n="Please make sure Ollama is running on your computer. Try running 'ollama serve' in your terminal.";return a.name==="AbortError"?n+=" The request timed out - your model might be too large or your computer too slow.":a.message.includes("Failed to fetch")?n+=" Your computer cannot connect to Ollama. Make sure it's running and not blocked by a firewall.":(a.message.includes("Invalid response format")||a.message.includes("JSON"))&&(n+=" Ollama returned an unexpected response format. You might need to update Ollama to a newer version."),{success:!1,error:a.message,details:a.stack,troubleshooting:n}}}async handleCallOpenAI(e,r){try{let t=e.data||{},s=await this.callOpenAIAPI(t);r(s)}catch(t){r({success:!1,error:t.message})}}async handleTestOpenAI(e,r){try{let t=this.backgroundManager.getAutoApplyState().aiSettings,s=(t==null?void 0:t.apiKey)||e.apiKey;if(!s){r({success:!1,error:"OpenAI API key is required"});return}let a=await this.testOpenAIConnection(s);r(a)}catch(t){r({success:!1,error:t.message})}}async testOpenAIConnection(e){try{console.log("Testing OpenAI connection...");let r={model:"gpt-4o-mini",messages:[{role:"system",content:"You are a helpful AI assistant."},{role:"user",content:"Hello, are you working?"}],max_tokens:50},t=await this.callOpenAIAPI(h(d({},r),{apiKey:e}));if(t.success)return console.log("OpenAI connection test successful:",t.data),{success:!0,data:{version:t.data.model,response:t.data.choices[0].message.content,provider:"openai"}};throw new Error(t.error||"Unknown error from OpenAI")}catch(r){return console.error("OpenAI connection failed:",r),{success:!1,error:r.message,details:r.stack,troubleshooting:"Please check your OpenAI API key and make sure it's valid."}}}async callOpenAIAPI(e){var r;try{let{apiKey:t,model:s,prompt:a,messages:n,max_tokens:i=1e3,temperature:l=.7}=e;if(!t)throw new Error("OpenAI API key is required");let o={model:s||"gpt-4o-mini",max_tokens:i,temperature:l};if(n)o.messages=n;else if(a)o.messages=[{role:"user",content:a}];else throw new Error("Either prompt or messages must be provided");let c=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(t)},body:JSON.stringify(o)});if(!c.ok){let p=await c.json().catch(()=>({}));console.error("OpenAI API error response:",{status:c.status,statusText:c.statusText,error:p});let f="HTTP error! status: ".concat(c.status);throw(r=p.error)!=null&&r.message?f=p.error.message:p.error&&(f=p.error),new Error(f)}return{success:!0,data:await c.json()}}catch(t){console.error("OpenAI API call failed:",t);let s="Please check your OpenAI API key and make sure it's valid.";return t.message.includes("401")?s="Your OpenAI API key is invalid. Please check your API key.":t.message.includes("429")?s="Rate limit exceeded. Please wait a moment and try again.":t.message.includes("quota")?s="You've exceeded your OpenAI API quota. Please check your billing.":t.message.includes("Failed to fetch")&&(s="Network error. Please check your internet connection."),{success:!1,error:t.message,troubleshooting:s}}}},U=b;var O=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"uploadResume":await this.handleResumeUpload(e,r);break;case"downloadResume":await this.handleResumeDownload(e,r);break;default:r({success:!1,error:"Unknown resume action"})}}async handleResumeUpload(e,r){try{let{userId:t,fileData:s,formData:a}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}if(!s||!s.buffer){r({success:!1,error:"No file data provided"});return}let n=new FormData,i=new Uint8Array(s.buffer),l=new Blob([i],{type:s.type}),o=new File([l],s.name,{type:s.type,lastModified:s.lastModified});n.append("resume",o),n.append("name",a.name||""),n.append("short_description",a.short_description||""),n.append("is_default",a.is_default||!1),a.structured_data&&n.append("structured_data",a.structured_data),a.formatted_text&&n.append("formatted_text",a.formatted_text),a.file_type&&n.append("file_type",a.file_type);let c=await fetch("".concat(this.API_BASE_URL,"/users/").concat(t,"/resumes/upload"),{method:"POST",body:n}),u=await c.json();if(!c.ok){r({success:!1,error:u.error||"Upload failed"});return}r(d({success:!0},u))}catch(t){console.error("Resume upload error:",t),r({success:!1,error:t.message})}}async handleResumeDownload(e,r){try{let{resumeId:t,fileName:s}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}let a=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(t));if(!a.ok){let p=await a.json();r({success:!1,error:p.error||"Resume not found"});return}let i=(await a.json()).resume,l="".concat(i.name,".").concat(i.extension),o=await fetch("".concat(this.API_BASE_URL,"/resumes/").concat(t,"/download"));if(!o.ok){let p=await o.json();r({success:!1,error:p.error||"Download failed"});return}let c=await o.blob(),u=new FileReader;u.onloadend=()=>{let p=u.result;chrome.downloads.download({url:p,filename:l},f=>{chrome.runtime.lastError?r({success:!1,error:chrome.runtime.lastError.message}):r({success:!0,downloadId:f})})},u.onerror=()=>{r({success:!1,error:"Failed to read file data"})},u.readAsDataURL(c)}catch(t){console.error("Resume download error:",t),r({success:!1,error:t.message})}}},k=O;var S=class{constructor(e){this.backgroundManager=e,this.DATABASE_AVAILABLE=!0,this.API_BASE_URL="http://localhost:3001/api"}async handleMessage(e,r){let{action:t}=e;switch(t){case"apiRequest":await this.handleApiRequest(e,r);break;default:r({success:!1,error:"Unknown API action"})}}async handleApiRequest(e,r){try{let{method:t,url:s,data:a}=e;if(!this.DATABASE_AVAILABLE){r({success:!1,error:"Database not available"});return}let n="".concat(this.API_BASE_URL).concat(s),i={method:t,headers:{"Content-Type":"application/json"}};a&&(t==="POST"||t==="PUT")&&(i.body=JSON.stringify(a));let l=await fetch(n,i),o=await l.json();if(!l.ok){r({success:!1,error:o.error||"API request failed"});return}r(d({success:!0},o))}catch(t){console.error("API request error:",t),r({success:!1,error:t.message})}}},E=S;var M=class{constructor(){this.isAutoApplyRunning=!1,this.currentUserData=null,this.currentAiSettings=null,this.currentUser=null,this.managers=new Map,this.initializeManagers(),this.setupMessageListener()}initializeManagers(){this.managers.set("autoApply",new w(this)),this.managers.set("user",new I(this)),this.managers.set("ai",new U(this)),this.managers.set("resume",new k(this)),this.managers.set("api",new E(this))}setupMessageListener(){chrome.runtime.onMessage.addListener((e,r,t)=>(console.log("Background received message:",e),console.log("Message sender:",r),!e||typeof e!="object"?(console.error("Invalid message received - not an object:",e),t({success:!1,error:"Invalid message: not an object"}),!0):(this.handleMessage(e,r,t),!0)))}async handleMessage(e,r,t){try{let{action:s}=e;if(!s||typeof s!="string"){console.error("Invalid message received - missing or invalid action:",e),t({success:!1,error:"Invalid message: missing or invalid action"});return}s.startsWith("startAutoApply")||s.startsWith("stopAutoApply")||s==="getAutoApplyState"?await this.managers.get("autoApply").handleMessage(e,t):s.startsWith("registerUser")||s.startsWith("loginUser")||s.startsWith("logoutUser")||s.startsWith("getUserProfile")||s.startsWith("updateUserProfile")||s==="getCurrentUser"?await this.managers.get("user").handleMessage(e,t):s.startsWith("callOllama")||s.startsWith("testOllama")||s==="ollamaRequest"||s.startsWith("callOpenAI")||s.startsWith("testOpenAI")?await this.managers.get("ai").handleMessage(e,t):s.startsWith("uploadResume")||s.startsWith("downloadResume")?await this.managers.get("resume").handleMessage(e,t):s==="apiRequest"?await this.managers.get("api").handleMessage(e,t):s==="STATUS_UPDATE"||s==="PROCESS_COMPLETE"?(console.log("Received status update:",e),t({success:!0,message:"Status update received"})):(console.warn("Unknown action received:",s),t({success:!1,error:"Unknown action: ".concat(s)}))}catch(s){console.error("Error handling message:",s),t({success:!1,error:s.message})}}getManager(e){return this.managers.get(e)}getAutoApplyState(){return{isRunning:this.isAutoApplyRunning,userData:this.currentUserData,aiSettings:this.currentAiSettings,user:this.currentUser}}setAutoApplyState(e){e.hasOwnProperty("isRunning")&&(this.isAutoApplyRunning=e.isRunning),e.hasOwnProperty("userData")&&(this.currentUserData=e.userData),e.hasOwnProperty("aiSettings")&&(this.currentAiSettings=e.aiSettings),e.hasOwnProperty("user")&&(this.currentUser=e.user)}},_=M;var m=new _,ee=m.getManager("autoApply"),re=m.getManager("user"),te=m.getManager("ai"),se=m.getManager("resume"),ae=m.getManager("api"),v=m;console.log("Background script loaded - Using manager system");chrome.runtime.onInstalled.addListener(()=>{console.log("Job Tracker Extension Installed"),console.log("Background managers initialized:",Object.keys(v.managers))});
