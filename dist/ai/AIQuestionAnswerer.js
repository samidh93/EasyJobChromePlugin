var f=class{constructor(){this.data={}}async addEntry(e,r){if(r)try{let t=await new Promise((s,n)=>{chrome.runtime.sendMessage({action:"getEmbeddings",text:r},o=>{chrome.runtime.lastError?n(new Error(chrome.runtime.lastError.message)):s(o)})});if(!t.success)throw new Error(t.error||"Unknown error generating embedding");this.data[e]={text:r,embedding:t.data.embedding}}catch(t){console.error("Error generating embedding:",t)}}async search(e,r=3){if(!this.data||Object.keys(this.data).length===0)return[];try{let t=await new Promise((o,a)=>{chrome.runtime.sendMessage({action:"getEmbeddings",text:e},u=>{chrome.runtime.lastError?a(new Error(chrome.runtime.lastError.message)):o(u)})});if(!t.success)throw new Error(t.error||"Unknown error generating embedding for search");let s=t.data.embedding,n={};for(let[o,a]of Object.entries(this.data)){let u=this.cosineSimilarity(a.embedding,s);n[o]=u}return Object.entries(n).sort(([,o],[,a])=>a-o).slice(0,r).map(([o])=>o)}catch(t){return console.error("Error in search:",t),[]}}cosineSimilarity(e,r){let t=e.reduce((o,a,u)=>o+a*r[u],0),s=Math.sqrt(e.reduce((o,a)=>o+a*a,0)),n=Math.sqrt(r.reduce((o,a)=>o+a*a,0));return t/(s*n)}},E=f;import x from"js-yaml";var m=null,w=class b{constructor(){if(m)return m;this.model="qwen2.5:3b",this.memory=new E,this.conversationHistory=[],this.setSystemContext(),this.job=null,this.userData=null,this.ollamaUrl="http://localhost:11434",m=this}static getInstance(){return m||(m=new b),m}static resetInstance(){m=null}async checkOllamaConnection(){try{return console.log("Checking Ollama connection..."),new Promise(e=>{let r=setTimeout(()=>{console.error("Ollama connection check timed out"),e({connected:!1,error:"Connection timeout",troubleshooting:"Ollama connection check timed out. Make sure Ollama is running and not overloaded."})},1e4);chrome.runtime.sendMessage({action:"testOllama"},t=>{var s;if(clearTimeout(r),console.log("Ollama connection check response:",t),!t){console.error("Ollama connection check returned no response"),e({connected:!1,error:"No response from connection test",troubleshooting:"Extension messaging error. Try reloading the page or restarting the browser."});return}if(t.received===!0&&!t.success&&!t.error){console.error("Received incomplete response from background script:",t),e({connected:!1,error:"Incomplete response from extension",troubleshooting:"Try restarting the browser or reinstalling the extension."});return}t.success?(console.log("Ollama connection successful"),e({connected:!0,port:((s=t.data)==null?void 0:s.port)||11434})):(console.error("Ollama connection failed:",t.error),e({connected:!1,error:t.error||"Unknown error",troubleshooting:t.troubleshooting||"Make sure Ollama is running on your computer"}))})})}catch(e){return console.error("Error checking Ollama connection:",e),{connected:!1,error:e.message,troubleshooting:"Error checking Ollama connection"}}}async setJob(e){this.job=e,console.log("current job infos: ",this.job),this.conversationHistoryKey="conversation_history_".concat(this.job.currentJob.company,"_").concat(this.job.currentJob.jobId),console.log("conversationHistoryKey set",this.conversationHistoryKey)}setSystemContext(e=null){let r=new Date().toISOString().split("T")[0];e||(e="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- Return ONLY the answer as a plain string. DO NOT add explanations or additional text.\n- If the question requires a number (e.g., 'Zahl angeben' or 'give number'), return ONLY a number.\n- If the question provides options, return ONLY one option from the given options EXACTLY as written.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive but realistic number based on user context.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- If asked about salary, use the user's expected salary or provide a reasonable estimate based on job market data.\n- Use today date: ".concat(r,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversationHistory=[{role:"system",content:e}],this.conversationHistoryCompany=[...this.conversationHistory]}async setUserContext(e){try{await this.parseUserContext(e),console.log("Generating embeddings for user context...");let r=this.calculateDataHash(this.userData);if(await this.getStoredHash()===r&&Object.keys(this.memory.data).length>0){console.log("Embeddings are already up-to-date. Skipping generation.");return}this.memory.data={};for(let[s,n]of Object.entries(this.userData))if(typeof n=="object"&&n!==null)for(let[o,a]of Object.entries(n))await this.memory.addEntry("".concat(s,".").concat(o),String(a));else await this.memory.addEntry(s,String(n));await this.storeDataHash(r),console.log("Embeddings generated successfully")}catch(r){console.error("Error setting user context:",r)}}async parseUserContext(e){try{return this.userData=x.load(e),console.log("User context parsed successfully."),console.log(this.userData),!0}catch(r){return console.error("Error parsing user context:",r),!1}}calculateDataHash(e){try{let r=JSON.stringify(e);return r.length+"_"+r.slice(0,100)}catch(r){return console.error("Error calculating data hash:",r),Date.now().toString()}}async storeDataHash(e){return new Promise(r=>{chrome.storage.local.set({userDataHash:e},()=>{r(!0)})})}async getStoredHash(){return new Promise(e=>{chrome.storage.local.get("userDataHash",r=>{e(r.userDataHash||"")})})}async saveConversationHistory(){if(console.log("saving AI conversation history"),this.conversationHistoryKey)try{console.log("saved conversation history:",this.conversationHistoryCompany);let e=this.conversationHistoryCompany.some(s=>s.role==="user"),r=this.conversationHistoryCompany.some(s=>s.role==="assistant");if(!e||!r){console.warn("Incomplete conversation history, missing user or assistant message");return}let t=JSON.parse(JSON.stringify(this.conversationHistoryCompany));chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{key:this.conversationHistoryKey,company:this.job.currentJob.company,title:this.job.currentJob.title,jobId:this.job.currentJob.jobId,conversation:t,timestamp:new Date().toISOString()}}),console.log("Conversation sent to popup for storage")}catch(e){console.error("Error saving conversation history:",e)}else console.warn("Cannot save conversation history: conversationHistoryKey is not set")}async makeOllamaRequest(e,r){try{return console.log("Making Ollama request to ".concat(e)),new Promise((t,s)=>{let n=setTimeout(()=>{s(new Error("Ollama request timeout"))},2e4);chrome.runtime.sendMessage({action:"callOllama",endpoint:e,data:r},o=>{if(clearTimeout(n),console.log("Received Ollama response:",o),!o){console.error("No response received from Ollama"),s(new Error("No response received from Ollama"));return}if(o.received===!0&&!o.success&&!o.error){console.error("Received incomplete response from background script:",o),s(new Error("Incomplete response from extension"));return}o.success?t(o.data):s(new Error(o.error||"Failed to get response from Ollama"))})})}catch(t){throw console.error("Error in makeOllamaRequest:",t),t}}async answerWithOptions(e,r){try{let n=(await this.memory.search(e,1)).map(i=>"".concat(i,": ").concat(this.memory.data[i].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",o=r.map(i=>'"'.concat(i,'"')).join(", "),a="Form Question: ".concat(e," ?\nAvailable Options: [").concat(o,"]\nUser Context Data Hint: ").concat(n,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");this.conversationHistory.push({role:"user",content:a}),this.conversationHistoryCompany.push({role:"user",content:a});let u=this.isExperienceQuestion(e);console.log("Attempting to connect to Ollama server...");try{let i=await this.makeOllamaRequest("chat",{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}});console.log("Response received successfully");let c=i.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim(),d;if(r.includes(c))d=c;else{let l=null,h=-1;for(let y of r){let g=y.toLowerCase(),p=c.toLowerCase();if(g.includes(p)||p.includes(g)){let O=this.calculateSimilarity(g,p);O>h&&(h=O,l=y)}}d=h>.5?l:r[1]}return this.conversationHistoryCompany.push({role:"assistant",content:d}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],d}catch(i){throw console.error("API error in answerWithOptions:",i),new Error("Could not get a response from Ollama. Please check your connection and try again.")}}catch(t){throw console.error("Error details:",{name:t.name,message:t.message,stack:t.stack,cause:t.cause}),new Error("Failed to answer question. Please try again later.")}}async answerWithNoOptions(e){var r,t,s,n;try{let u=(await this.memory.search(e,3)).map(c=>"".concat(c,": ").concat(this.memory.data[c].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",i="Form Question: ".concat(e," ?\nUser Context Data Hint: ").concat(u,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(((t=(r=this.userData)==null?void 0:r.personal_information)==null?void 0:t.phone)||"","\n- If the question asks for a salary, use the user's expected salary ").concat(((n=(s=this.userData)==null?void 0:s.personal_information)==null?void 0:n.desired_salary)||""," or provide a reasonable estimate based on job market data\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user");this.conversationHistory.push({role:"user",content:i}),this.conversationHistoryCompany.push({role:"user",content:i});let v=this.isExperienceQuestion(e);console.log("Attempting to connect to Ollama server...");try{let c=await this.makeOllamaRequest("chat",{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}});console.log("Response received successfully");let l=c.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim();if(this.isNumberQuestion(e)){let h=l.match(/\d+(?:\.\d+)?/);h&&(v?l=parseFloat(h[0])<1?"1":h[0]:l=h[0])}if(l)return this.conversationHistoryCompany.push({role:"assistant",content:l}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],l;throw new Error("No valid answer candidate generated")}catch(c){throw console.error("API error:",c),new Error("Could not get a response from Ollama: "+c.message)}}catch(o){throw console.error("Error details:",{name:o.name,message:o.message,stack:o.stack,cause:o.cause}),o}}isNumberQuestion(e){return["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(t=>e.toLowerCase().includes(t))}isExperienceQuestion(e){let r=e.toLowerCase();return["experience","years","year","erfahrung","jahre","jahr","how long","wie lange","worked with","gearbeitet mit"].some(s=>r.includes(s))}calculateSimilarity(e,r){let t=new Set(e),s=new Set(r);return new Set([...t].filter(o=>s.has(o))).size/Math.max(t.size,s.size)}async answerQuestion(e,r=null){try{let t=await chrome.storage.local.get("userProfileYaml");if(t.userProfileYaml){if(!await this.parseUserContext(t.userProfileYaml))throw new Error("Failed to parse user profile YAML");let n=this.calculateDataHash(this.userData);(await this.getStoredHash()!==n||Object.keys(this.memory.data).length===0)&&(console.log("Embeddings need updating, generating new ones..."),await this.setUserContext(t.userProfileYaml))}return r&&r.length>0?await this.answerWithOptions(e,r):await this.answerWithNoOptions(e)}catch(t){throw console.error("Error in answerQuestion:",t),t}}},S=w;export{S as default};
