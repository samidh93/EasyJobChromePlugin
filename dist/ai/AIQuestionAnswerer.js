var b=class{constructor(){this.data={}}async addEntry(e,o){if(o)try{let t=await new Promise((s,l)=>{chrome.runtime.sendMessage({action:"getEmbeddings",text:o},r=>{chrome.runtime.lastError?l(new Error(chrome.runtime.lastError.message)):s(r)})});if(!t.success)throw new Error(t.error||"Unknown error generating embedding");this.data[e]={text:o,embedding:t.data.embedding}}catch(t){console.error("Error generating embedding:",t)}}async search(e,o=3){if(!this.data||Object.keys(this.data).length===0)return[];try{let t=await new Promise((r,a)=>{chrome.runtime.sendMessage({action:"getEmbeddings",text:e},y=>{chrome.runtime.lastError?a(new Error(chrome.runtime.lastError.message)):r(y)})});if(!t.success)throw new Error(t.error||"Unknown error generating embedding for search");let s=t.data.embedding,l={};for(let[r,a]of Object.entries(this.data)){let y=this.cosineSimilarity(a.embedding,s);l[r]=y}return Object.entries(l).sort(([,r],[,a])=>a-r).slice(0,o).map(([r])=>r)}catch(t){return console.error("Error in search:",t),[]}}cosineSimilarity(e,o){let t=e.reduce((r,a,y)=>r+a*o[y],0),s=Math.sqrt(e.reduce((r,a)=>r+a*a,0)),l=Math.sqrt(o.reduce((r,a)=>r+a*a,0));return t/(s*l)}},O=b;import k from"js-yaml";var v=class{constructor(){this.model="qwen2.5:3b",this.memory=new O,this.conversationHistory=[],this.setSystemContext(),this.job=null,this.userData=null,this.ollamaUrl="http://localhost:11434"}async checkOllamaConnection(){try{return console.log("Checking Ollama connection..."),new Promise(e=>{let o=setTimeout(()=>{console.error("Ollama connection check timed out"),e({connected:!1,error:"Connection timeout",troubleshooting:"Ollama connection check timed out. Make sure Ollama is running and not overloaded."})},1e4);chrome.runtime.sendMessage({action:"testOllama"},t=>{var s;if(clearTimeout(o),console.log("Ollama connection check response:",t),!t){console.error("Ollama connection check returned no response"),e({connected:!1,error:"No response from connection test",troubleshooting:"Extension messaging error. Try reloading the page or restarting the browser."});return}if(t.received===!0&&!t.success&&!t.error){console.error("Received incomplete response from background script:",t),e({connected:!1,error:"Incomplete response from extension",troubleshooting:"Try restarting the browser or reinstalling the extension."});return}t.success?(console.log("Ollama connection successful"),e({connected:!0,port:((s=t.data)==null?void 0:s.port)||11434})):(console.error("Ollama connection failed:",t.error),e({connected:!1,error:t.error||"Unknown error",troubleshooting:t.troubleshooting||"Make sure Ollama is running on your computer"}))})})}catch(e){return console.error("Error checking Ollama connection:",e),{connected:!1,error:e.message,troubleshooting:"Error checking Ollama connection"}}}async setJob(e){this.job=e,console.log("current job infos: ",this.job),this.conversationHistoryKey="conversation_history_".concat(this.job.currentJob.company,"_").concat(this.job.currentJob.jobId),console.log("conversationHistoryKey set",this.conversationHistoryKey)}setSystemContext(e=null){let o=new Date().toISOString().split("T")[0];e||(e="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- Return ONLY the answer as a plain string. DO NOT add explanations or additional text.\n- If the question requires a number (e.g., 'Zahl angeben' or 'give number'), return ONLY a number.\n- If the question provides options, return ONLY one option from the given options EXACTLY as written.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive but realistic number based on user context.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- If asked about salary, use the user's expected salary or provide a reasonable estimate based on job market data.\n- Use today date: ".concat(o,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversationHistory=[{role:"system",content:e}],this.conversationHistoryCompany=[...this.conversationHistory]}async setUserContext(e){try{this.userData=k.load(e),console.log("User context loaded successfully."),console.log(this.userData);for(let[o,t]of Object.entries(this.userData))if(typeof t=="object"&&t!==null)for(let[s,l]of Object.entries(t))await this.memory.addEntry("".concat(o,".").concat(s),String(l));else await this.memory.addEntry(o,String(t))}catch(o){console.error("Error setting user context:",o)}}async saveConversationHistory(){if(console.log("saving AI conversation history"),this.conversationHistoryKey)try{console.log("saved conversation history:",this.conversationHistoryCompany);let e=this.conversationHistoryCompany.some(s=>s.role==="user"),o=this.conversationHistoryCompany.some(s=>s.role==="assistant");if(!e||!o){console.warn("Incomplete conversation history, missing user or assistant message");return}let t=JSON.parse(JSON.stringify(this.conversationHistoryCompany));chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{key:this.conversationHistoryKey,company:this.job.currentJob.company,title:this.job.currentJob.title,jobId:this.job.currentJob.jobId,conversation:t,timestamp:new Date().toISOString()}}),console.log("Conversation sent to popup for storage")}catch(e){console.error("Error saving conversation history:",e)}else console.warn("Cannot save conversation history: conversationHistoryKey is not set")}async makeOllamaRequest(e,o){try{return console.log("Making Ollama request to ".concat(e)),new Promise((t,s)=>{let l=setTimeout(()=>{s(new Error("Ollama request timeout"))},2e4);chrome.runtime.sendMessage({action:"callOllama",endpoint:e,data:o},r=>{if(clearTimeout(l),console.log("Received Ollama response:",r),!r){console.error("No response received from Ollama"),s(new Error("No response received from Ollama"));return}if(r.received===!0&&!r.success&&!r.error){console.error("Received incomplete response from background script:",r),s(new Error("Incomplete response from extension"));return}r.success?t(r.data):s(new Error(r.error||"Failed to get response from Ollama"))})})}catch(t){throw console.error("Error in makeOllamaRequest:",t),t}}async answerWithOptions(e,o){try{let l=(await this.memory.search(e,1)).map(n=>"".concat(n,": ").concat(this.memory.data[n].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",r=o.map(n=>'"'.concat(n,'"')).join(", "),a="Form Question: ".concat(e," ?\nAvailable Options: [").concat(r,"]\nUser Context Data Hint: ").concat(l,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");this.conversationHistory.push({role:"user",content:a}),this.conversationHistoryCompany.push({role:"user",content:a});let y=this.isExperienceQuestion(e),w=await this.checkOllamaConnection();if(!w.connected){console.error("Ollama not connected:",w.error),console.log("Using fallback mechanism due to connection error");let n;if(y){let h=o.filter(m=>{let c=m.toLowerCase();return/\d+/.test(c)||c.includes("year")||c.includes("jahr")||c.includes("experience")||c.includes("erfahrung")});if(h.length>0){let m=Math.floor(h.length/2);n=h[m]}else n=o.length>1?o[1]:o[0]}else n=o.length>1?o[1]:o[0];return console.log('Using fallback option: "'.concat(n,'" for question: ').concat(e)),this.conversationHistoryCompany.push({role:"assistant",content:n}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],n}console.log("Attempting to connect to Ollama server...");try{let n=await this.makeOllamaRequest("chat",{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}});console.log("Response received successfully");let m=n.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim(),c;if(o.includes(m))c=m;else{let u=null,p=-1;for(let i of o){let d=i.toLowerCase(),f=m.toLowerCase();if(d.includes(f)||f.includes(d)){let g=this.calculateSimilarity(d,f);g>p&&(p=g,u=i)}}c=p>.5?u:o[1]}return this.conversationHistoryCompany.push({role:"assistant",content:c}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],c}catch(n){console.error("API error in answerWithOptions:",n);let h;if(y){let m=o.filter(c=>{let u=c.toLowerCase();return/\d+/.test(u)||u.includes("year")||u.includes("jahr")||u.includes("experience")||u.includes("erfahrung")});if(m.length>0){let c=Math.floor(m.length/2);h=m[c]}else h=o.length>1?o[1]:o[0]}else h=o.length>1?o[1]:o[0];return console.log('Using fallback option: "'.concat(h,'" for question: ').concat(e)),this.conversationHistoryCompany.push({role:"assistant",content:h}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],h}}catch(t){return console.error("Error details:",{name:t.name,message:t.message,stack:t.stack,cause:t.cause}),o.length>1?o[1]:o[0]}}async answerWithNoOptions(e){var o,t,s,l,r,a,y,w;try{let m=(await this.memory.search(e,3)).map(i=>"".concat(i,": ").concat(this.memory.data[i].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",c="Form Question: ".concat(e," ?\nUser Context Data Hint: ").concat(m,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(((t=(o=this.userData)==null?void 0:o.personal_information)==null?void 0:t.phone)||"","\n- If the question asks for a salary, use the user's expected salary ").concat(((l=(s=this.userData)==null?void 0:s.personal_information)==null?void 0:l.desired_salary)||""," or provide a reasonable estimate based on job market data\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user");this.conversationHistory.push({role:"user",content:c}),this.conversationHistoryCompany.push({role:"user",content:c});let u=this.isExperienceQuestion(e),p=await this.checkOllamaConnection();if(!p.connected){console.error("Ollama not connected:",p.error),console.log("Using fallback mechanism due to connection error");let i;return u?i="5":e.toLowerCase().includes("gehalt")||e.toLowerCase().includes("salary")?i=((a=(r=this.userData)==null?void 0:r.personal_information)==null?void 0:a.desired_salary)||"90000":this.isNumberQuestion(e)?i="3":e.toLowerCase().includes("phone")||e.toLowerCase().includes("telefon")?i=((w=(y=this.userData)==null?void 0:y.personal_information)==null?void 0:w.phone)||"+1234567890":i="Yes",console.log("Using fallback answer: ".concat(i," for question: ").concat(e)),this.conversationHistoryCompany.push({role:"assistant",content:i}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],i}console.log("Attempting to connect to Ollama server...");try{let i=await this.makeOllamaRequest("chat",{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}});console.log("Response received successfully");let f=i.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim();if(this.isNumberQuestion(e)){let g=f.match(/\d+(?:\.\d+)?/);g&&(u?f=parseFloat(g[0])<1?"1":g[0]:f=g[0])}if(f)return this.conversationHistoryCompany.push({role:"assistant",content:f}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],f;throw new Error("No valid answer candidate generated")}catch(i){console.error("API error:",i);let d;return u?d="5":e.toLowerCase().includes("gehalt")||e.toLowerCase().includes("salary")?d="90000":this.isNumberQuestion(e)?d="3":d="Yes",console.log("Using fallback answer: ".concat(d," for question: ").concat(e)),this.conversationHistoryCompany.push({role:"assistant",content:d}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],d}}catch(n){return console.error("Error details:",{name:n.name,message:n.message,stack:n.stack,cause:n.cause}),this.isExperienceQuestion(e)?"5":"Yes"}}isNumberQuestion(e){return["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(t=>e.toLowerCase().includes(t))}isExperienceQuestion(e){let o=e.toLowerCase();return["experience","years","year","erfahrung","jahre","jahr","how long","wie lange","worked with","gearbeitet mit"].some(s=>o.includes(s))}calculateSimilarity(e,o){let t=new Set(e),s=new Set(o);return new Set([...t].filter(r=>s.has(r))).size/Math.max(t.size,s.size)}async answerQuestion(e,o=null){try{let t=await chrome.storage.local.get("userProfileYaml");return t.userProfileYaml&&await this.setUserContext(t.userProfileYaml),o&&o.length>0?await this.answerWithOptions(e,o):await this.answerWithNoOptions(e)}catch(t){console.error("Error getting yaml from storage:",t)}}},I=v;export{I as default};
