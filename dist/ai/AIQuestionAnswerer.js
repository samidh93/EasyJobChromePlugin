var A=class{constructor(e=null){this.data={},this.directEmbeddingFunction=e,this.hasTriedLoading=!1,this.preloadEmbeddings()}async addEntry(e,o){if(!o)return!1;try{console.log("Adding entry for key: ".concat(e));let t=await this.getEmbedding(o);return t&&t.success&&t.data&&t.data.embedding?(this.data[e]={text:o,embedding:t.data.embedding},console.log("Successfully added embedding for key: ".concat(e," (Store size: ").concat(Object.keys(this.data).length,")")),!0):(console.warn("Failed to generate embedding for key: ".concat(e)),!1)}catch(t){return console.error("Error adding entry to memory store:",t),!1}}async loadStoredEmbeddings(){return this.hasTriedLoading?(console.log("Already tried loading embeddings. Current size: ".concat(Object.keys(this.data).length)),Object.keys(this.data).length>0):(console.log("Attempting to load stored embeddings from Chrome storage..."),new Promise(e=>{chrome.storage.local.get("storedEmbeddings",o=>{o.storedEmbeddings&&Object.keys(o.storedEmbeddings).length>0?(this.data=o.storedEmbeddings,console.log("Loaded embeddings from storage, found",Object.keys(this.data).length,"entries"),this.hasTriedLoading=!0,e(!0)):(console.log("No stored embeddings found in Chrome storage"),this.hasTriedLoading=!0,e(!1))})}))}flattenEmbeddingData(e){let o={};for(let[a,l]of Object.entries(e))if(l.embedding&&Array.isArray(l.embedding)){let g=l.embedding.map(m=>parseFloat(m.toFixed(5)));o[a]={text:l.text,embedding:g}}else o[a]=l;let t=JSON.stringify(e).length,n=JSON.stringify(o).length,s=(100-n/t*100).toFixed(2);return console.log("Flattened embeddings: ".concat(t," bytes \u2192 ").concat(n," bytes (").concat(s,"% reduction)")),o}async saveAllEmbeddings(){return new Promise((e,o)=>{if(Object.keys(this.data).length===0){console.warn("No embeddings to save to storage"),e(!1);return}console.log("Saving ".concat(Object.keys(this.data).length," embeddings to Chrome storage"));let t=this.flattenEmbeddingData(this.data),n=JSON.stringify(t).length;console.log("Storage payload size: ".concat(n," bytes (").concat((n/(1024*1024)).toFixed(2)," MB)")),chrome.storage.local.set({storedEmbeddings:t},()=>{if(chrome.runtime.lastError){let s=chrome.runtime.lastError;console.error("Error saving embeddings to storage:",s),s.message&&(s.message.includes("quota")||s.message.includes("QUOTA")||s.message.includes("limit")||s.message.includes("space"))&&(console.error("Storage quota exceeded. Data size: ".concat(n," bytes.")),console.error("Consider reducing the amount of data or implementing chunking.")),o(s)}else console.log("Successfully saved ".concat(Object.keys(t).length," embeddings to storage")),e(!0)})})}async search(e,o=3){if(console.log('Searching for related info: "'.concat(e,'" (top ').concat(o," results)")),Object.keys(this.data).length===0&&console.warn("Memory store is empty before loading attempt, checking storage..."),Object.keys(this.data).length===0&&!await this.loadStoredEmbeddings())return console.warn("Memory store is empty, no data to search. Check if YAML was properly loaded."),chrome.storage.local.get(null,function(s){console.log("All chrome storage items:",Object.keys(s)),console.log("Storage size:",JSON.stringify(s).length,"bytes"),s.userProfile&&console.log("User profile exists in storage but no embeddings found")}),[];let t=e.toLowerCase();if(t.includes("salary")||t.includes("compensation")||t.includes("earn")||t.includes("pay")){if(this.data.salary_information)return console.log("Found direct match for salary query"),["salary_information"];let n=Object.keys(this.data).filter(s=>s.toLowerCase().includes("salary")||this.data[s].text&&this.data[s].text.toLowerCase().includes("salary"));if(n.length>0)return console.log("Found ".concat(n.length," direct salary-related keys")),n.slice(0,o)}if(t.includes("phone")||t.includes("contact")||t.includes("call")){if(this.data.contact_information)return console.log("Found direct match for contact query"),["contact_information"];let n=Object.keys(this.data).filter(s=>s.toLowerCase().includes("phone")||s.toLowerCase().includes("contact")||s.toLowerCase().includes("email"));if(n.length>0)return console.log("Found ".concat(n.length," direct contact-related keys")),n.slice(0,o)}if((t.includes("location")||t.includes("where")||t.includes("city")||t.includes("country"))&&this.data.location_information)return console.log("Found direct match for location query"),["location_information"];if((t.includes("experience")||t.includes("years")||t.includes("work history")||t.includes("background"))&&this.data.experience_summary)return console.log("Found direct match for experience query"),["experience_summary"];try{let n=await this.getEmbedding(e);if(!n||!n.success||!n.data||!n.data.embedding)return console.error("Failed to generate embedding for search query"),[];let s=n.data.embedding,a={};for(let[g,m]of Object.entries(this.data)){let p=this.cosineSimilarity(m.embedding,s);a[g]=p}let l=Object.keys(a).sort((g,m)=>a[m]-a[g]).slice(0,o);return console.log("Found ".concat(l.length," relevant keys: ").concat(l.join(", "))),l}catch(n){return console.error("Error searching memory store:",n),[]}}cosineSimilarity(e,o){if(!e||!o||e.length!==o.length)return 0;let t=0,n=0,s=0;for(let a=0;a<e.length;a++)t+=e[a]*o[a],n+=e[a]*e[a],s+=o[a]*o[a];return n=Math.sqrt(n),s=Math.sqrt(s),n===0||s===0?0:t/(n*s)}async clearAllData(e=!0){console.log("Clearing memory store data");let o=Object.keys(this.data).length;return this.data={},this.hasTriedLoading=!1,e?(console.log("Also clearing embeddings from Chrome storage"),new Promise(t=>{chrome.storage.local.remove("storedEmbeddings",()=>{chrome.runtime.lastError?(console.error("Error clearing embeddings from storage:",chrome.runtime.lastError),t(!1)):(console.log("Successfully cleared ".concat(o," embeddings from memory and storage")),t(!0))})})):(console.log("Successfully cleared ".concat(o," embeddings from memory only")),!0)}async getStoredEmbeddingsCount(){return new Promise(e=>{chrome.storage.local.get("storedEmbeddings",o=>{if(chrome.runtime.lastError)console.error("Error getting stored embeddings count:",chrome.runtime.lastError),e(0);else if(o.storedEmbeddings){let t=Object.keys(o.storedEmbeddings).length;console.log("Found ".concat(t," embeddings in Chrome storage")),e(t)}else console.log("No embeddings found in Chrome storage"),e(0)})})}async getEmbedding(e){if(this.directEmbeddingFunction){console.log("Using direct embedding function");try{let o=performance.now(),t=await this.directEmbeddingFunction(e),n=performance.now();if(console.log("Embedding generated in ".concat((n-o).toFixed(2),"ms")),t&&t.success&&t.data&&t.data.embedding){let s=t.data.embedding;console.log("Embedding dimensions: ".concat(s.length)),console.log("Embedding sample: [".concat(s.slice(0,3).map(a=>a.toFixed(5)).join(", "),"...]"))}return t}catch(o){throw console.error("Error using direct embedding function:",o),o}}return new Promise((o,t)=>{console.log("Requesting embedding from background script for text (length: ".concat(e.length,'): "').concat(e.substring(0,50),'..."'));let n=performance.now();chrome.runtime.sendMessage({action:"getEmbeddings",text:e},s=>{let a=performance.now();if(chrome.runtime.lastError)console.error("Embedding request failed after ".concat((a-n).toFixed(2),"ms:"),chrome.runtime.lastError),t(new Error(chrome.runtime.lastError.message));else{if(console.log("Embedding received from API in ".concat((a-n).toFixed(2),"ms")),s&&s.success&&s.data&&s.data.embedding){let l=s.data.embedding;console.log("Embedding dimensions: ".concat(l.length)),console.log("Embedding sample: [".concat(l.slice(0,3).map(g=>g.toFixed(5)).join(", "),"...]"))}else console.warn("Received invalid embedding response:",s);o(s)}})})}async preloadEmbeddings(){console.log("Preloading embeddings from storage into memory...");try{let e=await this.loadStoredEmbeddings();return console.log(e?"Successfully preloaded ".concat(Object.keys(this.data).length," embeddings into memory"):"No embeddings found to preload"),e}catch(e){return console.error("Error preloading embeddings:",e),!1}}},N=new A,y=N;var x=class{constructor(){this.conversation_history=[],this.conversation_history_company=[],this.savedConversations=[],this.setSystemContext()}setSystemContext(e=null){let o=new Date().toISOString().split("T")[0];e||(e="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- Return ONLY the answer as a plain string. DO NOT add explanations or additional text.\n- If the question requires a number (e.g., 'Zahl angeben' or 'give number'), return ONLY a number.\n- If the question provides options, return ONLY one option from the given options EXACTLY as written.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive but realistic number based on user context.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- If asked about salary, use the user's expected salary or provide a reasonable estimate based on job market data.\n- Use today date: ".concat(o,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversation_history=[{role:"system",content:e}],this.conversation_history_company=[...this.conversation_history]}addUserMessage(e){let o={role:"user",content:e};this.conversation_history.push(o),this.conversation_history_company.push(o)}addAssistantResponse(e){let o={role:"assistant",content:e};this.conversation_history.push(o),this.conversation_history_company.push(o)}finalizeAndSaveConversation(e){this.conversation_history.length>1&&(console.log("Finalizing conversation with ".concat(this.conversation_history.length," messages")),this.savedConversations.push({timestamp:new Date().toISOString(),job:e,conversation:JSON.parse(JSON.stringify(this.conversation_history))}),console.log("Saved conversation. Total saved: ".concat(this.savedConversations.length))),this.resetConversations()}getSavedConversations(e){return this.savedConversations.filter(o=>{var t;return!e||((t=o.job)==null?void 0:t.title)===e}).map(o=>o.conversation)}resetConversations(){this.conversation_history=this.conversation_history.slice(0,1),this.conversation_history_company=[],console.log("Conversation history reset for new form")}getCurrentHistory(){return JSON.parse(JSON.stringify(this.conversation_history))}buildOptionsPrompt(e,o,t){let n=o.map(l=>'"'.concat(l,'"')).join(", "),s=e.toLowerCase().includes("landesvorwahl")||e.toLowerCase().includes("country code")||e.toLowerCase().includes("country")||o.some(l=>l.includes("(+")&&l.includes(")")),a="Form Question: ".concat(e," ?\nAvailable Options: [").concat(n,"]\nUser Context Data Hint: ").concat(t,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");return s&&(a+='\nADDITIONAL GUIDANCE: \n- If this is a country selection question and the user is from Germany, select "Deutschland (+49)"\n- Country names may be in German (e.g., "Deutschland" for Germany, "Vereinigte Staaten" for USA)\n- Always choose the option that matches the user\'s country, paying attention to both the name and country code'),a}buildNoOptionsPrompt(e,o,t="",n=""){return"Form Question: ".concat(e," ?\nUser Context Data Hint: ").concat(o,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(t,"\n- If the question asks for a salary, use the user's expected salary ").concat(n," or provide a reasonable estimate based on job market data\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user")}},u=new x;import F from"js-yaml";var O=class{constructor(){}parseUserContext(e){try{if(!e)return null;let o=F.load(e);return console.log("YAML parsed successfully"),o}catch(o){return console.error("Error parsing YAML:",o),null}}countFields(e){let o=0,t=n=>{for(let[s,a]of Object.entries(n))typeof a=="object"&&a!==null&&!Array.isArray(a)?t(a):o++};return t(e),o}formatValueForEmbedding(e,o=""){if(e==null)return"";let t=o.toLowerCase();return t.includes("salary")||t.includes("compensation")?"Salary: ".concat(e,", Expected salary: ").concat(e,", Desired compensation: ").concat(e,", Annual salary: ").concat(e):t.includes("phone")?"Phone number: ".concat(e,", Contact number: ").concat(e,", Tel: ").concat(e):t.includes("visa")?"Visa required: ".concat(e,", Visa status: ").concat(e,", Work permit: ").concat(e):Array.isArray(e)?e.map(n=>this.formatValueForEmbedding(n)).join(", "):typeof e=="object"?Object.entries(e).map(([n,s])=>{if(n.startsWith("_")||s===null||s===void 0)return null;let a=this.formatValueForEmbedding(s,n);return a?"".concat(n,": ").concat(a):null}).filter(Boolean).join(", "):String(e)}async processUserContext(e,o=null){try{if(!e)return console.error("No YAML content provided"),{success:!1,error:"No YAML content provided"};let t=this.parseUserContext(e);if(!t)return console.error("Failed to parse YAML content"),{success:!1,error:"Failed to parse YAML content"};console.log("User context parsed successfully, processing fields for embeddings");let n=new TextEncoder().encode(e).length;console.log("YAML content size: ".concat(n," bytes (").concat((n/1024).toFixed(2)," KB)"));let s=this.countFields(t),a=0;console.log("Total fields to process: ".concat(s));let l=[];for(let[i,r]of Object.entries(t))if(typeof r=="object"&&r!==null&&!Array.isArray(r)){for(let[d,f]of Object.entries(r)){let E="".concat(i,".").concat(d),v=this.formatValueForEmbedding(f,d);l.push({key:E,value:v})}if(i==="personal_information"){if(r.salary&&l.push({key:"salary_information",value:"Expected salary: ".concat(r.salary,", Desired compensation: ").concat(r.salary,", Annual salary expectation: ").concat(r.salary,", Salary requirement: ").concat(r.salary,", Compensation expectation: ").concat(r.salary)}),r.phone){let d=r.phone_prefix||"";l.push({key:"contact_information",value:"Phone number: ".concat(d).concat(r.phone,", Email: ").concat(r.email||"",", Contact details: ").concat(d).concat(r.phone," and ").concat(r.email||"")})}(r.country||r.city)&&l.push({key:"location_information",value:"Located in ".concat(r.city||"",", ").concat(r.country||"",", Location: ").concat(r.city||"",", ").concat(r.country||"")})}}else{let d=this.formatValueForEmbedding(r,i);l.push({key:i,value:d})}if(console.log("Prepared ".concat(l.length," fields to process for embeddings")),t.experiences&&Array.isArray(t.experiences))try{let i=/(\d{4})\s*-\s*(Present|\d{4})/i,r="";t.experiences.forEach(d=>{d.employment_period&&(r+="".concat(d.position||"Role"," at ").concat(d.company||"Company"," (").concat(d.employment_period,"). "))}),r&&l.push({key:"experience_summary",value:"Professional experience: ".concat(r," Years of experience in software development, engineering, and related fields.")})}catch(i){console.warn("Error creating experience summary:",i)}let g=JSON.stringify(l).length;console.log("Estimated data size before embeddings: ".concat(g," bytes (").concat((g/1024).toFixed(2)," KB)"));let m=g>1e6,p=m?10:l.length;m&&console.log("Using chunking strategy for large dataset (".concat(p," fields per chunk)"));let w=5,c=Math.ceil(l.length/w);if(console.log("Processing embeddings in ".concat(c," batches of ").concat(w)),m)try{await y.clearAllData(),console.log("Cleared existing data before processing chunks")}catch(i){console.warn("Error clearing existing data:",i)}let h=0;for(let i=0;i<c;i++){let r=i*w,d=Math.min((i+1)*w,l.length),f=l.slice(r,d);console.log("Processing batch ".concat(i+1,"/").concat(c," (").concat(f.length," fields)"));let E=f.map(b=>y.addEntry(b.key,b.value)),C=(await Promise.allSettled(E)).filter(b=>b.status==="rejected"||b.status==="fulfilled"&&!b.value);if(C.length>0&&console.warn("".concat(C.length," embeddings failed in batch ").concat(i+1)),a+=f.length,o){let b=Math.round(a/s*100);o({progress:b,message:"Processing batch ".concat(i+1,"/").concat(c," (").concat(a,"/").concat(s," fields)")})}if(m&&(i+1)%Math.ceil(p/w)===0)try{console.log("Saving chunk to storage after batch ".concat(i+1,"...")),await y.saveAllEmbeddings(),console.log("Clearing memory store after saving chunk");let b=Object.keys(y.data).length;y.data={},console.log("Cleared ".concat(b," entries from memory"))}catch(b){if(console.error("Error saving chunk to storage:",b),h++,h>=3)return console.error("Multiple storage errors encountered, aborting processing"),o&&o({progress:0,message:"Error: Storage quota exceeded. Try reducing YAML complexity."}),{success:!1,error:"Storage quota exceeded",details:"The profile is too large to store with embeddings. Try simplifying your profile or using fewer fields."}}i<c-1&&await new Promise(b=>setTimeout(b,100))}console.log("Embedding generation complete, saving to storage...");try{if(Object.keys(y.data).length>0){let r=await y.saveAllEmbeddings();console.log("Save result: ".concat(r?"Success":"Failed"))}else m&&console.log("No final chunk to save (already saved in chunks)");let i=m?await y.getStoredEmbeddingsCount():Object.keys(y.data).length;console.log("Final storage contains ".concat(i," entries"))}catch(i){if(console.error("Error saving embeddings:",i),i&&i.message&&(i.message.includes("quota")||i.message.includes("QUOTA")||i.message.includes("limit")||i.message.includes("space")))return o&&o({progress:0,message:"Error: Storage quota exceeded. Try reducing YAML complexity."}),{success:!1,error:"Storage quota exceeded",details:"The profile is too large to store with embeddings. Try simplifying your profile."}}return o&&o({progress:100,message:"All fields processed"}),{success:!0,data:t}}catch(t){return console.error("Error processing user context:",t),o&&o({progress:0,message:"Error: ".concat(t.message)}),{success:!1,error:t.message}}}},L=new O;var S=class{constructor(e=null){this.apiEndpoint=e||"http://localhost:11434/api/generate",this.model="qwen2.5:3b",this.job=null,this.user_data=null,this.jobInfo=null}setJob(e){this.job=e,console.log("Job information set:",e);let o=e&&e.currentJob?e.currentJob:null;o?(this.jobInfo={company:o.company||"",title:o.title||"",location:o.location||"",description:o.description||""},console.log("Creating conversation context for ".concat(this.jobInfo.company))):console.log("No job information provided")}async setUserContext(e,o=null){try{let t=await L.processUserContext(e,o);return t.success&&(this.user_data=t.data),{success:t.success,error:t.error||null}}catch(t){return console.error("Error in setUserContext:",t),o&&o({progress:0,message:"Error: ".concat(t.message)}),{success:!1,error:t.message}}}async answerQuestion(e,o=null){try{return console.log("Answering question:",e),console.log("Options:",o),console.log(this.user_data?"In-memory user data cache: Available":"In-memory user data cache: Not available (will use embedding search from storage)"),o&&Array.isArray(o)&&o.length>0?await this.answerWithOptions(e,o):await this.answerWithNoOptions(e)}catch(t){return console.error("Error in answerQuestion:",t),"Error processing question"}}async answerWithOptions(e,o){var t,n,s,a,l,g;try{if(console.log('Getting an answer for "'.concat(e,'" with options:'),o),!o||!Array.isArray(o)||o.length===0)return console.warn("Options array is empty or invalid, falling back to answerWithNoOptions"),this.answerWithNoOptions(e);if(e.toLowerCase().includes("phone country")||e.toLowerCase().includes("country code")||e.toLowerCase().includes("landesvorwahl")){console.log("Found direct match for contact query");let i=((t=this.user_data)==null?void 0:t.personal_information)||{};if(i.country){let r=i.country,d=null;for(let f of o)if(f.toLowerCase().includes(r.toLowerCase())){d=f;break}if(d)return console.log("Found country match: ".concat(d)),u.addAssistantResponse(d),this.sendConversationUpdate(),d;if(r.toLowerCase().includes("german")||r.toLowerCase().includes("deutsch")){for(let f of o)if(f.toLowerCase().includes("germany")||f.toLowerCase().includes("deutsch")||f.toLowerCase().includes("+49"))return console.log("Found German option: ".concat(f)),u.addAssistantResponse(f),this.sendConversationUpdate(),f}}}console.log("Starting semantic search for relevant information...");let m=await y.search(e,3),p="";m.length>0?(console.log("Found ".concat(m.length," relevant keys:"),m),p=m.map(i=>"".concat(i,": ").concat(y.data[i].text)).join(", ")):(console.log("No relevant information found in profile data. Using generic context."),p="The user has significant experience and qualifications suitable for this question.");let w=((n=this.user_data)==null?void 0:n.personal_information)||{},c=w.phone||"",h=w.salary||"";try{let i=u.buildOptionsPrompt(e,o,p);u.addUserMessage(i);let r=await this.callOllamaAPI({model:this.model,messages:u.getCurrentHistory(),options:{temperature:0},stream:!1}),f=(((a=(s=r==null?void 0:r.message)==null?void 0:s.content)==null?void 0:a.trim())||"").replace(/<think>[\s\S]*?<\/think>/g,"").trim();if(o.includes(f))return console.log('Found exact match in options: "'.concat(f,'"')),u.addAssistantResponse(f),this.sendConversationUpdate(),f;console.log('Answer "'.concat(f,'" not found in options, attempting to refine'));let E=await this.refineOptionSelection(f,o);return this.sendConversationUpdate(),E}catch(i){if(console.error("Ollama API error in answerWithOptions:",i),console.log("[Function] Falling back to direct context match due to API error"),console.log("[Function] AI Answer:",(l=y.data[m[0]])==null?void 0:l.text),m.length>0){let d=((g=y.data[m[0]])==null?void 0:g.text)||"",f=await this.refineOptionSelection(d,o);return this.sendConversationUpdate(),f}let r=o.length>1?o[1]:o[0];return console.log("[Function] Selected fallback option:",r),u.addAssistantResponse(r),this.sendConversationUpdate(),r}}catch(m){console.error("Error in answerWithOptions:",m);let p=o.length>1?o[1]:o[0];return u.addAssistantResponse(p),this.sendConversationUpdate(),p}}async refineOptionSelection(e,o){var t,n;try{console.log('Refining answer: "'.concat(e,'" to match available options'));let s=e.toLowerCase().includes("germany")||e.toLowerCase().includes("deutschland")||e.includes("+49"),a="\nOriginal answer: ".concat(e,"\nAvailable options: ").concat(JSON.stringify(o),'\n\nWhich option from the list above most closely matches "').concat(e,'"?\nYou MUST select EXACTLY one option from the list as written.\nDo not add any explanation. Return only the option text exactly as it appears in the list.\n');(s||o.some(c=>c.includes("(+")&&c.includes(")")))&&(a="\nI need to select a country code from a dropdown list.\nThe user's country is: ".concat(e,"\n\nAvailable options in the dropdown: ").concat(JSON.stringify(o),'\n\nIMPORTANT: Please select the option that matches this country, noting that:\n1. Country names may be in German (e.g., "Deutschland" for Germany)\n2. Options include country codes (e.g., "Deutschland (+49)")\n3. For Germany, you should select "Deutschland (+49)"\n4. You MUST select EXACTLY one option from the list AS WRITTEN\n\nWhich option should I select? Return ONLY the exact text of the option.'));let l=await this.callOllamaAPI({model:this.model,messages:[{role:"system",content:"You are a helpful assistant that selects the most appropriate option from a list."},{role:"user",content:a}],options:{temperature:0},stream:!1}),g=((n=(t=l==null?void 0:l.message)==null?void 0:t.content)==null?void 0:n.trim())||"";if(o.includes(g))return console.log('Successfully refined to "'.concat(g,'"')),u.addAssistantResponse(g),this.sendConversationUpdate(),g;if(s||o.some(c=>c.includes("(+")&&c.includes(")"))){for(let c of o)if(c.toLowerCase().includes("deutsch"))return console.log('Found German option: "'.concat(c,'"')),u.addAssistantResponse(c),this.sendConversationUpdate(),c}console.log('Refined answer "'.concat(g,'" still not in options, using basic matching'));let m=null,p=-1;for(let c of o){let h=c.toLowerCase(),i=e.toLowerCase();if(h.includes(i)||i.includes(h)){let r=Math.min(h.length,i.length)/Math.max(h.length,i.length);r>p&&(p=r,m=c)}}if(m&&p>.2)return console.log('Basic matching found: "'.concat(m,'" with score ').concat(p)),u.addAssistantResponse(m),this.sendConversationUpdate(),m;let w=o.length>1?o[1]:o[0];return console.log('No match found, using fallback: "'.concat(w,'"')),u.addAssistantResponse(w),this.sendConversationUpdate(),w}catch(s){console.error("Error in refineOptionSelection:",s);let a=o.length>1?o[1]:o[0];return u.addAssistantResponse(a),this.sendConversationUpdate(),a}}async answerWithNoOptions(e){var o,t,n,s,a;try{if(console.log('Answering question without options: "'.concat(e,'"')),(o=this.user_data)!=null&&o.personal_information){let c=this.user_data.personal_information;if(e.toLowerCase().includes("email")){let h=c.email||"";if(h)return console.log("Found direct match for email query"),u.addAssistantResponse(h),this.sendConversationUpdate(),h}if(e.toLowerCase().includes("phone")||e.toLowerCase().includes("mobile")||e.toLowerCase().includes("telephone")||e.toLowerCase().includes("telefon")){console.log("Found direct match for contact query");let h=c.phone_prefix?c.phone_prefix.replace("+","")+c.phone:c.phone||"";if(h)return u.addAssistantResponse(h),this.sendConversationUpdate(),h}if(e.toLowerCase().includes("name")&&e.toLowerCase().includes("first")){console.log("Found direct match for first name query");let h=c.name||"";if(h)return u.addAssistantResponse(h),this.sendConversationUpdate(),h}if(e.toLowerCase().includes("name")&&e.toLowerCase().includes("last")){console.log("Found direct match for last name query");let h=c.surname||"";if(h)return u.addAssistantResponse(h),this.sendConversationUpdate(),h}}console.log("Starting semantic search for relevant information...");let l=await y.search(e,3),g="";l.length>0?(console.log("Found ".concat(l.length," relevant keys:"),l),g=l.map(c=>"".concat(c,": ").concat(y.data[c].text)).join(", ")):(console.log("No relevant information found in profile data. Using generic context."),g="The user has significant experience and qualifications suitable for this question.");let m=((t=this.user_data)==null?void 0:t.personal_information)||{},p=m.phone||"",w=m.salary||"";try{let c=u.buildNoOptionsPrompt(e,g,p,w,this.user_data);u.addUserMessage(c);let h=await this.callOllamaAPI({model:this.model,messages:u.getCurrentHistory(),options:{temperature:0},stream:!1}),r=(((s=(n=h==null?void 0:h.message)==null?void 0:n.content)==null?void 0:s.trim())||"").replace(/<think>[\s\S]*?<\/think>/g,"").trim();if(["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(v=>e.toLowerCase().includes(v))){let v=r.match(/\d+(?:\.\d+)?/);v&&(["experience","erfahrung","jahre","years"].some(b=>e.toLowerCase().includes(b))?r=parseFloat(v[0])<1?"1":v[0]:r=v[0])}if(r)return u.addAssistantResponse(r),this.sendConversationUpdate(),r;let E="Information not available";return u.addAssistantResponse(E),this.sendConversationUpdate(),E}catch(c){if(console.error("Ollama API error in answerWithNoOptions:",c),console.log("[Function] Falling back to direct context match due to API error"),l.length>0){let d=((a=y.data[l[0]])==null?void 0:a.text)||"";if(console.log("[Function] AI Answer:",d),["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(v=>e.toLowerCase().includes(v))){let v=d.match(/\d+(?:\.\d+)?/);if(v)return console.log("[Function] Extracted number:",v[0]),u.addAssistantResponse(v[0]),this.sendConversationUpdate(),v[0]}if(d&&d.trim())return u.addAssistantResponse(d),this.sendConversationUpdate(),d}if(["phone","telefon","salary","gehalt","compensation","verg\xFCtung"].some(d=>e.toLowerCase().includes(d))){if(e.toLowerCase().includes("phone")||e.toLowerCase().includes("telefon"))return u.addAssistantResponse(p||"Not provided"),this.sendConversationUpdate(),p||"Not provided";if(e.toLowerCase().includes("salary")||e.toLowerCase().includes("gehalt")||e.toLowerCase().includes("compensation")||e.toLowerCase().includes("verg\xFCtung"))return u.addAssistantResponse(w||"Negotiable"),this.sendConversationUpdate(),w||"Negotiable"}let r="Information not available";return u.addAssistantResponse(r),this.sendConversationUpdate(),r}}catch(l){console.error("Error in answerWithNoOptions:",l);let g="Error generating response";return u.addAssistantResponse(g),this.sendConversationUpdate(),g}}async callOllamaAPI(e){try{return new Promise((o,t)=>{chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:e},n=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):n.success===!1?t(new Error(n.error||"Unknown error from Ollama API")):o(n.data)})})}catch(o){throw console.error("Error calling Ollama API:",o),o}}async checkOllamaConnection(){try{return new Promise((e,o)=>{chrome.runtime.sendMessage({action:"testOllama"},t=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):t&&t.success?e(!0):o(new Error((t==null?void 0:t.error)||"Failed to connect to Ollama"))})})}catch(e){throw console.error("Error checking Ollama connection:",e),e}}sendConversationUpdate(){if(!this.jobInfo){console.log("No job info available, skipping conversation update");return}try{let e=u.getCurrentHistory();if(!e||e.length<2){console.log("No meaningful conversation to send");return}console.log("Sending conversation update to popup:",{company:this.jobInfo.company,title:this.jobInfo.title,conversationLength:e.length}),chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{company:this.jobInfo.company,title:this.jobInfo.title,conversation:e}},t=>{chrome.runtime.lastError?console.warn("Error sending conversation update:",chrome.runtime.lastError):console.log("Conversation update sent successfully")});let o=u.getSavedConversations(this.jobInfo.title);if(o&&o.length>0){console.log("Sending ".concat(o.length," saved conversations"));for(let t of o)chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{company:this.jobInfo.company,title:this.jobInfo.title,conversation:t}})}}catch(e){console.error("Error sending conversation update:",e)}}finalizeConversation(){this.jobInfo&&u.finalizeAndSaveConversation(this.jobInfo)}},M=S;export{M as default};
