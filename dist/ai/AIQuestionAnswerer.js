var v=class{constructor(e=null){this.data={},this.directEmbeddingFunction=e,this.hasTriedLoading=!1,this.preloadEmbeddings()}async addEntry(e,t){if(!t)return!1;try{console.log("Adding entry for key: ".concat(e));let o=await this.getEmbedding(t);return o&&o.success&&o.data&&o.data.embedding?(this.data[e]={text:t,embedding:o.data.embedding},console.log("Successfully added embedding for key: ".concat(e," (Store size: ").concat(Object.keys(this.data).length,")")),!0):(console.warn("Failed to generate embedding for key: ".concat(e)),!1)}catch(o){return console.error("Error adding entry to memory store:",o),!1}}async loadStoredEmbeddings(){return this.hasTriedLoading?(console.log("Already tried loading embeddings. Current size: ".concat(Object.keys(this.data).length)),Object.keys(this.data).length>0):(console.log("Attempting to load stored embeddings from Chrome storage..."),new Promise(e=>{chrome.storage.local.get("storedEmbeddings",t=>{t.storedEmbeddings&&Object.keys(t.storedEmbeddings).length>0?(this.data=t.storedEmbeddings,console.log("Loaded embeddings from storage, found",Object.keys(this.data).length,"entries"),this.hasTriedLoading=!0,e(!0)):(console.log("No stored embeddings found in Chrome storage"),this.hasTriedLoading=!0,e(!1))})}))}flattenEmbeddingData(e){let t={};for(let[c,r]of Object.entries(e))if(r.embedding&&Array.isArray(r.embedding)){let d=r.embedding.map(l=>parseFloat(l.toFixed(5)));t[c]={text:r.text,embedding:d}}else t[c]=r;let o=JSON.stringify(e).length,n=JSON.stringify(t).length,s=(100-n/o*100).toFixed(2);return console.log("Flattened embeddings: ".concat(o," bytes \u2192 ").concat(n," bytes (").concat(s,"% reduction)")),t}async saveAllEmbeddings(){return new Promise((e,t)=>{if(Object.keys(this.data).length===0){console.warn("No embeddings to save to storage"),e(!1);return}console.log("Saving ".concat(Object.keys(this.data).length," embeddings to Chrome storage"));let o=this.flattenEmbeddingData(this.data),n=JSON.stringify(o).length;console.log("Storage payload size: ".concat(n," bytes (").concat((n/(1024*1024)).toFixed(2)," MB)")),chrome.storage.local.set({storedEmbeddings:o},()=>{if(chrome.runtime.lastError){let s=chrome.runtime.lastError;console.error("Error saving embeddings to storage:",s),s.message&&(s.message.includes("quota")||s.message.includes("QUOTA")||s.message.includes("limit")||s.message.includes("space"))&&(console.error("Storage quota exceeded. Data size: ".concat(n," bytes.")),console.error("Consider reducing the amount of data or implementing chunking.")),t(s)}else console.log("Successfully saved ".concat(Object.keys(o).length," embeddings to storage")),e(!0)})})}async search(e,t=3){if(console.log('Searching for related info: "'.concat(e,'" (top ').concat(t," results)")),Object.keys(this.data).length===0&&console.warn("Memory store is empty before loading attempt, checking storage..."),Object.keys(this.data).length===0&&!await this.loadStoredEmbeddings())return console.warn("Memory store is empty, no data to search. Check if YAML was properly loaded."),chrome.storage.local.get(null,function(s){console.log("All chrome storage items:",Object.keys(s)),console.log("Storage size:",JSON.stringify(s).length,"bytes"),s.userProfile&&console.log("User profile exists in storage but no embeddings found")}),[];let o=e.toLowerCase();if(o.includes("salary")||o.includes("compensation")||o.includes("earn")||o.includes("pay")){if(this.data.salary_information)return console.log("Found direct match for salary query"),["salary_information"];let n=Object.keys(this.data).filter(s=>s.toLowerCase().includes("salary")||this.data[s].text&&this.data[s].text.toLowerCase().includes("salary"));if(n.length>0)return console.log("Found ".concat(n.length," direct salary-related keys")),n.slice(0,t)}if(o.includes("phone")||o.includes("contact")||o.includes("call")){if(this.data.contact_information)return console.log("Found direct match for contact query"),["contact_information"];let n=Object.keys(this.data).filter(s=>s.toLowerCase().includes("phone")||s.toLowerCase().includes("contact")||s.toLowerCase().includes("email"));if(n.length>0)return console.log("Found ".concat(n.length," direct contact-related keys")),n.slice(0,t)}if((o.includes("location")||o.includes("where")||o.includes("city")||o.includes("country"))&&this.data.location_information)return console.log("Found direct match for location query"),["location_information"];if((o.includes("experience")||o.includes("years")||o.includes("work history")||o.includes("background"))&&this.data.experience_summary)return console.log("Found direct match for experience query"),["experience_summary"];try{let n=await this.getEmbedding(e);if(!n||!n.success||!n.data||!n.data.embedding)return console.error("Failed to generate embedding for search query"),[];let s=n.data.embedding,c={};for(let[d,l]of Object.entries(this.data)){let f=this.cosineSimilarity(l.embedding,s);c[d]=f}let r=Object.keys(c).sort((d,l)=>c[l]-c[d]).slice(0,t);return console.log("Found ".concat(r.length," relevant keys: ").concat(r.join(", "))),r}catch(n){return console.error("Error searching memory store:",n),[]}}cosineSimilarity(e,t){if(!e||!t||e.length!==t.length)return 0;let o=0,n=0,s=0;for(let c=0;c<e.length;c++)o+=e[c]*t[c],n+=e[c]*e[c],s+=t[c]*t[c];return n=Math.sqrt(n),s=Math.sqrt(s),n===0||s===0?0:o/(n*s)}async clearAllData(e=!0){console.log("Clearing memory store data");let t=Object.keys(this.data).length;return this.data={},this.hasTriedLoading=!1,e?(console.log("Also clearing embeddings from Chrome storage"),new Promise(o=>{chrome.storage.local.remove("storedEmbeddings",()=>{chrome.runtime.lastError?(console.error("Error clearing embeddings from storage:",chrome.runtime.lastError),o(!1)):(console.log("Successfully cleared ".concat(t," embeddings from memory and storage")),o(!0))})})):(console.log("Successfully cleared ".concat(t," embeddings from memory only")),!0)}async getStoredEmbeddingsCount(){return new Promise(e=>{chrome.storage.local.get("storedEmbeddings",t=>{if(chrome.runtime.lastError)console.error("Error getting stored embeddings count:",chrome.runtime.lastError),e(0);else if(t.storedEmbeddings){let o=Object.keys(t.storedEmbeddings).length;console.log("Found ".concat(o," embeddings in Chrome storage")),e(o)}else console.log("No embeddings found in Chrome storage"),e(0)})})}async getEmbedding(e){if(this.directEmbeddingFunction){console.log("Using direct embedding function");try{let t=performance.now(),o=await this.directEmbeddingFunction(e),n=performance.now();if(console.log("Embedding generated in ".concat((n-t).toFixed(2),"ms")),o&&o.success&&o.data&&o.data.embedding){let s=o.data.embedding;console.log("Embedding dimensions: ".concat(s.length)),console.log("Embedding sample: [".concat(s.slice(0,3).map(c=>c.toFixed(5)).join(", "),"...]"))}return o}catch(t){throw console.error("Error using direct embedding function:",t),t}}return new Promise((t,o)=>{console.log("Requesting embedding from background script for text (length: ".concat(e.length,'): "').concat(e.substring(0,50),'..."'));let n=performance.now();chrome.runtime.sendMessage({action:"getEmbeddings",text:e},s=>{let c=performance.now();if(chrome.runtime.lastError)console.error("Embedding request failed after ".concat((c-n).toFixed(2),"ms:"),chrome.runtime.lastError),o(new Error(chrome.runtime.lastError.message));else{if(console.log("Embedding received from API in ".concat((c-n).toFixed(2),"ms")),s&&s.success&&s.data&&s.data.embedding){let r=s.data.embedding;console.log("Embedding dimensions: ".concat(r.length)),console.log("Embedding sample: [".concat(r.slice(0,3).map(d=>d.toFixed(5)).join(", "),"...]"))}else console.warn("Received invalid embedding response:",s);t(s)}})})}async preloadEmbeddings(){console.log("Preloading embeddings from storage into memory...");try{let e=await this.loadStoredEmbeddings();return console.log(e?"Successfully preloaded ".concat(Object.keys(this.data).length," embeddings into memory"):"No embeddings found to preload"),e}catch(e){return console.error("Error preloading embeddings:",e),!1}}},L=new v,y=L;var O=class{constructor(){this.conversation_history=[],this.conversation_history_company=[],this.savedConversations=[],this.setSystemContext()}setSystemContext(e=null){let t=new Date().toISOString().split("T")[0];e||(e="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive number greater than 6.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- Use today date: ".concat(t,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversation_history=[{role:"system",content:e}],this.conversation_history_company=[...this.conversation_history]}addUserMessage(e){let t={role:"user",content:e};this.conversation_history.push(t),this.conversation_history_company.push(t)}addAssistantResponse(e){let t={role:"assistant",content:e};this.conversation_history.push(t),this.conversation_history_company.push(t)}finalizeAndSaveConversation(e){this.conversation_history.length>1&&(console.log("Finalizing conversation with ".concat(this.conversation_history.length," messages")),this.savedConversations.push({timestamp:new Date().toISOString(),job:e,conversation:JSON.parse(JSON.stringify(this.conversation_history))}),console.log("Saved conversation. Total saved: ".concat(this.savedConversations.length))),this.resetConversations()}getSavedConversations(e){return this.savedConversations.filter(t=>{var o;return!e||((o=t.job)==null?void 0:o.title)===e}).map(t=>t.conversation)}resetConversations(){this.conversation_history=this.conversation_history.slice(0,1),this.conversation_history_company=[],console.log("Conversation history reset for new form")}getCurrentHistory(){return JSON.parse(JSON.stringify(this.conversation_history))}buildOptionsPrompt(e,t,o){let n=t.map(r=>'"'.concat(r,'"')).join(", "),s=e.toLowerCase().includes("landesvorwahl")||e.toLowerCase().includes("country code")||e.toLowerCase().includes("country")||t.some(r=>r.includes("(+")&&r.includes(")")),c="Form Question: ".concat(e," ?\nAvailable Options: [").concat(n,"]\nUser Context Data Hint: ").concat(o,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");return s&&(c+='\nADDITIONAL GUIDANCE: \n- If this is a country selection question and the user is from Germany, select "Deutschland (+49)"\n- Country names may be in German (e.g., "Deutschland" for Germany, "Vereinigte Staaten" for USA)\n- Always choose the option that matches the user\'s country, paying attention to both the name and country code'),c}buildNoOptionsPrompt(e,t,o="",n=""){return"Form Question: ".concat(e," ?\nUser Context Data Hint: ").concat(t,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(o,"\n- If the question asks for a salary, return ONLY the numeric amount without currency symbols (no EUR, USD, $, \u20AC, etc.)\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user\n- If asked about years of experience, NEVER return 0\n- If insufficient data is found, estimate a positive but realistic number (5-7 years minimum)\n- Assume the user has solid experience and provide a reasonable answer that benefits them")}},p=new O;import P from"js-yaml";var S=class{constructor(){}parseUserContext(e){try{if(!e)return null;let t=P.load(e);return console.log("YAML parsed successfully"),t}catch(t){return console.error("Error parsing YAML:",t),null}}countFields(e){let t=0,o=n=>{for(let[s,c]of Object.entries(n))typeof c=="object"&&c!==null&&!Array.isArray(c)?o(c):t++};return o(e),t}formatValueForEmbedding(e,t=""){if(e==null)return"";let o=t.toLowerCase();return o.includes("salary")||o.includes("compensation")?"Salary: ".concat(e,", Expected salary: ").concat(e,", Desired compensation: ").concat(e,", Annual salary: ").concat(e):o.includes("phone")?"Phone number: ".concat(e,", Contact number: ").concat(e,", Tel: ").concat(e):o.includes("visa")?"Visa required: ".concat(e,", Visa status: ").concat(e,", Work permit: ").concat(e):Array.isArray(e)?e.map(n=>this.formatValueForEmbedding(n)).join(", "):typeof e=="object"?Object.entries(e).map(([n,s])=>{if(n.startsWith("_")||s===null||s===void 0)return null;let c=this.formatValueForEmbedding(s,n);return c?"".concat(n,": ").concat(c):null}).filter(Boolean).join(", "):String(e)}async processUserContext(e,t=null){try{if(!e)return console.error("No YAML content provided"),{success:!1,error:"No YAML content provided"};let o=this.parseUserContext(e);if(!o)return console.error("Failed to parse YAML content"),{success:!1,error:"Failed to parse YAML content"};console.log("User context parsed successfully, processing fields for embeddings");let n=new TextEncoder().encode(e).length;console.log("YAML content size: ".concat(n," bytes (").concat((n/1024).toFixed(2)," KB)"));let s=this.countFields(o),c=0;console.log("Total fields to process: ".concat(s));let r=[];for(let[i,a]of Object.entries(o))if(typeof a=="object"&&a!==null&&!Array.isArray(a)){for(let[g,h]of Object.entries(a)){let $="".concat(i,".").concat(g),x=this.formatValueForEmbedding(h,g);r.push({key:$,value:x})}if(i==="personal_information"){if(a.salary&&r.push({key:"salary_information",value:"Expected salary: ".concat(a.salary,", Desired compensation: ").concat(a.salary,", Annual salary expectation: ").concat(a.salary,", Salary requirement: ").concat(a.salary,", Compensation expectation: ").concat(a.salary)}),a.phone){let g=a.phone_prefix||"";r.push({key:"contact_information",value:"Phone number: ".concat(g).concat(a.phone,", Email: ").concat(a.email||"",", Contact details: ").concat(g).concat(a.phone," and ").concat(a.email||"")})}(a.country||a.city)&&r.push({key:"location_information",value:"Located in ".concat(a.city||"",", ").concat(a.country||"",", Location: ").concat(a.city||"",", ").concat(a.country||"")})}}else{let g=this.formatValueForEmbedding(a,i);r.push({key:i,value:g})}if(console.log("Prepared ".concat(r.length," fields to process for embeddings")),o.experiences&&Array.isArray(o.experiences))try{let i=/(\d{4})\s*-\s*(Present|\d{4})/i,a="";o.experiences.forEach(g=>{g.employment_period&&(a+="".concat(g.position||"Role"," at ").concat(g.company||"Company"," (").concat(g.employment_period,"). "))}),a&&r.push({key:"experience_summary",value:"Professional experience: ".concat(a," Years of experience in software development, engineering, and related fields.")})}catch(i){console.warn("Error creating experience summary:",i)}let d=JSON.stringify(r).length;console.log("Estimated data size before embeddings: ".concat(d," bytes (").concat((d/1024).toFixed(2)," KB)"));let l=d>1e6,f=l?10:r.length;l&&console.log("Using chunking strategy for large dataset (".concat(f," fields per chunk)"));let w=5,m=Math.ceil(r.length/w);if(console.log("Processing embeddings in ".concat(m," batches of ").concat(w)),l)try{await y.clearAllData(),console.log("Cleared existing data before processing chunks")}catch(i){console.warn("Error clearing existing data:",i)}let u=0;for(let i=0;i<m;i++){let a=i*w,g=Math.min((i+1)*w,r.length),h=r.slice(a,g);console.log("Processing batch ".concat(i+1,"/").concat(m," (").concat(h.length," fields)"));let $=h.map(b=>y.addEntry(b.key,b.value)),A=(await Promise.allSettled($)).filter(b=>b.status==="rejected"||b.status==="fulfilled"&&!b.value);if(A.length>0&&console.warn("".concat(A.length," embeddings failed in batch ").concat(i+1)),c+=h.length,t){let b=Math.round(c/s*100);t({progress:b,message:"Processing batch ".concat(i+1,"/").concat(m," (").concat(c,"/").concat(s," fields)")})}if(l&&(i+1)%Math.ceil(f/w)===0)try{console.log("Saving chunk to storage after batch ".concat(i+1,"...")),await y.saveAllEmbeddings(),console.log("Clearing memory store after saving chunk");let b=Object.keys(y.data).length;y.data={},console.log("Cleared ".concat(b," entries from memory"))}catch(b){if(console.error("Error saving chunk to storage:",b),u++,u>=3)return console.error("Multiple storage errors encountered, aborting processing"),t&&t({progress:0,message:"Error: Storage quota exceeded. Try reducing YAML complexity."}),{success:!1,error:"Storage quota exceeded",details:"The profile is too large to store with embeddings. Try simplifying your profile or using fewer fields."}}i<m-1&&await new Promise(b=>setTimeout(b,100))}console.log("Embedding generation complete, saving to storage...");try{if(Object.keys(y.data).length>0){let a=await y.saveAllEmbeddings();console.log("Save result: ".concat(a?"Success":"Failed"))}else l&&console.log("No final chunk to save (already saved in chunks)");let i=l?await y.getStoredEmbeddingsCount():Object.keys(y.data).length;console.log("Final storage contains ".concat(i," entries"))}catch(i){if(console.error("Error saving embeddings:",i),i&&i.message&&(i.message.includes("quota")||i.message.includes("QUOTA")||i.message.includes("limit")||i.message.includes("space")))return t&&t({progress:0,message:"Error: Storage quota exceeded. Try reducing YAML complexity."}),{success:!1,error:"Storage quota exceeded",details:"The profile is too large to store with embeddings. Try simplifying your profile."}}return t&&t({progress:100,message:"All fields processed"}),{success:!0,data:o}}catch(o){return console.error("Error processing user context:",o),t&&t({progress:0,message:"Error: ".concat(o.message)}),{success:!1,error:o.message}}}},T=new S;var C=class{constructor(e=null){this.apiEndpoint=e||"http://localhost:11434/api/generate",this.model="qwen2.5:3b",this.job=null,this.user_data=null,this.jobInfo=null,this.pendingQuestions=[],this.batchTimeout=null,this.isProcessingBatch=!1}setJob(e){this.job=e,console.log("Job information set:",e);let t=e&&e.currentJob?e.currentJob:null;t?(this.jobInfo={company:t.company||"",title:t.title||"",location:t.location||"",description:t.description||""},console.log("Creating conversation context for ".concat(this.jobInfo.company))):console.log("No job information provided")}async setUserContext(e,t=null){try{let o=await T.processUserContext(e,t);return o.success&&(this.user_data=o.data),{success:o.success,error:o.error||null}}catch(o){return console.error("Error in setUserContext:",o),t&&t({progress:0,message:"Error: ".concat(o.message)}),{success:!1,error:o.message}}}async answerQuestion(e,t=null){try{return console.log("Answering question:",e),console.log("Options:",t),console.log(this.user_data?"In-memory user data cache: Available":"In-memory user data cache: Not available (will use embedding search from storage)"),t&&Array.isArray(t)&&t.length>0?await this.answerWithOptions(e,t):await this.answerWithNoOptions(e)}catch(o){return console.error("Error in answerQuestion:",o),"Error processing question"}}async answerWithOptions(e,t){var o,n,s,c,r,d;try{if(console.log('Getting an answer for "'.concat(e,'" with options:'),t),!t||!Array.isArray(t)||t.length===0)return console.warn("Options array is empty or invalid, falling back to answerWithNoOptions"),this.answerWithNoOptions(e);if(e.toLowerCase().includes("phone country")||e.toLowerCase().includes("country code")||e.toLowerCase().includes("landesvorwahl")){console.log("Found direct match for contact query");let i=((o=this.user_data)==null?void 0:o.personal_information)||{};if(i.country){let a=i.country,g=null;for(let h of t)if(h.toLowerCase().includes(a.toLowerCase())){g=h;break}if(g)return console.log("Found country match: ".concat(g)),this.addToPendingBatch(e,g,t),g;if(a.toLowerCase().includes("german")||a.toLowerCase().includes("deutsch")){for(let h of t)if(h.toLowerCase().includes("germany")||h.toLowerCase().includes("deutsch")||h.toLowerCase().includes("+49"))return console.log("Found German option: ".concat(h)),this.addToPendingBatch(e,h,t),h}}}console.log("Starting semantic search for relevant information...");let l=await y.search(e,3),f="";l.length>0?(console.log("Found ".concat(l.length," relevant keys:"),l),f=l.map(i=>"".concat(i,": ").concat(y.data[i].text)).join(", ")):(console.log("No relevant information found in profile data. Using generic context."),f="The user has significant experience and qualifications suitable for this question.");let w=((n=this.user_data)==null?void 0:n.personal_information)||{},m=w.phone||"",u=w.salary||"";try{let i=p.buildOptionsPrompt(e,t,f);p.addUserMessage(i);let a=await this.callOllamaAPI({model:this.model,messages:p.getCurrentHistory(),options:{temperature:0},stream:!1}),h=(((c=(s=a==null?void 0:a.message)==null?void 0:s.content)==null?void 0:c.trim())||"").replace(/<think>[\s\S]*?<\/think>/g,"").trim();if(t.includes(h))return console.log('Found exact match in options: "'.concat(h,'"')),p.addAssistantResponse(h),this.addToPendingBatch(e,h,t),h;console.log('Answer "'.concat(h,'" not found in options, attempting to refine'));let $=await this.refineOptionSelection(h,t);return this.addToPendingBatch(e,$,t),$}catch(i){if(console.error("Ollama API error in answerWithOptions:",i),console.log("[Function] Falling back to direct context match due to API error"),console.log("[Function] AI Answer:",(r=y.data[l[0]])==null?void 0:r.text),l.length>0){let g=((d=y.data[l[0]])==null?void 0:d.text)||"",h=await this.refineOptionSelection(g,t);return this.addToPendingBatch(e,h,t),h}let a=t.length>1?t[1]:t[0];return console.log("[Function] Selected fallback option:",a),p.addAssistantResponse(a),this.addToPendingBatch(e,a,t),a}}catch(l){console.error("Error in answerWithOptions:",l);let f=t.length>1?t[1]:t[0];return p.addAssistantResponse(f),this.addToPendingBatch(e,f,t),f}}async refineOptionSelection(e,t){try{console.log('Refining answer: "'.concat(e,'" to match available options'));let o=e.toLowerCase().includes("germany")||e.toLowerCase().includes("deutsch");for(let r of t)if(r.toLowerCase()===e.toLowerCase())return console.log('Successfully refined to "'.concat(r,'"')),p.addAssistantResponse(r),r;if(o||t.some(r=>r.includes("(+")&&r.includes(")"))){for(let r of t)if(r.toLowerCase().includes("deutsch"))return console.log('Found German option: "'.concat(r,'"')),p.addAssistantResponse(r),r}console.log('Refined answer "'.concat(e,'" still not in options, using basic matching'));let n=null,s=-1;for(let r of t){let d=r.toLowerCase(),l=e.toLowerCase();if(d.includes(l)||l.includes(d)){let f=Math.max(d.length,l.length)-Math.abs(d.length-l.length);f>s&&(s=f,n=r)}}if(n)return console.log('Found best match: "'.concat(n,'" with score ').concat(s)),p.addAssistantResponse(n),n;let c=t.length>1?t[1]:t[0];return console.log('No match found, using fallback: "'.concat(c,'"')),p.addAssistantResponse(c),c}catch(o){console.error("Error in refineOptionSelection:",o);let n=t.length>1?t[1]:t[0];return p.addAssistantResponse(n),n}}async answerWithNoOptions(e){var t,o,n,s,c;try{if(console.log('Answering question without options: "'.concat(e,'"')),(t=this.user_data)!=null&&t.personal_information){let m=this.user_data.personal_information;if(e.toLowerCase().includes("email")||e.toLowerCase().includes("e-mail")){console.log("Found direct match for email query");let u=m.email||"";if(u)return this.addToPendingBatch(e,u),u}if(e.toLowerCase().includes("phone")||e.toLowerCase().includes("mobile")||e.toLowerCase().includes("telephone")||e.toLowerCase().includes("telefon")){console.log("Found direct match for phone query");let u=m.country_code?m.country_code+m.phone:m.phone||"";if(u)return this.addToPendingBatch(e,u),u}if(e.toLowerCase().includes("name")&&e.toLowerCase().includes("first")){console.log("Found direct match for first name query");let u=m.name||"";if(u)return this.addToPendingBatch(e,u),u}if(e.toLowerCase().includes("name")&&e.toLowerCase().includes("last")){console.log("Found direct match for last name query");let u=m.surname||"";if(u)return this.addToPendingBatch(e,u),u}}console.log("Starting semantic search for relevant information...");let r=await y.search(e,3),d="";r.length>0?(console.log("Found ".concat(r.length," relevant keys:"),r),d=r.map(m=>"".concat(m,": ").concat(y.data[m].text)).join(", ")):(console.log("No relevant information found in profile data. Using generic context."),d="The user has significant experience and qualifications suitable for this question.");let l=((o=this.user_data)==null?void 0:o.personal_information)||{},f=l.phone||"",w=l.salary||"";try{let m=p.buildNoOptionsPrompt(e,d,f,w,this.user_data);p.addUserMessage(m);let u=await this.callOllamaAPI({model:this.model,messages:p.getCurrentHistory(),options:{temperature:0},stream:!1}),a=(((s=(n=u==null?void 0:u.message)==null?void 0:n.content)==null?void 0:s.trim())||"").replace(/<think>[\s\S]*?<\/think>/g,"").trim();if(a&&a!=="Information not available")return console.log('AI generated answer: "'.concat(a,'"')),p.addAssistantResponse(a),this.addToPendingBatch(e,a),a;let g="Information not available";return this.addToPendingBatch(e,g),g}catch(m){if(console.error("Ollama API error in answerWithNoOptions:",m),console.log("[Function] Falling back to direct context match due to API error"),r.length>0){let i=((c=y.data[r[0]])==null?void 0:c.text)||"",a=i.match(/\d+/);if(a&&(e.toLowerCase().includes("year")||e.toLowerCase().includes("experience")||e.toLowerCase().includes("salary")))return console.log("[Function] Extracted number:",a[0]),this.addToPendingBatch(e,a[0]),a[0];if(i&&i.trim())return this.addToPendingBatch(e,i),i}if(["phone","telefon","salary","gehalt","compensation","verg\xFCtung"].some(i=>e.toLowerCase().includes(i))){if(e.toLowerCase().includes("phone")||e.toLowerCase().includes("telefon")){let i=f||"Not provided";return this.addToPendingBatch(e,i),i}if(e.toLowerCase().includes("salary")||e.toLowerCase().includes("gehalt")||e.toLowerCase().includes("compensation")||e.toLowerCase().includes("verg\xFCtung")){let i=w||"Negotiable";return this.addToPendingBatch(e,i),i}}let u="Information not available";return this.addToPendingBatch(e,u),u}}catch(r){console.error("Error in answerWithNoOptions:",r);let d="Error generating response";return this.addToPendingBatch(e,d),d}}async callOllamaAPI(e){try{return new Promise((t,o)=>{chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:e},n=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):n.success===!1?o(new Error(n.error||"Unknown error from Ollama API")):t(n.data)})})}catch(t){throw console.error("Error calling Ollama API:",t),t}}async checkOllamaConnection(){try{return new Promise((e,t)=>{chrome.runtime.sendMessage({action:"testOllama"},o=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):o&&o.success?e(!0):t(new Error((o==null?void 0:o.error)||"Failed to connect to Ollama"))})})}catch(e){throw console.error("Error checking Ollama connection:",e),e}}sendConversationUpdate(){if(!this.jobInfo){console.log("No job info available, skipping conversation update");return}try{let e=p.getCurrentHistory();if(!e||e.length<2){console.log("No meaningful conversation to send");return}let t=e.find(s=>s.role==="user");if(!t){console.log("No user message found in conversation");return}let o=t.content.match(/Form Question:\s*([^?]+)\s*\?/),n=o?o[1].trim():t.content.substring(0,30);console.log('Sending conversation update to background for question: "'.concat(n,'"')),chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{company:this.jobInfo.company,title:this.jobInfo.title,conversation:e,timestamp:Date.now(),questionId:n}})}catch(e){console.error("Error sending conversation update:",e)}}finalizeConversation(){console.log("finalizeConversation called but not needed - conversations are stored immediately")}addToPendingBatch(e,t,o=[]){let n={question:e,answer:t,options:o,timestamp:Date.now(),questionId:this.extractQuestionId(e)};this.pendingQuestions.push(n),console.log('Added question to batch: "'.concat(n.questionId,'" (Total pending: ').concat(this.pendingQuestions.length,")")),this.scheduleBatchStorage()}extractQuestionId(e){return e.replace(/^(Form Question:|Question:)\s*/i,"").replace(/\s*\?\s*$/,"").trim().substring(0,50)}scheduleBatchStorage(){this.batchTimeout&&clearTimeout(this.batchTimeout),this.batchTimeout=setTimeout(()=>{this.processPendingBatch()},2e3)}async processPendingBatch(){if(!(this.isProcessingBatch||this.pendingQuestions.length===0)){if(!this.jobInfo){console.log("No job info available, clearing pending questions"),this.pendingQuestions=[];return}this.isProcessingBatch=!0,console.log("Processing batch of ".concat(this.pendingQuestions.length," questions for ").concat(this.jobInfo.title));try{for(let e of this.pendingQuestions)await this.storeIndividualConversation(e),await new Promise(t=>setTimeout(t,100));console.log("Successfully stored ".concat(this.pendingQuestions.length," conversations")),this.pendingQuestions=[]}catch(e){console.error("Error processing question batch:",e)}finally{this.isProcessingBatch=!1}}}async storeIndividualConversation(e){try{let t=[{role:"system",content:"You are a helpful assistant that answers job application questions accurately and professionally."},{role:"user",content:this.buildUserMessage(e.question,e.options)},{role:"assistant",content:e.answer}];return new Promise(o=>{chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{company:this.jobInfo.company,title:this.jobInfo.title,conversation:t,timestamp:e.timestamp,questionId:e.questionId}},n=>{console.log('Stored conversation for: "'.concat(e.questionId,'"')),o(n)})})}catch(t){console.error('Error storing conversation for "'.concat(e.questionId,'":'),t)}}buildUserMessage(e,t=[]){let o="Form Question: ".concat(e,"?");if(t&&t.length>0){let n=t.map(s=>'"'.concat(s,'"')).join(", ");o+="\nAvailable Options: [".concat(n,"]")}return o}async flushPendingQuestions(){this.batchTimeout&&(clearTimeout(this.batchTimeout),this.batchTimeout=null),this.pendingQuestions.length>0&&(console.log("Flushing pending questions before page change"),await this.processPendingBatch())}},B=C;export{B as default};
