var f=class{constructor(){this.data={}}async addEntry(t,s){if(s)try{let e=await fetch("http://localhost:11434/api/embeddings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"nomic-embed-text",prompt:s,stream:!1})});if(!e.ok)throw new Error("HTTP error! status: ".concat(e.status));let i=await e.json();this.data[t]={text:s,embedding:i.embedding}}catch(e){console.error("Error generating embedding:",e)}}async search(t,s=3){if(!this.data||Object.keys(this.data).length===0)return[];try{let e=await fetch("http://localhost:11434/api/embeddings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"nomic-embed-text",prompt:t,stream:!1})});if(!e.ok)throw new Error("HTTP error! status: ".concat(e.status));let c=(await e.json()).embedding,o={};for(let[r,l]of Object.entries(this.data)){let m=this.cosineSimilarity(l.embedding,c);o[r]=m}return Object.entries(o).sort(([,r],[,l])=>l-r).slice(0,s).map(([r])=>r)}catch(e){return console.error("Error in search:",e),[]}}cosineSimilarity(t,s){let e=t.reduce((o,r,l)=>o+r*s[l],0),i=Math.sqrt(t.reduce((o,r)=>o+r*r,0)),c=Math.sqrt(s.reduce((o,r)=>o+r*r,0));return e/(i*c)}},g=f;import x from"js-yaml";var w=class{constructor(){this.model="qwen2.5:3b",this.memory=new g,this.conversationHistory=[],this.setSystemContext(),this.job=null,this.userData=null,this.ollamaUrl="http://localhost:11434"}async setJob(t){this.job=t,this.conversationHistoryKey="conversation_history_".concat(this.job.companyName,"_").concat(this.job.jobId)}setSystemContext(t=null){let s=new Date().toISOString().split("T")[0];t||(t="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- Return ONLY the answer as a plain string. DO NOT add explanations or additional text.\n- If the question requires a number (e.g., 'Zahl angeben' or 'give number'), return ONLY a number.\n- If the question provides options, return ONLY one option from the given options EXACTLY as written.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive but realistic number based on user context.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- If asked about salary, use the user's expected salary or provide a reasonable estimate based on job market data.\n- Use today date: ".concat(s,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversationHistory=[{role:"system",content:t}],this.conversationHistoryCompany=[...this.conversationHistory]}async setUserContext(t){try{this.userData=x.load(t),console.log("User context loaded successfully.");for(let[s,e]of Object.entries(this.userData))if(typeof e=="object"&&e!==null)for(let[i,c]of Object.entries(e))await this.memory.addEntry("".concat(s,".").concat(i),String(c));else await this.memory.addEntry(s,String(e))}catch(s){console.error("Error setting user context:",s)}}async saveConversationHistory(){if(this.conversationHistoryKey)try{localStorage.setItem(this.conversationHistoryKey,JSON.stringify(this.conversationHistoryCompany))}catch(t){console.error("Error saving conversation history:",t)}}async answerWithOptions(t,s){try{let c=(await this.memory.search(t,1)).map(a=>"".concat(a,": ").concat(this.memory.data[a].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",o=s.map(a=>'"'.concat(a,'"')).join(", "),r="Form Question: ".concat(t," ?\nAvailable Options: [").concat(o,"]\nUser Context Data Hint: ").concat(c,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");this.conversationHistory.push({role:"user",content:r}),this.conversationHistoryCompany.push({role:"user",content:r}),console.log("Attempting to connect to Ollama server...");let l=await new Promise((a,n)=>{chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}}},h=>{h.success?a(h.data):n(new Error(h.error))})});console.log("Response received successfully");let d=l.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim(),y;if(s.includes(d))y=d;else{let a=null,n=-1;for(let h of s){let u=h.toLowerCase(),p=d.toLowerCase();if(u.includes(p)||p.includes(u)){let b=this.calculateSimilarity(u,p);b>n&&(n=b,a=h)}}y=n>.5?a:s[1]}return this.conversationHistoryCompany.push({role:"assistant",content:y}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],y}catch(e){throw console.error("Error details:",{name:e.name,message:e.message,stack:e.stack,cause:e.cause}),e}}async answerWithNoOptions(t){var s,e,i,c;try{let l=(await this.memory.search(t,3)).map(n=>"".concat(n,": ").concat(this.memory.data[n].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",m="Form Question: ".concat(t," ?\nUser Context Data Hint: ").concat(l,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(((e=(s=this.userData)==null?void 0:s.personal_information)==null?void 0:e.phone)||"","\n- If the question asks for a salary, use the user's expected salary ").concat(((c=(i=this.userData)==null?void 0:i.personal_information)==null?void 0:c.desired_salary)||""," or provide a reasonable estimate based on job market data\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user");this.conversationHistory.push({role:"user",content:m}),this.conversationHistoryCompany.push({role:"user",content:m}),console.log("Attempting to connect to Ollama server...");let d=await new Promise((n,h)=>{chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}}},u=>{u.success?n(u.data):h(new Error(u.error))})});console.log("Response received successfully");let a=d.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim();if(this.isNumberQuestion(t)){let n=a.match(/\d+(?:\.\d+)?/);n&&(this.isExperienceQuestion(t)?a=parseFloat(n[0])<1?"1":n[0]:a=n[0])}if(a)return this.conversationHistoryCompany.push({role:"assistant",content:a}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],a}catch(o){throw console.error("Error details:",{name:o.name,message:o.message,stack:o.stack,cause:o.cause}),o}}isNumberQuestion(t){return["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(e=>t.toLowerCase().includes(e))}isExperienceQuestion(t){return["experience","erfahrung","jahre","years"].some(e=>t.toLowerCase().includes(e))}calculateSimilarity(t,s){let e=new Set(t),i=new Set(s);return new Set([...e].filter(o=>i.has(o))).size/Math.max(e.size,i.size)}async answerQuestion(t,s=null){return s&&s.length>0?await this.answerWithOptions(t,s):await this.answerWithNoOptions(t)}},S=w;export{S as default};
