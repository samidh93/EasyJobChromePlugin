var w=class{constructor(){this.data={}}async addEntry(t,e){if(e)try{let s=await fetch("http://localhost:11434/api/embeddings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"nomic-embed-text",prompt:e,stream:!1})});if(!s.ok)throw new Error("HTTP error! status: ".concat(s.status));let i=await s.json();this.data[t]={text:e,embedding:i.embedding}}catch(s){console.error("Error generating embedding:",s)}}async search(t,e=3){if(!this.data||Object.keys(this.data).length===0)return[];try{let s=await fetch("http://localhost:11434/api/embeddings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"nomic-embed-text",prompt:t,stream:!1})});if(!s.ok)throw new Error("HTTP error! status: ".concat(s.status));let m=(await s.json()).embedding,o={};for(let[r,p]of Object.entries(this.data)){let l=this.cosineSimilarity(p.embedding,m);o[r]=l}return Object.entries(o).sort(([,r],[,p])=>p-r).slice(0,e).map(([r])=>r)}catch(s){return console.error("Error in search:",s),[]}}cosineSimilarity(t,e){let s=t.reduce((o,r,p)=>o+r*e[p],0),i=Math.sqrt(t.reduce((o,r)=>o+r*r,0)),m=Math.sqrt(e.reduce((o,r)=>o+r*r,0));return s/(i*m)}},v=w;import O from"js-yaml";var b=class{constructor(){this.model="qwen2.5:3b",this.memory=new v,this.conversationHistory=[],this.setSystemContext(),this.job=null,this.userData=null,this.ollamaUrl="http://localhost:11434"}async setJob(t){this.job=t,console.log("current job infos: ",this.job),this.conversationHistoryKey="conversation_history_".concat(this.job.currentJob.company,"_").concat(this.job.currentJob.jobId),console.log("conversationHistoryKey set",this.conversationHistoryKey)}setSystemContext(t=null){let e=new Date().toISOString().split("T")[0];t||(t="You are an AI expert in filling out job application forms. \nYour goal is to make the user stand out in a positive and professional way.\n*****************STRICT RULES***************:\n- ALWAYS return an answer that BENEFITS the user. If information is missing, MAKE AN EDUCATED GUESS in their favor.\n- Return ONLY the answer as a plain string. DO NOT add explanations or additional text.\n- If the question requires a number (e.g., 'Zahl angeben' or 'give number'), return ONLY a number.\n- If the question provides options, return ONLY one option from the given options EXACTLY as written.\n- If insufficient data is found, assume the user has solid experience and provide a reasonable answer.\n- If asked about how many years of experience, do NOT return 0. Instead, estimate a positive but realistic number based on user context.\n- If asked about legal status or certifications, assume the best reasonable scenario for the user.\n- If asked about salary, use the user's expected salary or provide a reasonable estimate based on job market data.\n- Use today date: ".concat(e,", if asked for a starting date, respond with a date 3 months (notice period) from today date.")),this.conversationHistory=[{role:"system",content:t}],this.conversationHistoryCompany=[...this.conversationHistory]}async setUserContext(t){try{this.userData=O.load(t),console.log("User context loaded successfully.");for(let[e,s]of Object.entries(this.userData))if(typeof s=="object"&&s!==null)for(let[i,m]of Object.entries(s))await this.memory.addEntry("".concat(e,".").concat(i),String(m));else await this.memory.addEntry(e,String(s))}catch(e){console.error("Error setting user context:",e)}}async saveConversationHistory(){if(console.log("saving AI conversation history"),this.conversationHistoryKey)try{console.log("saved conversation history:",this.conversationHistoryCompany),chrome.runtime.sendMessage({action:"CONVERSATION_UPDATED",data:{key:this.conversationHistoryKey,company:this.job.currentJob.company,title:this.job.currentJob.title,jobId:this.job.currentJob.jobId,conversation:this.conversationHistoryCompany,timestamp:new Date().toISOString()}})}catch(t){console.error("Error saving conversation history:",t)}}async answerWithOptions(t,e){try{let m=(await this.memory.search(t,1)).map(l=>"".concat(l,": ").concat(this.memory.data[l].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",o=e.map(l=>'"'.concat(l,'"')).join(", "),r="Form Question: ".concat(t," ?\nAvailable Options: [").concat(o,"]\nUser Context Data Hint: ").concat(m,"\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above.\nYour answer should match one of the options EXACTLY as written.\nDO NOT add any explanation or additional text.");this.conversationHistory.push({role:"user",content:r}),this.conversationHistoryCompany.push({role:"user",content:r});let p=this.isExperienceQuestion(t);console.log("Attempting to connect to Ollama server...");try{let l=await new Promise((a,h)=>{let f=setTimeout(()=>{h(new Error("Ollama connection timeout"))},15e3);chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}}},u=>{clearTimeout(f),u&&u.success?a(u.data):h(new Error((u==null?void 0:u.error)||"Failed to get response from Ollama"))})});console.log("Response received successfully");let c=l.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim(),n;if(e.includes(c))n=c;else{let a=null,h=-1;for(let f of e){let u=f.toLowerCase(),y=c.toLowerCase();if(u.includes(y)||y.includes(u)){let g=this.calculateSimilarity(u,y);g>h&&(h=g,a=f)}}n=h>.5?a:e[1]}return this.conversationHistoryCompany.push({role:"assistant",content:n}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],n}catch(l){console.error("API error in answerWithOptions:",l);let d;if(p){let c=e.filter(n=>{let a=n.toLowerCase();return/\d+/.test(a)||a.includes("year")||a.includes("jahr")||a.includes("experience")||a.includes("erfahrung")});if(c.length>0){let n=Math.floor(c.length/2);d=c[n]}else d=e.length>1?e[1]:e[0]}else d=e.length>1?e[1]:e[0];return console.log('Using fallback option: "'.concat(d,'" for question: ').concat(t)),this.conversationHistoryCompany.push({role:"assistant",content:d}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],d}}catch(s){return console.error("Error details:",{name:s.name,message:s.message,stack:s.stack,cause:s.cause}),e.length>1?e[1]:e[0]}}async answerWithNoOptions(t){var e,s,i,m;try{let p=(await this.memory.search(t,3)).map(c=>"".concat(c,": ").concat(this.memory.data[c].text)).join(", ")||"The user has significant experience and qualifications suitable for this question.",l="Form Question: ".concat(t," ?\nUser Context Data Hint: ").concat(p,"\nIMPORTANT:\n- Return ONLY the answer as a plain string\n- If the question requires a number, return ONLY a number\n- If the question requires a phone number, return the user's phone ").concat(((s=(e=this.userData)==null?void 0:e.personal_information)==null?void 0:s.phone)||"","\n- If the question asks for a salary, use the user's expected salary ").concat(((m=(i=this.userData)==null?void 0:i.personal_information)==null?void 0:m.desired_salary)||""," or provide a reasonable estimate based on job market data\n- DO NOT add any explanation or additional text\n- Make sure the answer is professional and benefits the user");this.conversationHistory.push({role:"user",content:l}),this.conversationHistoryCompany.push({role:"user",content:l});let d=this.isExperienceQuestion(t);console.log("Attempting to connect to Ollama server...");try{let c=await new Promise((h,f)=>{let u=setTimeout(()=>{f(new Error("Ollama connection timeout"))},15e3);chrome.runtime.sendMessage({action:"callOllama",endpoint:"chat",data:{model:this.model,messages:this.conversationHistory,stream:!1,options:{temperature:0}}},y=>{clearTimeout(u),y&&y.success?h(y.data):f(new Error((y==null?void 0:y.error)||"Failed to get response from Ollama"))})});console.log("Response received successfully");let a=c.message.content.trim().replace(new RegExp("<think>.*?<\\/think>","gs"),"").trim();if(this.isNumberQuestion(t)){let h=a.match(/\d+(?:\.\d+)?/);h&&(d?a=parseFloat(h[0])<1?"1":h[0]:a=h[0])}if(a)return this.conversationHistoryCompany.push({role:"assistant",content:a}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],a;throw new Error("No valid answer candidate generated")}catch(c){console.error("API error:",c);let n;return d?n="5":t.toLowerCase().includes("gehalt")||t.toLowerCase().includes("salary")?n="90000":this.isNumberQuestion(t)?n="3":n="Yes",console.log("Using fallback answer: ".concat(n," for question: ").concat(t)),this.conversationHistoryCompany.push({role:"assistant",content:n}),await this.saveConversationHistory(),this.conversationHistory=this.conversationHistory.slice(0,1),this.conversationHistoryCompany=[],n}}catch(o){return console.error("Error details:",{name:o.name,message:o.message,stack:o.stack,cause:o.cause}),this.isExperienceQuestion(t)?"5":"Yes"}}isNumberQuestion(t){return["number","how many","zahl","jahre","years","salary","gehalt","euro","eur"].some(s=>t.toLowerCase().includes(s))}isExperienceQuestion(t){let e=t.toLowerCase();return["experience","years","year","erfahrung","jahre","jahr","how long","wie lange","worked with","gearbeitet mit"].some(i=>e.includes(i))}calculateSimilarity(t,e){let s=new Set(t),i=new Set(e);return new Set([...s].filter(o=>i.has(o))).size/Math.max(s.size,i.size)}async answerQuestion(t,e=null){return e&&e.length>0?await this.answerWithOptions(t,e):await this.answerWithNoOptions(t)}},T=b;export{T as default};
