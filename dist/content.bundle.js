(()=>{var f=class{static async getTotalJobsSearchCount(e){try{await new Promise(o=>setTimeout(o,1e3));let t=e.querySelector(".jobs-search-results-list__subtitle");if(t){let o=t.textContent.trim(),r=parseInt(o.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return console.log(`Total jobs found: ${r}`),r}else return console.log("No results found"),0}catch(t){return console.error("An error occurred while fetching total jobs count:",t),0}}static async getAvailablePages(e,t){try{await new Promise(n=>setTimeout(n,1e3));let o=e.querySelector('ul[class*="jobs-search-pagination__pages"]');if(!o)return console.log("Pagination list not found."),0;let r=o.querySelectorAll("li");if(r.length===0)return console.log("No pagination items found."),0;let l=r[r.length-1];console.log(`Last page: ${l}`);let i=Math.ceil(t/25);return console.log(`Total pages available: ${i}`),i}catch(o){return console.error("Exception occurred while fetching available pages:",o),0}}static async getListOfJobsOnPage(e){try{await new Promise(r=>setTimeout(r,1e3));let t=e.querySelector(".scaffold-layout__list");if(!t)return console.log("Jobs container not found."),[];let o=t.querySelectorAll("li[class*='scaffold-layout__list-item']");return console.log(`Found ${o.length} jobs on this page.`),Array.from(o)}catch(t){return console.error("Exception occurred while fetching the list of jobs:",t),[]}}static async getJobClickableElement(e){try{await new Promise(o=>setTimeout(o,1e3));let t=e.querySelector("a");return t||(console.log("Could not find clickable element for job"),null)}catch(t){return console.error("Exception occurred while fetching clickable element:",t),null}}static async scrollDownToLoadNextJob(e){try{await new Promise(t=>setTimeout(t,1e3)),e.scrollIntoView({behavior:"smooth",block:"center"}),console.log("Scrolled down to load next job")}catch(t){console.error("Error while scrolling down to load next job",t)}}static async clickOnJob(e){try{e.click(),console.log("Clicked on job element")}catch(t){console.info("could not click on job element",t)}}static async clickEasyApply(){try{let e=document.querySelector(".jobs-s-apply button");if(e)return e.click(),console.log("Clicked on easy apply button"),!0;throw new Error("Easy apply button not found")}catch(e){throw console.error("Error while clicking on easy apply button",e),e}}static async getJobTitle(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__job-title h1");if(e){let t=e.textContent.trim();return console.log(`Found job title: ${t}`),t}return console.log("Job title not found"),null}catch(e){return console.error("Error while getting job title:",e),null}}static async getCompanyName(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__company-name a");if(e){let t=e.textContent.trim();return console.log(`Found company name: ${t}`),t}return console.log("Company name not found"),null}catch(e){return console.error("Error while getting company name:",e),null}}static async getLocation(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text");if(e){let t=e.textContent.trim();return console.log(`Found location: ${t}`),t}return console.log("Location not found"),null}catch(e){return console.error("Error while getting location:",e),null}}static async getJobType(){try{let e=document.querySelector(".job-details-preferences-and-skills__pill .ui-label");if(e){let o=e.textContent.trim().split("Matches")[0].trim();return console.log(`Found job type: ${o}`),o}return console.log("Job type not found"),null}catch(e){return console.error("Error while getting job type:",e),null}}static async getJobDescription(){try{let e=document.querySelector(".jobs-description__content");if(e){let t=e.textContent.trim();return console.log("Found job description"),t}return console.log("Job description not found"),null}catch(e){return console.error("Error while getting job description:",e),null}}static async getApplicantCount(){try{let e=document.querySelector(".jobs-premium-applicant-insights__list-item .jobs-premium-applicant-insights__list-num");if(e){let t=e.textContent.trim();return console.log(`Found applicant count: ${t}`),t}return console.log("Applicant count not found"),null}catch(e){return console.error("Error while getting applicant count:",e),null}}static async getAllJobInfo(){try{let e={title:await this.getJobTitle(),company:await this.getCompanyName(),location:await this.getLocation(),jobType:await this.getJobType(),description:await this.getJobDescription(),applicantCount:await this.getApplicantCount()};return console.log("Retrieved all job information"),e}catch(e){return console.error("Error while getting all job information:",e),null}}static async closeForm(e=!1){var t,o;try{let r=document.querySelector('button[aria-label="Dismiss"]');if(r||(r=document.querySelector('button[aria-label="Close"]')||document.querySelector('button[aria-label="Cancel"]')||document.querySelector("button[data-test-modal-close-btn]")),r){if(r.click(),await new Promise(l=>setTimeout(l,1e3)),e){let l=document.querySelector('button[data-control-name="save_application_btn"]');l&&(l.click(),console.log("closed form and saved application"))}else{let l=document.querySelector('button[data-control-name="discard_application_confirm_btn"]')||document.querySelector("button[data-test-dialog-secondary-btn]");l&&(l.click(),console.log("closed form and discarded application"))}await new Promise(l=>setTimeout(l,1e3))}}catch(r){console.error("Error while closing form",r);try{let l=document.querySelectorAll("button");for(let i of l)(i.textContent.toLowerCase().includes("close")||i.textContent.toLowerCase().includes("cancel")||(t=i.getAttribute("aria-label"))!=null&&t.toLowerCase().includes("close")||(o=i.getAttribute("aria-label"))!=null&&o.toLowerCase().includes("dismiss"))&&(i.click(),await new Promise(n=>setTimeout(n,500)))}catch(l){console.error("Failed final attempt to close form",l)}}}static async clickNextPage(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Continue to next step"]');e&&(e.click(),console.log("Clicked on next page button"))}catch(e){console.error("Error while clicking on next page button",e)}}static async clickPreviousPage(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Back to previous step"]');e&&(e.click(),console.log("Clicked on previous page button"))}catch(e){console.error("Error while clicking on previous page button",e)}}static async clickReviewApplication(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Review your application"]');e&&(e.click(),console.log("Clicked on review button"))}catch(e){console.error("Error while clicking on review button",e)}}static async clickSubmitApplication(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Submit application"]');e&&(e.click(),console.log("Clicked on submit button"))}catch(e){console.error("Error while clicking on submit button",e)}}static async processForm(e){try{let t=Date.now(),o=3*60*1e3,r=!1;for(;!r&&Date.now()-t<o;){if(console.log("Starting form processing iteration"),await e())return console.log("Stop requested during form processing"),!1;await this.processFormQuestions();let l=Date.now(),i=60*1e3,n=!1;for(;!n&&Date.now()-l<i;){if(await e())return console.log("Stop requested during review loop"),!1;let a=document.querySelector('button[aria-label="Review your application"]');if(a){await this.processFormQuestions(),a.click(),console.log("Found and clicked review button"),n=!0,await new Promise(m=>setTimeout(m,2e3));let p=document.querySelector('button[aria-label="Submit application"]');if(p){p.click(),console.log("Clicked submit button after review"),r=!0;break}}else{let p=document.querySelector('button[aria-label="Continue to next step"]');if(p)await this.processFormQuestions(),p.click(),console.log("Clicked next page button"),await new Promise(m=>setTimeout(m,2e3));else{let m=document.querySelector('button[aria-label="Submit application"]');if(m){m.click(),console.log("Found submit button without review"),r=!0;break}}}await new Promise(p=>setTimeout(p,2e3))}n||console.log("Review button not found within 1 minute, continuing to next iteration"),await new Promise(a=>setTimeout(a,2e3))}return r?(console.log("Form processed and submitted successfully"),!0):(console.log("Form processing timed out after 3 minutes"),!1)}catch(t){return console.error("Error while processing form:",t),!1}}static async answerQuestion(e,t=[]){try{console.log(`Answering question: ${e}`),console.log("Available options:",t);let o=document.querySelectorAll("div.fb-dash-form-element");for(let r of o){let l=r.querySelector("label");if(!l)continue;let i=l.textContent.trim();if(i=i.replace(/(.+?)\1/,"$1"),i!==e)continue;let n=r.querySelector("input, textarea, select");if(!n){console.log("No input field found for question");continue}switch(n.tagName.toLowerCase()){case"input":switch(n.type){case"text":case"tel":case"email":e.toLowerCase().includes("phone")||e.toLowerCase().includes("mobile")?n.value="1234567890":e.toLowerCase().includes("email")?n.value="example@email.com":e.toLowerCase().includes("name")?n.value="John Doe":t.length>0?n.value=t[0]:n.value="Yes",n.dispatchEvent(new Event("input",{bubbles:!0}));break;case"radio":let a=r.querySelectorAll('input[type="radio"]');if(t.length>0)for(let p of a){let m=r.querySelector(`label[for="${p.id}"]`);if(m&&m.textContent.trim()===t[0]){p.click(),console.log(`Selected radio option: ${t[0]}`);break}}else a.length>0&&(a[0].click(),console.log("Selected first radio option"));break;case"checkbox":n.checked=!0,n.dispatchEvent(new Event("change",{bubbles:!0}));break}break;case"textarea":t.length>0?n.value=t[0]:n.value="I am interested in this position and believe my skills align well with the requirements.",n.dispatchEvent(new Event("input",{bubbles:!0}));break;case"select":if(t.length>0){for(let a=0;a<n.options.length;a++)if(n.options[a].text.trim()===t[0]){n.selectedIndex=a,n.dispatchEvent(new Event("change",{bubbles:!0})),console.log(`Selected option: ${t[0]}`);break}}else n.options.length>0&&(n.selectedIndex=0,n.dispatchEvent(new Event("change",{bubbles:!0})),console.log(`Selected first option: ${n.options[0].text.trim()}`));break}return await new Promise(a=>setTimeout(a,500)),!0}return console.log(`Question not found: ${e}`),!1}catch(o){return console.error(`Error answering question "${e}":`,o),!1}}static async processFormQuestions(){try{console.log("Processing form questions");let e=document.querySelectorAll("div.fb-dash-form-element");console.log(`Found ${e.length} form elements`);for(let t of e)try{let o=t.querySelector("label");if(!o){console.log("No label found for form element");continue}let r=o.textContent.trim();r=r.replace(/(.+?)\1/,"$1"),console.log(`Processing question: ${r}`);let l=t.querySelector("input, textarea, select");if(!l){console.log("No input field found for question");continue}let i=[];switch(l.tagName.toLowerCase()){case"input":l.type==="radio"&&t.querySelectorAll('input[type="radio"]').forEach(a=>{let p=t.querySelector(`label[for="${a.id}"]`);p&&i.push(p.textContent.trim())});break;case"select":i=Array.from(l.options).map(n=>n.text.trim());break}i.length>0&&(console.log(`Available options for "${r}":`),i.forEach((n,a)=>{})),await this.answerQuestion(r,i)}catch(o){console.error(`Error processing form element: ${o.message}`)}return console.log("Completed processing form questions"),!0}catch(e){return console.error("Error in processFormQuestions:",e),!1}}},u=f;var g=!1,y=!0;async function d(){return g?!1:(s("Auto-apply process stopped by user"),b("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0)}function s(c,e=null){if(!y)return;let o=`[EasyJob Debug ${new Date().toISOString().split("T")[1]}] ${c}`;e?console.log(o,e):console.log(o)}function b(c,e="info"){s(`Status Update: ${e} - ${c}`),chrome.runtime.sendMessage({type:"STATUS_UPDATE",text:c,status:e})}async function w(){try{if(s("Starting auto-apply process"),s("Current URL:",window.location.href),await d())return;let c=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(s("Search element found:",!!c),!c){s("Available elements on page:",{body:document.body.innerHTML.substring(0,500)+"...",possibleSelectors:{scaffold:document.querySelector(".scaffold-layout"),jobsSearch:document.querySelector(".jobs-search-two-pane__layout"),anyJobsRelated:document.querySelectorAll('[class*="jobs-"]')}}),b("Could not find jobs list. Please make sure you are on LinkedIn jobs page.","error");return}s("Getting total jobs count");let e=await u.getTotalJobsSearchCount(c);s("Total jobs found:",e),b(`Found ${e} jobs to process`,"info"),s("Getting available pages");let t=await u.getAvailablePages(c,e);s("Total pages found:",t);for(let o=1;o<=t;o++){if(await d())return;s(`Processing page ${o}/${t}`),b(`Processing page ${o} of ${t}`,"info");let r=await u.getListOfJobsOnPage(c);s(`Found ${r.length} jobs on page ${o}`);for(let l of r){if(await d())return;try{let i=await u.getJobClickableElement(l);if(await u.clickOnJob(i),s("Clicked on job"),await u.scrollDownToLoadNextJob(l),s("Scrolled to job"),await d())return;let n=await u.getAllJobInfo();if(s("Job info:",n),await u.clickEasyApply(),s("Attempted to click Easy Apply"),await new Promise(a=>setTimeout(a,2e3)),await d()){await u.closeForm(!1);return}await u.processForm(d),s("Processed application form"),await u.closeForm(!1),s("Closed application form")}catch(i){console.error("Error processing job:",i),s("Error processing job:",{error:i.message,stack:i.stack}),b("Error processing job. Continuing to next one...","error"),await u.closeForm(!1)}await d()||(await new Promise(i=>setTimeout(i,3e3)),s("Waited cooldown period"))}}await d()||(s("Auto-apply process completed"),b("Auto-apply process completed!","success"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}))}catch(c){console.error("Error in auto-apply process:",c),s("Fatal error in auto-apply process:",{error:c.message,stack:c.stack}),b("Error in auto-apply process","error"),await u.closeForm(!1)}}chrome.runtime.onMessage.addListener((c,e,t)=>(s("Received message:",c),c.action==="START_AUTO_APPLY"?g||(g=!0,s("Starting auto-apply process"),w()):c.action==="STOP_AUTO_APPLY"?(s("Stopping auto-apply process"),g=!1):c.action==="GET_STATE"&&(s("Getting current state"),t({isRunning:g})),!0));})();
