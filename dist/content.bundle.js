(()=>{var y=class{static async getTotalJobsSearchCount(o){try{await new Promise(r=>setTimeout(r,1e3));let e=o.querySelector(".jobs-search-results-list__subtitle");if(e){let r=e.textContent.trim(),a=parseInt(r.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return console.log(`Total jobs found: ${a}`),a}else return console.log("No results found"),0}catch(e){return console.error("An error occurred while fetching total jobs count:",e),0}}static async getAvailablePages(o,e){try{await new Promise(b=>setTimeout(b,1e3));let r=o.querySelector('ul[class*="jobs-search-pagination__pages"]');if(!r)return console.log("Pagination list not found."),0;let a=r.querySelectorAll("li");if(a.length===0)return console.log("No pagination items found."),0;let n=a[a.length-1];console.log(`Last page: ${n}`);let c=Math.ceil(e/25);return console.log(`Total pages available: ${c}`),c}catch(r){return console.error("Exception occurred while fetching available pages:",r),0}}static async getListOfJobsOnPage(o){try{await new Promise(a=>setTimeout(a,1e3));let e=o.querySelector(".scaffold-layout__list");if(!e)return console.log("Jobs container not found."),[];let r=e.querySelectorAll("li[class*='scaffold-layout__list-item']");return console.log(`Found ${r.length} jobs on this page.`),Array.from(r)}catch(e){return console.error("Exception occurred while fetching the list of jobs:",e),[]}}static async getJobClickableElement(o){try{await new Promise(r=>setTimeout(r,1e3));let e=o.querySelector("a");return e||(console.log("Could not find clickable element for job"),null)}catch(e){return console.error("Exception occurred while fetching clickable element:",e),null}}static async scrollDownToLoadNextJob(o){try{await new Promise(e=>setTimeout(e,1e3)),o.scrollIntoView({behavior:"smooth",block:"center"}),console.log("Scrolled down to load next job")}catch(e){console.error("Error while scrolling down to load next job",e)}}static async getJobElements(o){try{await new Promise(r=>setTimeout(r,1e3));let e=o.querySelector(".jobs-search__job-details");return e?(console.log("Found job elements"),e):(console.log("Could not find job elements"),null)}catch(e){return console.error("Error while fetching job elements",e),null}}static async clickOnJob(o){try{o.click(),console.log("Clicked on job element")}catch(e){console.info("could not click on job element",e)}}static async clickEasyApply(){try{let o=document.querySelector(".jobs-s-apply button");o&&(o.click(),console.log("Clicked on easy apply button"))}catch(o){console.error("Error while clicking on apply button",o)}}static async closeForm(o=!1){var e,r;try{let a=document.querySelector('button[aria-label="Dismiss"]');if(a||(a=document.querySelector('button[aria-label="Close"]')||document.querySelector('button[aria-label="Cancel"]')||document.querySelector("button[data-test-modal-close-btn]")),a){if(a.click(),await new Promise(n=>setTimeout(n,1e3)),o){let n=document.querySelector('button[data-control-name="save_application_btn"]');n&&(n.click(),console.log("closed form and saved application"))}else{let n=document.querySelector('button[data-control-name="discard_application_confirm_btn"]')||document.querySelector("button[data-test-dialog-secondary-btn]");n&&(n.click(),console.log("closed form and discarded application"))}await new Promise(n=>setTimeout(n,1e3))}}catch(a){console.error("Error while closing form",a);try{let n=document.querySelectorAll("button");for(let c of n)(c.textContent.toLowerCase().includes("close")||c.textContent.toLowerCase().includes("cancel")||(e=c.getAttribute("aria-label"))!=null&&e.toLowerCase().includes("close")||(r=c.getAttribute("aria-label"))!=null&&r.toLowerCase().includes("dismiss"))&&(c.click(),await new Promise(b=>setTimeout(b,500)))}catch(n){console.error("Failed final attempt to close form",n)}}}static async clickNextPage(){try{await new Promise(e=>setTimeout(e,1e3));let o=document.querySelector('button[aria-label="Continue to next step"]');o&&(o.click(),console.log("Clicked on next page button"))}catch(o){console.error("Error while clicking on next page button",o)}}static async clickPreviousPage(){try{await new Promise(e=>setTimeout(e,1e3));let o=document.querySelector('button[aria-label="Back to previous step"]');o&&(o.click(),console.log("Clicked on previous page button"))}catch(o){console.error("Error while clicking on previous page button",o)}}static async clickReviewApplication(){try{await new Promise(e=>setTimeout(e,1e3));let o=document.querySelector('button[aria-label="Review your application"]');o&&(o.click(),console.log("Clicked on review button"))}catch(o){console.error("Error while clicking on review button",o)}}static async clickSubmitApplication(){try{await new Promise(e=>setTimeout(e,1e3));let o=document.querySelector('button[aria-label="Submit application"]');o&&(o.click(),console.log("Clicked on submit button"))}catch(o){console.error("Error while clicking on submit button",o)}}},l=y;var m=!1,w=!0;async function u(){return m?!1:(t("Auto-apply process stopped by user"),p("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0)}function t(s,o=null){if(!w)return;let r=`[EasyJob Debug ${new Date().toISOString().split("T")[1]}] ${s}`;o?console.log(r,o):console.log(r)}function p(s,o="info"){t(`Status Update: ${o} - ${s}`),chrome.runtime.sendMessage({type:"STATUS_UPDATE",text:s,status:o})}async function h(){var s,o;try{if(t("Starting auto-apply process"),t("Current URL:",window.location.href),await u())return;let e=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(t("Search element found:",!!e),!e){t("Available elements on page:",{body:document.body.innerHTML.substring(0,500)+"...",possibleSelectors:{scaffold:document.querySelector(".scaffold-layout"),jobsSearch:document.querySelector(".jobs-search-two-pane__layout"),anyJobsRelated:document.querySelectorAll('[class*="jobs-"]')}}),p("Could not find jobs list. Please make sure you are on LinkedIn jobs page.","error");return}t("Getting total jobs count");let r=await l.getTotalJobsSearchCount(e);t("Total jobs found:",r),p(`Found ${r} jobs to process`,"info"),t("Getting available pages");let a=await l.getAvailablePages(e,r);t("Total pages found:",a);for(let n=1;n<=a;n++){if(await u())return;t(`Processing page ${n}/${a}`),p(`Processing page ${n} of ${a}`,"info");let c=await l.getListOfJobsOnPage(e);t(`Found ${c.length} jobs on page ${n}`);for(let b of c){if(await u())return;try{t("Processing job:",b.innerHTML.substring(0,200));let i=await l.getJobClickableElement(b);if(i){if(await u()){await l.closeForm(!1);return}if(await l.scrollDownToLoadNextJob(b),t("Scrolled to job"),await u())return;if(await l.clickOnJob(i),t("Clicked on job"),await new Promise(f=>setTimeout(f,2e3)),await u()){await l.closeForm(!1);return}if(await l.clickEasyApply(),t("Attempted to click Easy Apply"),await u()){await l.closeForm(!1);return}let d=((s=i.querySelector(".job-card-list__title"))==null?void 0:s.textContent.trim())||"Unknown Position",g=((o=i.querySelector(".job-card-container__company-name"))==null?void 0:o.textContent.trim())||"Unknown Company";t("Job details:",{jobTitle:d,company:g}),await storeJobApplication({title:d,company:g,status:"Applied"}),t("Stored job application"),p(`Applied to ${d} at ${g}`,"success"),await l.closeForm(!0),t("Closed application form")}}catch(i){console.error("Error processing job:",i),t("Error processing job:",{error:i.message,stack:i.stack}),p("Error processing job. Continuing to next one...","error"),await l.closeForm(!1)}await u()||(await new Promise(i=>setTimeout(i,3e3)),t("Waited cooldown period"))}}await u()||(t("Auto-apply process completed"),p("Auto-apply process completed!","success"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}))}catch(e){console.error("Error in auto-apply process:",e),t("Fatal error in auto-apply process:",{error:e.message,stack:e.stack}),p("Error in auto-apply process","error"),await l.closeForm(!1)}}chrome.runtime.onMessage.addListener((s,o,e)=>(t("Received message:",s),s.action==="START_AUTO_APPLY"?m||(m=!0,t("Starting auto-apply process"),h()):s.action==="STOP_AUTO_APPLY"?(t("Stopping auto-apply process"),m=!1):s.action==="GET_STATE"&&(t("Getting current state"),e({isRunning:m})),!0));})();
