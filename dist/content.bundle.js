(()=>{var f=class{static async getTotalJobsSearchCount(e){try{await new Promise(n=>setTimeout(n,1e3));let t=e.querySelector(".jobs-search-results-list__subtitle");if(t){let n=t.textContent.trim(),r=parseInt(n.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return console.log(`Total jobs found: ${r}`),r}else return console.log("No results found"),0}catch(t){return console.error("An error occurred while fetching total jobs count:",t),0}}static async getAvailablePages(e,t){try{await new Promise(a=>setTimeout(a,1e3));let n=e.querySelector('ul[class*="jobs-search-pagination__pages"]');if(!n)return console.log("Pagination list not found."),0;let r=n.querySelectorAll("li");if(r.length===0)return console.log("No pagination items found."),0;let o=r[r.length-1];console.log(`Last page: ${o}`);let s=Math.ceil(t/25);return console.log(`Total pages available: ${s}`),s}catch(n){return console.error("Exception occurred while fetching available pages:",n),0}}static async getListOfJobsOnPage(e){try{await new Promise(r=>setTimeout(r,1e3));let t=e.querySelector(".scaffold-layout__list");if(!t)return console.log("Jobs container not found."),[];let n=t.querySelectorAll("li[class*='scaffold-layout__list-item']");return console.log(`Found ${n.length} jobs on this page.`),Array.from(n)}catch(t){return console.error("Exception occurred while fetching the list of jobs:",t),[]}}static async getJobClickableElement(e){try{await new Promise(n=>setTimeout(n,1e3));let t=e.querySelector("a");return t||(console.log("Could not find clickable element for job"),null)}catch(t){return console.error("Exception occurred while fetching clickable element:",t),null}}static async scrollDownToLoadNextJob(e){try{await new Promise(t=>setTimeout(t,1e3)),e.scrollIntoView({behavior:"smooth",block:"center"}),console.log("Scrolled down to load next job")}catch(t){console.error("Error while scrolling down to load next job",t)}}static async clickOnJob(e){try{e.click(),console.log("Clicked on job element")}catch(t){console.info("could not click on job element",t)}}static async clickEasyApply(){try{let e=document.querySelector(".jobs-s-apply button");if(e)return e.click(),console.log("Clicked on easy apply button"),!0;throw new Error("Easy apply button not found")}catch(e){throw console.error("Error while clicking on easy apply button",e),e}}static async getJobTitle(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__job-title h1");if(e){let t=e.textContent.trim();return console.log(`Found job title: ${t}`),t}return console.log("Job title not found"),null}catch(e){return console.error("Error while getting job title:",e),null}}static async getCompanyName(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__company-name a");if(e){let t=e.textContent.trim();return console.log(`Found company name: ${t}`),t}return console.log("Company name not found"),null}catch(e){return console.error("Error while getting company name:",e),null}}static async getLocation(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text");if(e){let t=e.textContent.trim();return console.log(`Found location: ${t}`),t}return console.log("Location not found"),null}catch(e){return console.error("Error while getting location:",e),null}}static async getJobType(){try{let e=document.querySelector(".job-details-preferences-and-skills__pill .ui-label");if(e){let n=e.textContent.trim().split("Matches")[0].trim();return console.log(`Found job type: ${n}`),n}return console.log("Job type not found"),null}catch(e){return console.error("Error while getting job type:",e),null}}static async getJobDescription(){try{let e=document.querySelector(".jobs-description__content");if(e){let t=e.textContent.trim();return console.log("Found job description"),t}return console.log("Job description not found"),null}catch(e){return console.error("Error while getting job description:",e),null}}static async getApplicantCount(){try{let e=document.querySelector(".jobs-premium-applicant-insights__list-item .jobs-premium-applicant-insights__list-num");if(e){let t=e.textContent.trim();return console.log(`Found applicant count: ${t}`),t}return console.log("Applicant count not found"),null}catch(e){return console.error("Error while getting applicant count:",e),null}}static async getAllJobInfo(){try{let e={title:await this.getJobTitle(),company:await this.getCompanyName(),location:await this.getLocation(),jobType:await this.getJobType(),description:await this.getJobDescription(),applicantCount:await this.getApplicantCount()};return console.log("Retrieved all job information"),e}catch(e){return console.error("Error while getting all job information:",e),null}}static async closeForm(e=!1){var t,n;try{let r=document.querySelector('button[aria-label="Dismiss"]');if(r||(r=document.querySelector('button[aria-label="Close"]')||document.querySelector('button[aria-label="Cancel"]')||document.querySelector("button[data-test-modal-close-btn]")),r){if(r.click(),await new Promise(o=>setTimeout(o,1e3)),e){let o=document.querySelector('button[data-control-name="save_application_btn"]');o&&(o.click(),console.log("closed form and saved application"))}else{let o=document.querySelector('button[data-control-name="discard_application_confirm_btn"]')||document.querySelector("button[data-test-dialog-secondary-btn]");o&&(o.click(),console.log("closed form and discarded application"))}await new Promise(o=>setTimeout(o,1e3))}}catch(r){console.error("Error while closing form",r);try{let o=document.querySelectorAll("button");for(let s of o)(s.textContent.toLowerCase().includes("close")||s.textContent.toLowerCase().includes("cancel")||(t=s.getAttribute("aria-label"))!=null&&t.toLowerCase().includes("close")||(n=s.getAttribute("aria-label"))!=null&&n.toLowerCase().includes("dismiss"))&&(s.click(),await new Promise(a=>setTimeout(a,500)))}catch(o){console.error("Failed final attempt to close form",o)}}}static async clickNextPage(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Continue to next step"]');e&&(e.click(),console.log("Clicked on next page button"))}catch(e){console.error("Error while clicking on next page button",e)}}static async clickPreviousPage(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Back to previous step"]');e&&(e.click(),console.log("Clicked on previous page button"))}catch(e){console.error("Error while clicking on previous page button",e)}}static async clickReviewApplication(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Review your application"]');e&&(e.click(),console.log("Clicked on review button"))}catch(e){console.error("Error while clicking on review button",e)}}static async clickSubmitApplication(){try{await new Promise(t=>setTimeout(t,1e3));let e=document.querySelector('button[aria-label="Submit application"]');e&&(e.click(),console.log("Clicked on submit button"))}catch(e){console.error("Error while clicking on submit button",e)}}static async processForm(e){try{let t=Date.now(),n=3*60*1e3,r=!1;for(;!r&&Date.now()-t<n;){if(console.log("Starting form processing iteration"),await e())return console.log("Stop requested during form processing"),!1;await this.processFormQuestions();let o=Date.now(),s=60*1e3,a=!1;for(;!a&&Date.now()-o<s;){if(await e())return console.log("Stop requested during review loop"),!1;let b=document.querySelector('button[aria-label="Review your application"]');if(b){await this.processFormQuestions(),b.click(),console.log("Found and clicked review button"),a=!0,await new Promise(d=>setTimeout(d,2e3));let p=document.querySelector('button[aria-label="Submit application"]');if(p){p.click(),console.log("Clicked submit button after review"),r=!0;break}}else{let p=document.querySelector('button[aria-label="Continue to next step"]');if(p)await this.processFormQuestions(),p.click(),console.log("Clicked next page button"),await new Promise(d=>setTimeout(d,2e3));else{let d=document.querySelector('button[aria-label="Submit application"]');if(d){d.click(),console.log("Found submit button without review"),r=!0;break}}}await new Promise(p=>setTimeout(p,2e3))}a||console.log("Review button not found within 1 minute, continuing to next iteration"),await new Promise(b=>setTimeout(b,2e3))}return r?(console.log("Form processed and submitted successfully"),!0):(console.log("Form processing timed out after 3 minutes"),!1)}catch(t){return console.error("Error while processing form:",t),!1}}static async processFormQuestions(){try{console.log("Processing form questions");let e=document.querySelectorAll("div.fb-dash-form-element");console.log(`Found ${e.length} form elements`);for(let t of e)try{let n=t.querySelector("label");if(!n){console.log("No label found for form element");continue}let r=n.textContent.trim();console.log(`Processing question: ${r}`);let o=t.querySelector("input, textarea, select");if(!o){console.log("No input field found for question");continue}switch(o.tagName.toLowerCase()){case"input":switch(o.type){case"text":case"tel":case"email":r.toLowerCase().includes("phone")||r.toLowerCase().includes("mobile")?o.value="1234567890":r.toLowerCase().includes("email")?o.value="example@email.com":r.toLowerCase().includes("name")?o.value="John Doe":o.value="Yes",o.dispatchEvent(new Event("input",{bubbles:!0}));break;case"radio":let s=t.querySelectorAll('input[type="radio"]');s.length>0&&s[0].click();break;case"checkbox":o.checked=!0,o.dispatchEvent(new Event("change",{bubbles:!0}));break}break;case"textarea":o.value="I am interested in this position and believe my skills align well with the requirements.",o.dispatchEvent(new Event("input",{bubbles:!0}));break;case"select":o.options.length>0&&(o.selectedIndex=0,o.dispatchEvent(new Event("change",{bubbles:!0})));break}await new Promise(s=>setTimeout(s,500))}catch(n){console.error(`Error processing form element: ${n.message}`)}return console.log("Completed processing form questions"),!0}catch(e){return console.error("Error in processFormQuestions:",e),!1}}},c=f;var g=!1,y=!0;async function u(){return g?!1:(l("Auto-apply process stopped by user"),m("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0)}function l(i,e=null){if(!y)return;let n=`[EasyJob Debug ${new Date().toISOString().split("T")[1]}] ${i}`;e?console.log(n,e):console.log(n)}function m(i,e="info"){l(`Status Update: ${e} - ${i}`),chrome.runtime.sendMessage({type:"STATUS_UPDATE",text:i,status:e})}async function w(){try{if(l("Starting auto-apply process"),l("Current URL:",window.location.href),await u())return;let i=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(l("Search element found:",!!i),!i){l("Available elements on page:",{body:document.body.innerHTML.substring(0,500)+"...",possibleSelectors:{scaffold:document.querySelector(".scaffold-layout"),jobsSearch:document.querySelector(".jobs-search-two-pane__layout"),anyJobsRelated:document.querySelectorAll('[class*="jobs-"]')}}),m("Could not find jobs list. Please make sure you are on LinkedIn jobs page.","error");return}l("Getting total jobs count");let e=await c.getTotalJobsSearchCount(i);l("Total jobs found:",e),m(`Found ${e} jobs to process`,"info"),l("Getting available pages");let t=await c.getAvailablePages(i,e);l("Total pages found:",t);for(let n=1;n<=t;n++){if(await u())return;l(`Processing page ${n}/${t}`),m(`Processing page ${n} of ${t}`,"info");let r=await c.getListOfJobsOnPage(i);l(`Found ${r.length} jobs on page ${n}`);for(let o of r){if(await u())return;try{let s=await c.getJobClickableElement(o);if(await c.clickOnJob(s),l("Clicked on job"),await c.scrollDownToLoadNextJob(o),l("Scrolled to job"),await u())return;let a=await c.getAllJobInfo();if(l("Job info:",a),await c.clickEasyApply(),l("Attempted to click Easy Apply"),await new Promise(b=>setTimeout(b,2e3)),await u()){await c.closeForm(!1);return}await c.processForm(u),l("Processed application form"),await c.closeForm(!1),l("Closed application form")}catch(s){console.error("Error processing job:",s),l("Error processing job:",{error:s.message,stack:s.stack}),m("Error processing job. Continuing to next one...","error"),await c.closeForm(!1)}await u()||(await new Promise(s=>setTimeout(s,3e3)),l("Waited cooldown period"))}}await u()||(l("Auto-apply process completed"),m("Auto-apply process completed!","success"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}))}catch(i){console.error("Error in auto-apply process:",i),l("Fatal error in auto-apply process:",{error:i.message,stack:i.stack}),m("Error in auto-apply process","error"),await c.closeForm(!1)}}chrome.runtime.onMessage.addListener((i,e,t)=>(l("Received message:",i),i.action==="START_AUTO_APPLY"?g||(g=!0,l("Starting auto-apply process"),w()):i.action==="STOP_AUTO_APPLY"?(l("Stopping auto-apply process"),g=!1):i.action==="GET_STATE"&&(l("Getting current state"),t({isRunning:g})),!0));})();
