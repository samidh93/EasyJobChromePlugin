var y=class{static async wait(e=1e3){await new Promise(t=>setTimeout(t,e))}static debugLog(e){console.log("[".concat(this.constructor.name,"] ").concat(e))}static errorLog(e,t){console.error("[".concat(this.constructor.name,"] ").concat(e,":"),t)}},u=y;var w=class extends u{static async getTotalJobsSearchCount(e){try{await this.wait();let t=e.querySelector(".jobs-search-results-list__subtitle");if(t){let o=t.textContent.trim(),r=parseInt(o.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return this.debugLog("Total jobs found: ".concat(r)),r}else return this.debugLog("No results found"),0}catch(t){return this.errorLog("Error fetching total jobs count",t),0}}static async getAvailablePages(e,t){try{await this.wait();let o=e.querySelector('ul[class*="jobs-search-pagination__pages"]');if(!o)return this.debugLog("Pagination list not found."),0;let r=o.querySelectorAll("li");if(r.length===0)return this.debugLog("No pagination items found."),0;let n=r[r.length-1];this.debugLog("Last page: ".concat(n));let s=Math.ceil(t/25);return this.debugLog("Total pages available: ".concat(s)),s}catch(o){return this.errorLog("Error fetching available pages",o),0}}static async getListOfJobsOnPage(e){try{await this.wait();let t=e.querySelector(".scaffold-layout__list");if(!t)return this.debugLog("Jobs container not found."),[];let o=t.querySelectorAll("li[class*='scaffold-layout__list-item']");return this.debugLog("Found ".concat(o.length," jobs on this page.")),Array.from(o)}catch(t){return this.errorLog("Error fetching list of jobs",t),[]}}static async goToNextPage(){try{await this.wait();let e=document.querySelector('button[aria-label="View next page"]')||document.querySelector("button.jobs-search-pagination__button--next")||document.querySelector('button[aria-label="Next"]');return e&&!e.disabled?(this.debugLog("Found next page button, clicking..."),e.click(),this.debugLog("Clicked next page button"),await this.wait(3e3),!0?(this.debugLog("Successfully navigated to next page"),!0):(this.debugLog("Jobs failed to load on next page"),!1)):(this.debugLog("Next page button not found or disabled - likely on last page"),!1)}catch(e){return this.errorLog("Error navigating to next page",e),!1}}static async isOnLastPage(){try{let e=document.querySelector('button[aria-label="View next page"]')||document.querySelector("button.jobs-search-pagination__button--next");return!e||e.disabled}catch(e){return this.errorLog("Error checking if on last page",e),!0}}},f=w;var L=class extends u{static async getJobClickableElement(e){try{await this.wait();let t=e.querySelector("a");return t||(this.debugLog("Could not find clickable element for job"),null)}catch(t){return this.errorLog("Error fetching clickable element",t),null}}static async scrollDownToLoadNextJob(e){try{await this.wait(),e.scrollIntoView({behavior:"smooth",block:"center"}),this.debugLog("Scrolled down to load next job")}catch(t){this.errorLog("Error scrolling down to load next job",t)}}static async clickOnJob(e){try{e.click(),this.debugLog("Clicked on job element")}catch(t){this.debugLog("Could not click on job element",t)}}static async isEasyButtonAvailable(){try{return document.querySelector(".jobs-s-apply button")?(this.debugLog("found easy apply button"),!0):(this.debugLog("easy apply button not found"),!1)}catch(e){return console.error("easy apply button not found error",e),!1}}static async clickEasyApply(){try{let e=document.querySelector(".jobs-s-apply button");if(e)return e.click(),this.debugLog("Clicked on easy apply button"),!0;throw new Error("Easy apply button not found")}catch(e){throw this.errorLog("Error clicking on easy apply button",e),e}}},m=L;var k=class extends u{static async getJobId(){try{let e=new URLSearchParams(window.location.search).get("currentJobId");return e?(this.debugLog("Found job ID: ".concat(e)),e):(this.debugLog("Job ID not found in URL"),null)}catch(e){return this.errorLog("Error getting job ID",e),null}}static async getJobTitle(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__job-title h1");if(e){let t=e.textContent.trim();return this.debugLog("Found job title: ".concat(t)),t}return this.debugLog("Job title not found"),null}catch(e){return this.errorLog("Error getting job title",e),null}}static async getCompanyName(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__company-name a");if(e){let t=e.textContent.trim();return this.debugLog("Found company name: ".concat(t)),t}return this.debugLog("Company name not found"),null}catch(e){return this.errorLog("Error getting company name",e),null}}static async getLocation(){try{let e=document.querySelector(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text");if(e){let t=e.textContent.trim();return this.debugLog("Found location: ".concat(t)),t}return this.debugLog("Location not found"),null}catch(e){return this.errorLog("Error getting location",e),null}}static async getJobType(){try{let e=document.querySelectorAll("button.job-details-preferences-and-skills .job-details-preferences-and-skills__pill");if(e.length>1){let o=e[1].querySelectorAll("span");if(o.length>0){let r=o[0].querySelectorAll("span");if(r.length>0){let n=r[0].textContent.trim();if(n)return this.debugLog("Found jobType type: ".concat(n)),n}}}return this.debugLog("jobType type not found"),null}catch(e){return this.errorLog("Error getting jobType type",e),null}}static async getRemoteType(){try{let e=document.querySelectorAll("button.job-details-preferences-and-skills .job-details-preferences-and-skills__pill");if(e.length>0){let o=e[0].querySelectorAll("span");if(o.length>0){let r=o[0].querySelectorAll("span");if(r.length>0){let n=r[0].textContent.trim();if(n)return this.debugLog("Found remote type: ".concat(n)),n}}}return this.debugLog("Remote type not found"),null}catch(e){return this.errorLog("Error getting remote type",e),null}}static async getJobDescription(){try{let e=document.querySelector(".jobs-description__content");if(e){let t=e.textContent.trim();return this.debugLog("Found job description"),t}return this.debugLog("Job description not found"),null}catch(e){return this.errorLog("Error getting job description",e),null}}static async getApplicantCount(){try{let e=document.querySelectorAll(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text"),t=e.length>0?e[e.length-1]:null;if(t){let o=t.textContent.trim();return this.debugLog("Found applicant count: ".concat(o)),o}return this.debugLog("Applicant count not found"),null}catch(e){return this.errorLog("Error getting applicant count",e),null}}static async getPostedDate(){try{let e=document.querySelectorAll(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text")[2];if(e){let t=e.textContent.trim();return this.debugLog("Found posted date: ".concat(t)),t}return this.debugLog("posted date not found"),null}catch(e){return this.errorLog("Error getting applicant count",e),null}}static async getAllJobInfo(){try{let e={jobId:await this.getJobId(),title:await this.getJobTitle(),company:await this.getCompanyName(),location:await this.getLocation(),jobType:await this.getJobType(),remoteType:await this.getRemoteType(),description:await this.getJobDescription(),applicantCount:await this.getApplicantCount(),postedDate:await this.getPostedDate()};return this.debugLog("Retrieved all job information"),e}catch(e){return this.errorLog("Error getting all job information",e),null}}},E=k;var S=class{constructor(){this.model="qwen2.5:3b",this.user_data=null}async setUserContext(e){try{return typeof e=="string"?(console.log("User context set as string - should be parsed object"),this.user_data=e):this.user_data=e,console.log("User context set successfully"),{success:!0}}catch(t){return console.error("Error in setUserContext:",t),{success:!1,error:t.message}}}async answerQuestion(e,t=null){var o;try{console.log("Answering question:",e),console.log("Options:",t);let r=this.getDirectAnswer(e);if(r){if(console.log("Found direct answer:",r),t&&Array.isArray(t)&&t.length>0){let b=this.matchToOption(r,t);return console.log("Matched direct answer to option:",b),b}return r}let n=this.buildSimplePrompt(e,t),s=await this.callOllamaAPI({model:this.model,prompt:n,stream:!1}),c=((o=s==null?void 0:s.response)==null?void 0:o.trim())||"";return t&&Array.isArray(t)&&t.length>0&&(c=this.matchToOption(c,t)),console.log("Final answer:",c),c||"Information not available"}catch(r){return console.error("Error in answerQuestion:",r),t&&Array.isArray(t)&&t.length>0?t.length>1?t[1]:t[0]:"Information not available"}}getDirectAnswer(e){var r;if(!((r=this.user_data)!=null&&r.personal_information))return null;let t=this.user_data.personal_information,o=e.toLowerCase();return o.includes("email")||o.includes("e-mail")?t.email||null:o.includes("phone")||o.includes("mobile")||o.includes("telefon")?(t.phone_prefix?"".concat(t.phone_prefix).concat(t.phone):t.phone)||null:o.includes("first name")||o.includes("vorname")?t.name||null:o.includes("last name")||o.includes("surname")||o.includes("nachname")?t.surname||null:o.includes("country")&&!o.includes("code")&&t.country||null}buildSimplePrompt(e,t){let o=this.formatUserDataAsText(),r="Based on the following resume information, please answer the question accurately and concisely:\n\nRESUME:\n".concat(o,"\n\nQUESTION: ").concat(e);if(t&&Array.isArray(t)&&t.length>0){let n=t.map(s=>'"'.concat(s,'"')).join(", ");r+="\nAvailable Options: [".concat(n,"]\n\nIMPORTANT: You MUST choose EXACTLY ONE option from the list above. Your answer should match one of the options EXACTLY as written.")}return r+="\n\nANSWER:",r}formatUserDataAsText(){return this.user_data?typeof this.user_data=="string"?this.user_data:this.formatObject(this.user_data,0):"No user data available."}formatObject(e,t=0){let o="  ".repeat(t),r="";if(typeof e=="object"&&e!==null)if(Array.isArray(e))for(let n of e)typeof n=="object"&&n!==null?r+="".concat(o,"- ").concat(this.formatObject(n,t+1)):r+="".concat(o,"- ").concat(n,"\n");else for(let[n,s]of Object.entries(e)){let c=n.toUpperCase().replace(/_/g," ");r+="".concat(o).concat(c,":\n"),typeof s=="object"&&s!==null?r+=this.formatObject(s,t+1):r+="".concat(o,"  ").concat(s,"\n")}else r+="".concat(o).concat(e,"\n");return r}matchToOption(e,t){if(!e||!t||t.length===0)return(t==null?void 0:t.length)>0?t[0]:"Not available";for(let o of t)if(o.toLowerCase()===e.toLowerCase())return o;for(let o of t)if(o.toLowerCase().includes(e.toLowerCase())||e.toLowerCase().includes(o.toLowerCase()))return o;if(e.toLowerCase().includes("germany")||e.toLowerCase().includes("deutsch")){for(let o of t)if(o.toLowerCase().includes("deutsch")||o.toLowerCase().includes("germany")||o.includes("+49"))return o}return t.length>1?t[1]:t[0]}async callOllamaAPI(e){try{return new Promise((t,o)=>{chrome.runtime.sendMessage({action:"callOllama",endpoint:"generate",data:e},r=>{chrome.runtime.lastError?o(new Error(chrome.runtime.lastError.message)):r.success===!1?o(new Error(r.error||"Unknown error from Ollama API")):t(r.data)})})}catch(t){throw console.error("Error calling Ollama API:",t),t}}async checkOllamaConnection(){try{return new Promise((e,t)=>{chrome.runtime.sendMessage({action:"testOllama"},o=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):o&&o.success?e(!0):t(new Error((o==null?void 0:o.error)||"Failed to connect to Ollama"))})})}catch(e){throw console.error("Error checking Ollama connection:",e),e}}},j=S;var A=class extends u{static async closeForm(e=!1){var t,o;try{let r=document.querySelector('button[aria-label="Dismiss"]');if(r||(r=document.querySelector('button[aria-label="Close"]')||document.querySelector('button[aria-label="Cancel"]')||document.querySelector("button[data-test-modal-close-btn]")),r){if(r.click(),await this.wait(),e){let n=document.querySelector('button[data-control-name="save_application_btn"]');n&&(n.click(),this.debugLog("Closed form and saved application"))}else{let n=document.querySelector('button[data-control-name="discard_application_confirm_btn"]')||document.querySelector("button[data-test-dialog-secondary-btn]");n&&(n.click(),this.debugLog("Closed form and discarded application"))}await this.wait()}}catch(r){this.errorLog("Error closing form",r);try{let n=document.querySelectorAll("button");for(let s of n)(s.textContent.toLowerCase().includes("close")||s.textContent.toLowerCase().includes("cancel")||(t=s.getAttribute("aria-label"))!=null&&t.toLowerCase().includes("close")||(o=s.getAttribute("aria-label"))!=null&&o.toLowerCase().includes("dismiss"))&&(s.click(),await this.wait(500))}catch(n){this.errorLog("Failed final attempt to close form",n)}}}static async clickNextPage(){try{await this.wait();let e=document.querySelector('button[aria-label="Continue to next step"]');e&&(e.click(),this.debugLog("Clicked on next page button"))}catch(e){this.errorLog("Error clicking on next page button",e)}}static async clickPreviousPage(){try{await this.wait();let e=document.querySelector('button[aria-label="Back to previous step"]');e&&(e.click(),this.debugLog("Clicked on previous page button"))}catch(e){this.errorLog("Error clicking on previous page button",e)}}static async clickReviewApplication(){try{await this.wait();let e=document.querySelector('button[aria-label="Review your application"]');e&&(e.click(),this.debugLog("Clicked on review button"))}catch(e){this.errorLog("Error clicking on review button",e)}}static async clickSubmitApplication(){try{await this.wait();let e=document.querySelector('button[aria-label="Submit application"]');e&&(e.click(),this.debugLog("Clicked on submit button"))}catch(e){this.errorLog("Error clicking on submit button",e)}}static async clickDoneAfterSubmit(){try{let e=document.querySelector('button[aria-label="Done"]');e||(e=document.querySelector("button.artdeco-button span.artdeco-button__text"),this.debugLog("Found done button",e)),e?(e.click(),this.debugLog("Clicked on Done button")):this.debugLog("Done button not found")}catch(e){this.errorLog("Error clicking on Done button",e)}}static async clickDismissAfterSubmit(){try{let e=document.querySelector('button[aria-label="Dismiss"]');if(e||(e=document.querySelector("button[data-test-modal-close-btn]")),!e){let t=document.querySelectorAll("button.artdeco-button--circle.artdeco-modal__dismiss");for(let o of t)if(o.querySelector('svg use[href="#close-medium"]')){e=o;break}}e?(e.click(),this.debugLog("Clicked on Dismiss button")):this.debugLog("Dismiss button not found")}catch(e){this.errorLog("Error clicking on Dismiss button",e)}}static async findReviewButton(){try{return document.querySelector('button[aria-label="Review your application"]')}catch(e){return this.errorLog("Error finding review button",e),null}}static async findNextButton(){try{return document.querySelector('button[aria-label="Continue to next step"]')}catch(e){return this.errorLog("Error finding next button",e),null}}static async findSubmitButton(){try{return document.querySelector('button[aria-label="Submit application"]')}catch(e){return this.errorLog("Error finding submit button",e),null}}static async findDoneButton(){try{let e=document.querySelector('button[aria-label="Done"]');if(!e){let t=document.querySelectorAll("button.artdeco-button");for(let o of t){let r=o.querySelector("span.artdeco-button__text");if(r&&r.textContent.trim()==="Done"){e=o;break}}}return e}catch(e){return this.errorLog("Error finding done button",e),null}}static async processForm(e){try{this.debugLog("Starting form processing");let t=setTimeout(async()=>{this.debugLog("Form processing timeout reached")},3*60*1e3),o=!1,r=!1;for(;!r;){if(typeof e=="function"?r=await e():e&&e.value!==void 0?r=e.value:r=!!e,r){this.debugLog("Stop requested during form processing");break}try{if(await this.findReviewButton()){this.debugLog("Found review button");let p=setTimeout(()=>{this.debugLog("Review processing timeout reached"),e.value=!0},1*60*1e3);if(document.querySelectorAll("div.fb-dash-form-element").length>0&&!o){if(this.debugLog("Found questions on current page, processing before review"),!await this.processFormQuestions(e)){this.debugLog("Form questions processing stopped by user");break}o=!0,this.debugLog("Current page form questions processed, will not reprocess")}else o?this.debugLog("Skipping redundant form processing for current page"):this.debugLog("No form questions found on current page");if(await this.clickReviewApplication(),await this.wait(2e3),typeof e=="function"?r=await e():e&&e.value!==void 0?r=e.value:r=!!e,r){this.debugLog("Stop requested after clicking review");break}if(document.querySelectorAll("div.fb-dash-form-element").length>0){if(this.debugLog("Found questions on review page"),!await this.processFormQuestions(e)){this.debugLog("Review questions processing stopped by user");break}}else this.debugLog("No questions found on review page");await this.clickSubmitApplication(),await this.wait(2e3),await this.clickDismissAfterSubmit(),this.debugLog("Clicked submit button after review"),clearTimeout(p);break}if(document.querySelectorAll("div.fb-dash-form-element").length>0&&!o){if(this.debugLog("Found form questions, processing..."),!await this.processFormQuestions(e)){this.debugLog("Form questions processing stopped by user");break}o=!0,this.debugLog("Form questions processed")}if(await this.findNextButton()){if(this.debugLog("Found next button, moving to next page"),await this.clickNextPage(),await this.wait(2e3),typeof e=="function"?r=await e():e&&e.value!==void 0?r=e.value:r=!!e,r){this.debugLog("Stop requested after navigation");break}o=!1;continue}if(await this.findSubmitButton()){if(this.debugLog("Found submit button, submitting application"),typeof e=="function"?r=await e():e&&e.value!==void 0?r=e.value:r=!!e,r){this.debugLog("Stop requested before final submit");break}await this.clickSubmitApplication(),await this.wait(2e3),await this.clickDismissAfterSubmit();break}this.debugLog("No navigation buttons found, waiting..."),await this.wait(1e3)}catch(n){this.errorLog("Error in form processing loop",n),await this.wait(2e3)}}return clearTimeout(t),this.debugLog("Form processing completed"),!0}catch(t){return this.errorLog("Error processing form",t),!1}}static async processFormQuestions(e=null){try{this.debugLog("Processing form questions");let t=document.querySelectorAll("div.fb-dash-form-element");this.debugLog("Found ".concat(t.length," form elements"));for(let o of t){if(e){let r=!1;if(typeof e=="function"?r=await e():e&&e.value!==void 0?r=e.value:r=!!e,r)return this.debugLog("Stop requested during form questions processing"),!1}try{let r=o.querySelector("legend span.fb-dash-form-element__label span")||o.querySelector("label");if(!r){this.debugLog("No label found for form element");continue}let n=r.textContent.trim();n=n.replace(/(.+?)\1/,"$1"),this.debugLog("Processing question: ".concat(n));let s=o.querySelector("input, textarea, select");if(!s){this.debugLog("No input field found for question");continue}let c=[];switch(s.tagName.toLowerCase()){case"input":s.type==="radio"&&o.querySelectorAll('input[type="radio"]').forEach(p=>{let h=o.querySelector('label[for="'.concat(p.id,'"]'));h&&c.push(h.textContent.trim())});break;case"select":c=Array.from(s.options).map(b=>b.text.trim());break}c.length>0&&this.debugLog('Available options for "'.concat(n,'":')),await this.answerQuestion(n,c,s,o)}catch(r){this.errorLog("Error processing form element: ".concat(r.message),r)}}return this.debugLog("Completed processing form questions"),!0}catch(t){return this.errorLog("Error in processFormQuestions",t),!1}}static async answerQuestion(e,t=[],o,r){try{let n=new j;this.debugLog("Answering question: ".concat(e)),this.debugLog("Available options:",t);try{let c=await chrome.storage.local.get("userResumeText");c&&c.userResumeText?(this.debugLog("Found user resume text in storage"),await n.setUserContext(c.userResumeText),this.debugLog("Set user context in AI instance")):this.debugLog("No user resume found in storage")}catch(c){this.errorLog("Error loading user resume from storage:",c)}let s=await n.answerQuestion(e,t);if(!s)return this.debugLog("No answer generated for question"),!1;switch(this.debugLog("AI Answer: ".concat(s)),o.tagName.toLowerCase()){case"input":switch(o.type){case"text":case"tel":case"email":o.value=s,o.dispatchEvent(new Event("input",{bubbles:!0}));break;case"radio":let c=r.querySelectorAll('input[type="radio"]');for(let b of c){let p=r.querySelector('label[for="'.concat(b.id,'"]'));if(p&&p.textContent.trim()===s){b.click(),this.debugLog("Selected radio option: ".concat(s));break}}break;case"checkbox":o.checked=!0,o.dispatchEvent(new Event("change",{bubbles:!0}));break}break;case"textarea":o.value=s,o.dispatchEvent(new Event("input",{bubbles:!0}));break;case"select":for(let c=0;c<o.options.length;c++)if(o.options[c].text.trim()===s){o.selectedIndex=c,o.dispatchEvent(new Event("change",{bubbles:!0})),this.debugLog("Selected option: ".concat(s));break}break}return await this.wait(500),!0}catch(n){return this.errorLog('Error answering question "'.concat(e,'"'),n),!1}}},x=A;function i(a,e=null){let t=new Date().toISOString().split("T")[1],o="[EasyJob Debug ".concat(t,"] ").concat(a);e?console.log(o,e):console.log(o)}function l(a,e="info"){i("Status Update: ".concat(e," - ").concat(a)),chrome.runtime.sendMessage({type:"STATUS_UPDATE",text:a,status:e})}async function d(a){if(!a)return i("Auto-apply process stopped by user (local check)"),l("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0;try{let e=await chrome.runtime.sendMessage({action:"getAutoApplyState"});if(e&&e.success&&!e.isRunning)return i("Auto-apply process stopped by user (background check)"),l("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0}catch(e){i("Failed to check background state, using local state",e)}return!1}chrome.runtime.onMessage.addListener((a,e,t)=>{if(a.action==="START_AUTO_APPLY")return startAutoApplyProcess().then(()=>{t({success:!0})}).catch(o=>{console.error("Error in auto-apply process:",o),t({success:!1,error:o.message})}),!0});var v=class extends u{static async processJobPage(e,t,o,r){this.debugLog("Processing page ".concat(e,"/").concat(t)),l("Processing page ".concat(e," of ").concat(t),"info");let n=await f.getListOfJobsOnPage(o);i("Found ".concat(n.length," jobs on page ").concat(e));for(let s of n){if(await d(r))return this.debugLog("Stop requested during job processing - breaking job loop"),!1;if(await q.processJob(s,r),await d(r))return this.debugLog("Stop requested after job processing - breaking job loop"),!1}if(e<t)if(i("Finished processing page ".concat(e,", navigating to next page...")),l("Moving to page ".concat(e+1," of ").concat(t,"..."),"info"),await f.goToNextPage())i("Successfully navigated to page ".concat(e+1));else return i("Failed to navigate to next page or reached last page"),await f.isOnLastPage()?(i("Confirmed: reached the last page"),l("Reached the last page of results","info")):(i("Navigation failed but not on last page - stopping process"),l("Failed to navigate to next page - stopping","error")),!1;else i("Finished processing last page (".concat(e,"/").concat(t,")"));return!0}},q=class extends u{static async processJob(e,t){try{let o=await m.getJobClickableElement(e);if(await m.clickOnJob(o),i("Clicked on job"),await m.scrollDownToLoadNextJob(e),i("Scrolled to job"),await d(t))return;let r=await m.isEasyButtonAvailable();if(i("Is Easy Apply button available:",r),!r){i("Job already applied. Skipping..."),l("Job already applied. Skipping...","info");return}let n=await E.getAllJobInfo();if(i("Job info:",n),await chrome.storage.local.set({currentJob:n}),await m.clickEasyApply(),i("Attempted to click Easy Apply"),await new Promise(c=>setTimeout(c,2e3)),await d(t)){this.debugLog("Stop requested before form processing");return}let s=async()=>await d(t);await x.processForm(s),i("Processed application form"),await chrome.storage.local.remove("currentJob"),i("Removed current job from storage")}catch(o){console.error("Error processing job:",o),i("Error processing job:",{error:o.message,stack:o.stack}),l("Error processing job. Continuing to next one...","error")}}},C=v;var g=!1;async function _(){try{if(i("Starting auto-apply process"),i("Current URL:",window.location.href),await d(g))return;let a=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(i("Search element found:",!!a),!a){i("Available elements on page:",{body:document.body.innerHTML.substring(0,500)+"...",possibleSelectors:{scaffold:document.querySelector(".scaffold-layout"),jobsSearch:document.querySelector(".jobs-search-two-pane__layout"),anyJobsRelated:document.querySelectorAll('[class*="jobs-"]')}}),l("Could not find jobs list. Please make sure you are on LinkedIn jobs page.","error");return}i("Getting total jobs count");let e=await f.getTotalJobsSearchCount(a);i("Total jobs found:",e),l("Found ".concat(e," jobs to process"),"info"),i("Getting available pages");let t=await f.getAvailablePages(a,e);i("Total pages found:",t);for(let o=1;o<=t;o++){if(await d(g))return;if(await C.processJobPage(o,t,a,g)===!1){i("Page processing failed or reached end, stopping at page ".concat(o));break}}await d(g)||(i("Auto-apply process completed"),l("Auto-apply process completed!","success"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}))}catch(a){console.error("Error in auto-apply process:",a),i("Fatal error in auto-apply process:",{error:a.message,stack:a.stack}),l("Error in auto-apply process","error")}}chrome.runtime.onMessage.addListener((a,e,t)=>(i("Received message in content script:",a),a.action==="startAutoApply"?g?t({success:!1,message:"Auto apply already running"}):(g=!0,i("Starting auto-apply process with user data:",a.userData),i("AI settings:",a.aiSettings),window.currentUserData=a.userData,window.currentAiSettings=a.aiSettings,_(),t({success:!0,message:"Auto apply started"})):a.action==="stopAutoApply"?(i("Stopping auto-apply process"),g=!1,t({success:!0,message:"Auto apply stopped"})):a.action==="GET_STATE"?(i("Getting current state"),t({isRunning:g})):a.action==="START_AUTO_APPLY"?g?t({success:!1,message:"Auto apply already running"}):(g=!0,i("Starting auto-apply process (legacy format)"),_(),t({success:!0,message:"Auto apply started"})):a.action==="STOP_AUTO_APPLY"?(i("Stopping auto-apply process (legacy format)"),g=!1,t({success:!0,message:"Auto apply stopped"})):t({success:!1,message:"Unknown action"}),!0));
