(()=>{var s=class{static async getTotalJobsSearchCount(o){try{await new Promise(t=>setTimeout(t,1e3));let e=o.querySelector(".jobs-search-results-list__subtitle");if(e){let t=e.textContent.trim(),n=parseInt(t.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return console.log(`Total jobs found: ${n}`),n}else return console.log("No results found"),0}catch(e){return console.error("An error occurred while fetching total jobs count:",e),0}}static async getAvailablePages(o){try{await new Promise(r=>setTimeout(r,1e3));let e=o.querySelector('ul[class*="artdeco-pagination__pages--number"]');if(!e)return console.log("Pagination list not found."),0;let t=e.querySelectorAll("li");if(t.length===0)return console.log("No pagination items found."),0;let a=t[t.length-1].getAttribute("data-test-pagination-page-btn");if(a){let r=parseInt(a,10);return console.log(`Total pages available: ${r}`),r}else return console.log("Could not find 'data-test-pagination-page-btn' attribute."),0}catch(e){return console.error("Exception occurred while fetching available pages:",e),0}}static async getListOfJobsOnPage(o){try{await new Promise(n=>setTimeout(n,1e3));let e=o.querySelector(".scaffold-layout__list");if(!e)return console.log("Jobs container not found."),[];let t=e.querySelectorAll("li[class*='scaffold-layout__list-item']");return console.log(`Found ${t.length} jobs on this page.`),Array.from(t)}catch(e){return console.error("Exception occurred while fetching the list of jobs:",e),[]}}static async getJobClickableElement(o){try{await new Promise(t=>setTimeout(t,1e3));let e=o.querySelector("a");return e||(console.log("Could not find clickable element for job"),null)}catch(e){return console.error("Exception occurred while fetching clickable element:",e),null}}static async isJobApplied(o){try{await new Promise(t=>setTimeout(t,1e3));let e=o.querySelector("ul.job-card-list__footer-wrapper li.job-card-container__footer-item strong span.tvm__text--neutral");if(e&&(console.info("Skipping already applied job"),e.textContent.includes("Applied")))return!0}catch(e){console.info("Job not applied, extracting job data, error: ",e)}return!1}static async clickOnJob(o){try{o.click()}catch(e){console.info("could not click on job element",e)}}static async clickApply(o){if(window.location.href.includes("linkedin.com/jobs")){let e=document.querySelector(".jobs-s-apply button");e&&(console.log(e),e.addEventListener("click",()=>{this.fillApplicationForm()}))}}static async fillApplicationForm(){let o=document.querySelector('input[name="firstName"]'),e=document.querySelector('input[name="email"]'),t=document.querySelector('input[type="file"]');if(o&&e&&(o.value="Your First Name",e.value="your-email@example.com",t)){let n="path/to/your/resume.pdf";t.value=n}}},l=s;var b=new MutationObserver(async(c,o)=>{let e=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(e){o.disconnect();try{let t=await l.getTotalJobsSearchCount(e),n=await l.getAvailablePages(e),a=await l.getListOfJobsOnPage(e);for(let r of a){let i=await l.getJobClickableElement(r);await l.clickOnJob(i),await new Promise(u=>setTimeout(u,1e3))}}catch(t){console.error("An error occurred while processing jobs:",t)}}});b.observe(document.body,{childList:!0,subtree:!0});})();
