var w=class{static async wait(t=1e3){await new Promise(e=>setTimeout(e,t))}static debugLog(t){console.log("[".concat(this.constructor.name,"] ").concat(t))}static errorLog(t,e){console.error("[".concat(this.constructor.name,"] ").concat(t,":"),e)}},d=w;var L=class extends d{static async getTotalJobsSearchCount(t){try{await this.wait();let e=t.querySelector(".jobs-search-results-list__subtitle");if(e){let o=e.textContent.trim(),i=parseInt(o.split(" ")[0].replace(/,/g,"").replace(/\./g,"").replace(/\+/g,""));return this.debugLog("Total jobs found: ".concat(i)),i}else return this.debugLog("No results found"),0}catch(e){return this.errorLog("Error fetching total jobs count",e),0}}static async getAvailablePages(t,e){try{await this.wait();let o=t.querySelector('ul[class*="jobs-search-pagination__pages"]');if(!o)return this.debugLog("Pagination list not found."),0;let i=o.querySelectorAll("li");if(i.length===0)return this.debugLog("No pagination items found."),0;let c=i[i.length-1];this.debugLog("Last page: ".concat(c));let n=Math.ceil(e/25);return this.debugLog("Total pages available: ".concat(n)),n}catch(o){return this.errorLog("Error fetching available pages",o),0}}static async getListOfJobsOnPage(t){try{await this.wait();let e=t.querySelector(".scaffold-layout__list");if(!e)return this.debugLog("Jobs container not found."),[];let o=e.querySelectorAll("li[class*='scaffold-layout__list-item']");return this.debugLog("Found ".concat(o.length," jobs on this page.")),Array.from(o)}catch(e){return this.errorLog("Error fetching list of jobs",e),[]}}},y=L;var S=class extends d{static async getJobClickableElement(t){try{await this.wait();let e=t.querySelector("a");return e||(this.debugLog("Could not find clickable element for job"),null)}catch(e){return this.errorLog("Error fetching clickable element",e),null}}static async scrollDownToLoadNextJob(t){try{await this.wait(),t.scrollIntoView({behavior:"smooth",block:"center"}),this.debugLog("Scrolled down to load next job")}catch(e){this.errorLog("Error scrolling down to load next job",e)}}static async clickOnJob(t){try{t.click(),this.debugLog("Clicked on job element")}catch(e){this.debugLog("Could not click on job element",e)}}static async clickEasyApply(){try{let t=document.querySelector(".jobs-s-apply button");if(t)return t.click(),this.debugLog("Clicked on easy apply button"),!0;throw new Error("Easy apply button not found")}catch(t){throw this.errorLog("Error clicking on easy apply button",t),t}}},f=S;var k=class extends d{static async getJobTitle(){try{let t=document.querySelector(".job-details-jobs-unified-top-card__job-title h1");if(t){let e=t.textContent.trim();return this.debugLog("Found job title: ".concat(e)),e}return this.debugLog("Job title not found"),null}catch(t){return this.errorLog("Error getting job title",t),null}}static async getCompanyName(){try{let t=document.querySelector(".job-details-jobs-unified-top-card__company-name a");if(t){let e=t.textContent.trim();return this.debugLog("Found company name: ".concat(e)),e}return this.debugLog("Company name not found"),null}catch(t){return this.errorLog("Error getting company name",t),null}}static async getLocation(){try{let t=document.querySelector(".job-details-jobs-unified-top-card__tertiary-description-container .tvm__text");if(t){let e=t.textContent.trim();return this.debugLog("Found location: ".concat(e)),e}return this.debugLog("Location not found"),null}catch(t){return this.errorLog("Error getting location",t),null}}static async getJobType(){try{let t=document.querySelector(".job-details-preferences-and-skills__pill .ui-label");if(t){let o=t.textContent.trim().split("Matches")[0].trim();return this.debugLog("Found job type: ".concat(o)),o}return this.debugLog("Job type not found"),null}catch(t){return this.errorLog("Error getting job type",t),null}}static async getJobDescription(){try{let t=document.querySelector(".jobs-description__content");if(t){let e=t.textContent.trim();return this.debugLog("Found job description"),e}return this.debugLog("Job description not found"),null}catch(t){return this.errorLog("Error getting job description",t),null}}static async getApplicantCount(){try{let t=document.querySelector(".jobs-premium-applicant-insights__list-item .jobs-premium-applicant-insights__list-num");if(t){let e=t.textContent.trim();return this.debugLog("Found applicant count: ".concat(e)),e}return this.debugLog("Applicant count not found"),null}catch(t){return this.errorLog("Error getting applicant count",t),null}}static async getAllJobInfo(){try{let t={title:await this.getJobTitle(),company:await this.getCompanyName(),location:await this.getLocation(),jobType:await this.getJobType(),description:await this.getJobDescription(),applicantCount:await this.getApplicantCount()};return this.debugLog("Retrieved all job information"),t}catch(t){return this.errorLog("Error getting all job information",t),null}}},E=k;var C=class extends d{static async closeForm(t=!1){var e,o;try{let i=document.querySelector('button[aria-label="Dismiss"]');if(i||(i=document.querySelector('button[aria-label="Close"]')||document.querySelector('button[aria-label="Cancel"]')||document.querySelector("button[data-test-modal-close-btn]")),i){if(i.click(),await this.wait(),t){let c=document.querySelector('button[data-control-name="save_application_btn"]');c&&(c.click(),this.debugLog("Closed form and saved application"))}else{let c=document.querySelector('button[data-control-name="discard_application_confirm_btn"]')||document.querySelector("button[data-test-dialog-secondary-btn]");c&&(c.click(),this.debugLog("Closed form and discarded application"))}await this.wait()}}catch(i){this.errorLog("Error closing form",i);try{let c=document.querySelectorAll("button");for(let n of c)(n.textContent.toLowerCase().includes("close")||n.textContent.toLowerCase().includes("cancel")||(e=n.getAttribute("aria-label"))!=null&&e.toLowerCase().includes("close")||(o=n.getAttribute("aria-label"))!=null&&o.toLowerCase().includes("dismiss"))&&(n.click(),await this.wait(500))}catch(c){this.errorLog("Failed final attempt to close form",c)}}}static async clickNextPage(){try{await this.wait();let t=document.querySelector('button[aria-label="Continue to next step"]');t&&(t.click(),this.debugLog("Clicked on next page button"))}catch(t){this.errorLog("Error clicking on next page button",t)}}static async clickPreviousPage(){try{await this.wait();let t=document.querySelector('button[aria-label="Back to previous step"]');t&&(t.click(),this.debugLog("Clicked on previous page button"))}catch(t){this.errorLog("Error clicking on previous page button",t)}}static async clickReviewApplication(){try{await this.wait();let t=document.querySelector('button[aria-label="Review your application"]');t&&(t.click(),this.debugLog("Clicked on review button"))}catch(t){this.errorLog("Error clicking on review button",t)}}static async clickSubmitApplication(){try{await this.wait();let t=document.querySelector('button[aria-label="Submit application"]');t&&(t.click(),this.debugLog("Clicked on submit button"))}catch(t){this.errorLog("Error clicking on submit button",t)}}static async processForm(t){try{let e=Date.now(),o=3*60*1e3,i=!1;for(;!i&&Date.now()-e<o;){if(this.debugLog("Starting form processing iteration"),await t())return this.debugLog("Stop requested during form processing"),!1;await this.processFormQuestions();let c=Date.now(),n=60*1e3,r=!1;for(;!r&&Date.now()-c<n;){if(await t())return this.debugLog("Stop requested during review loop"),!1;let l=document.querySelector('button[aria-label="Review your application"]');if(l){await this.processFormQuestions(),l.click(),this.debugLog("Found and clicked review button"),r=!0,await this.wait(2e3);let g=document.querySelector('button[aria-label="Submit application"]');if(g){g.click(),this.debugLog("Clicked submit button after review"),i=!0;break}}else{let g=document.querySelector('button[aria-label="Continue to next step"]');if(g)await this.processFormQuestions(),g.click(),this.debugLog("Clicked next page button"),await this.wait(2e3);else{let h=document.querySelector('button[aria-label="Submit application"]');if(h){h.click(),this.debugLog("Found submit button without review"),i=!0;break}}}await this.wait(2e3)}r||this.debugLog("Review button not found within 1 minute, continuing to next iteration"),await this.wait(2e3)}return i?(this.debugLog("Form processed and submitted successfully"),!0):(this.debugLog("Form processing timed out after 3 minutes"),!1)}catch(e){return this.errorLog("Error processing form",e),!1}}static async processFormQuestions(){try{this.debugLog("Processing form questions");let t=document.querySelectorAll("div.fb-dash-form-element");this.debugLog("Found ".concat(t.length," form elements"));for(let e of t)try{let o=e.querySelector("label");if(!o){this.debugLog("No label found for form element");continue}let i=o.textContent.trim();i=i.replace(/(.+?)\1/,"$1"),this.debugLog("Processing question: ".concat(i));let c=e.querySelector("input, textarea, select");if(!c){this.debugLog("No input field found for question");continue}let n=[];switch(c.tagName.toLowerCase()){case"input":c.type==="radio"&&e.querySelectorAll('input[type="radio"]').forEach(l=>{let g=e.querySelector('label[for="'.concat(l.id,'"]'));g&&n.push(g.textContent.trim())});break;case"select":n=Array.from(c.options).map(r=>r.text.trim());break}n.length>0&&(this.debugLog('Available options for "'.concat(i,'":')),n.forEach((r,l)=>{this.debugLog("  ".concat(l+1,". ").concat(r))})),await this.answerQuestion(i,n)}catch(o){this.errorLog("Error processing form element: ".concat(o.message),o)}return this.debugLog("Completed processing form questions"),!0}catch(t){return this.errorLog("Error in processFormQuestions",t),!1}}static async answerQuestion(t,e=[]){try{this.debugLog("Answering question: ".concat(t)),this.debugLog("Available options:",e);let o=document.querySelectorAll("div.fb-dash-form-element");for(let i of o){let c=i.querySelector("label");if(!c)continue;let n=c.textContent.trim();if(n=n.replace(/(.+?)\1/,"$1"),n!==t)continue;let r=i.querySelector("input, textarea, select");if(!r){this.debugLog("No input field found for question");continue}switch(r.tagName.toLowerCase()){case"input":switch(r.type){case"text":case"tel":case"email":t.toLowerCase().includes("phone")||t.toLowerCase().includes("mobile")?r.value="1234567890":t.toLowerCase().includes("email")?r.value="example@email.com":t.toLowerCase().includes("name")?r.value="John Doe":e.length>0?r.value=e[0]:r.value="Yes",r.dispatchEvent(new Event("input",{bubbles:!0}));break;case"radio":let l=i.querySelectorAll('input[type="radio"]');if(e.length>0)for(let g of l){let h=i.querySelector('label[for="'.concat(g.id,'"]'));if(h&&h.textContent.trim()===e[0]){g.click(),this.debugLog("Selected radio option: ".concat(e[0]));break}}else l.length>0&&(l[0].click(),this.debugLog("Selected first radio option"));break;case"checkbox":r.checked=!0,r.dispatchEvent(new Event("change",{bubbles:!0}));break}break;case"textarea":e.length>0?r.value=e[0]:r.value="I am interested in this position and believe my skills align well with the requirements.",r.dispatchEvent(new Event("input",{bubbles:!0}));break;case"select":if(e.length>0){for(let l=0;l<r.options.length;l++)if(r.options[l].text.trim()===e[0]){r.selectedIndex=l,r.dispatchEvent(new Event("change",{bubbles:!0})),this.debugLog("Selected option: ".concat(e[0]));break}}else r.options.length>0&&(r.selectedIndex=0,r.dispatchEvent(new Event("change",{bubbles:!0})),this.debugLog("Selected first option: ".concat(r.options[0].text.trim())));break}return await this.wait(500),!0}return this.debugLog("Question not found: ".concat(t)),!1}catch(o){return this.errorLog('Error answering question "'.concat(t,'"'),o),!1}}},m=C;function a(s,t=null){let e=new Date().toISOString().split("T")[1],o="[EasyJob Debug ".concat(e,"] ").concat(s);t?console.log(o,t):console.log(o)}function p(s,t="info"){a("Status Update: ".concat(t," - ").concat(s)),chrome.runtime.sendMessage({type:"STATUS_UPDATE",text:s,status:t})}async function b(s){return s?!1:(a("Auto-apply process stopped by user"),p("Auto-apply process stopped","info"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}),!0)}var u=!1;async function j(){try{if(a("Starting auto-apply process"),a("Current URL:",window.location.href),await b(u))return;let s=document.querySelector(".scaffold-layout.jobs-search-two-pane__layout");if(a("Search element found:",!!s),!s){a("Available elements on page:",{body:document.body.innerHTML.substring(0,500)+"...",possibleSelectors:{scaffold:document.querySelector(".scaffold-layout"),jobsSearch:document.querySelector(".jobs-search-two-pane__layout"),anyJobsRelated:document.querySelectorAll('[class*="jobs-"]')}}),p("Could not find jobs list. Please make sure you are on LinkedIn jobs page.","error");return}a("Getting total jobs count");let t=await y.getTotalJobsSearchCount(s);a("Total jobs found:",t),p("Found ".concat(t," jobs to process"),"info"),a("Getting available pages");let e=await y.getAvailablePages(s,t);a("Total pages found:",e);for(let o=1;o<=e;o++){if(await b(u))return;a("Processing page ".concat(o,"/").concat(e)),p("Processing page ".concat(o," of ").concat(e),"info");let i=await y.getListOfJobsOnPage(s);a("Found ".concat(i.length," jobs on page ").concat(o));for(let c of i){if(await b(u))return;try{let n=await f.getJobClickableElement(c);if(await f.clickOnJob(n),a("Clicked on job"),await f.scrollDownToLoadNextJob(c),a("Scrolled to job"),await b(u))return;let r=await E.getAllJobInfo();if(a("Job info:",r),await f.clickEasyApply(),a("Attempted to click Easy Apply"),await new Promise(l=>setTimeout(l,2e3)),await b(u)){await m.closeForm(!1);return}await m.processForm(()=>b(u)),a("Processed application form"),await m.closeForm(!1),a("Closed application form")}catch(n){console.error("Error processing job:",n),a("Error processing job:",{error:n.message,stack:n.stack}),p("Error processing job. Continuing to next one...","error"),await m.closeForm(!1)}await b(u)||(await new Promise(n=>setTimeout(n,3e3)),a("Waited cooldown period"))}}await b(u)||(a("Auto-apply process completed"),p("Auto-apply process completed!","success"),chrome.runtime.sendMessage({type:"PROCESS_COMPLETE"}))}catch(s){console.error("Error in auto-apply process:",s),a("Fatal error in auto-apply process:",{error:s.message,stack:s.stack}),p("Error in auto-apply process","error"),await m.closeForm(!1)}}chrome.runtime.onMessage.addListener((s,t,e)=>(a("Received message:",s),s.action==="START_AUTO_APPLY"?u||(u=!0,a("Starting auto-apply process"),j()):s.action==="STOP_AUTO_APPLY"?(a("Stopping auto-apply process"),u=!1):s.action==="GET_STATE"&&(a("Getting current state"),e({isRunning:u})),!0));
